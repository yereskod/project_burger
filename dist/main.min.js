"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(P,e){function h(e){return null!=e&&e===e.window}var t=[],M=P.document,r=Object.getPrototypeOf,s=t.slice,S=t.concat,l=t.push,i=t.indexOf,n={},o=n.toString,b=n.hasOwnProperty,a=b.toString,u=a.call(Object),g={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},c={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var r,i,o=(n=n||M).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function A(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?n[o.call(e)]||"object":_typeof(e)}var d="3.4.1",G=function e(t,n){return new e.fn.init(t,n)},f=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function p(e){var t=!!e&&"length"in e&&e.length,n=A(e);return!m(e)&&!h(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}G.fn=G.prototype={jquery:d,constructor:G,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=G.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return G.each(this,e)},map:function(n){return this.pushStack(G.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},G.extend=G.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"===_typeof(a)||m(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(u&&r&&(G.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||G.isPlainObject(n)?n:{},i=!1,a[t]=G.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},G.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=b.call(t,"constructor")&&t.constructor)&&a.call(n)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){v(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(p(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(f,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?G.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!=a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(p(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return S.apply([],a)},guid:1,support:g}),"function"==typeof Symbol&&(G.fn[Symbol.iterator]=t[Symbol.iterator]),G.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var T=function(n){function d(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function i(){y()}var e,p,v,o,a,T,f,h,A,l,u,y,P,s,M,S,c,b,g,G="sizzle"+1*new Date,m=n.document,C=0,r=0,H=le(),E=le(),x=le(),w=le(),B=function(e,t){return e===t&&(u=!0),0},D={}.hasOwnProperty,t=[],I=t.pop,N=t.push,L=t.push,O=t.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",V="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",X="\\["+V+"*("+F+")(?:"+V+"*([*^$|!~]?=)"+V+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+V+"*\\]",W=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+X+")*)|.*)\\)|)",j=new RegExp(V+"+","g"),_=new RegExp("^"+V+"+|((?:^|[^\\\\])(?:\\\\.)*)"+V+"+$","g"),q=new RegExp("^"+V+"*,"+V+"*"),U=new RegExp("^"+V+"*([>+~]|"+V+")"+V+"*"),K=new RegExp(V+"|>"),Q=new RegExp(W),z=new RegExp("^"+F+"$"),$={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+X),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+V+"*(even|odd|(([+-]|)(\\d*)n|)"+V+"*(?:([+-]|)"+V+"*(\\d+)|))"+V+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+V+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+V+"*((?:-\\d)?\\d*)"+V+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,re=new RegExp("\\\\([\\da-f]{1,6}"+V+"?|("+V+")|.)","ig"),ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=ve(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{L.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){L={apply:t.length?function(e,t){N.apply(e,O.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,l,u,c,d=e&&e.ownerDocument,f=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return n;if(!r&&((e?e.ownerDocument||e:m)!==P&&y(e),e=e||P,M)){if(11!==f&&(l=te.exec(t)))if(i=l[1]){if(9===f){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&g(e,a)&&a.id===i)return n.push(a),n}else{if(l[2])return L.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return L.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!w[t+" "]&&(!S||!S.test(t))&&(1!==f||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===f&&K.test(t)){for((s=e.getAttribute("id"))?s=s.replace(ie,oe):e.setAttribute("id",s=G),o=(u=T(t)).length;o--;)u[o]="#"+s+" "+me(u[o]);c=u.join(","),d=ne.test(t)&&be(e.parentNode)||e}try{return L.apply(n,d.querySelectorAll(c)),n}catch(e){w(t,!0)}finally{s===G&&e.removeAttribute("id")}}}return h(t.replace(_,"$1"),e,n,r)}function le(){var r=[];return function e(t,n){return r.push(t+" ")>v.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function ue(e){return e[G]=!0,e}function ce(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)v.attrHandle[n[r]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function Te(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function he(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function Se(a){return ue(function(o){return o=+o,ue(function(e,t){for(var n,r=a([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function be(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},y=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==P&&9===r.nodeType&&r.documentElement&&(s=(P=r).documentElement,M=!a(P),m!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),p.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ce(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(P.getElementsByClassName),p.getById=ce(function(e){return s.appendChild(e).id=G,!P.getElementsByName||!P.getElementsByName(G).length}),p.getById?(v.filter.ID=function(e){var t=e.replace(re,d);return function(e){return e.getAttribute("id")===t}},v.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}}):(v.filter.ID=function(e){var n=e.replace(re,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},v.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),v.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},v.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&M)return t.getElementsByClassName(e)},c=[],S=[],(p.qsa=ee.test(P.querySelectorAll))&&(ce(function(e){s.appendChild(e).innerHTML="<a id='"+G+"'></a><select id='"+G+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&S.push("[*^$]="+V+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||S.push("\\["+V+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+G+"-]").length||S.push("~="),e.querySelectorAll(":checked").length||S.push(":checked"),e.querySelectorAll("a#"+G+"+*").length||S.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&S.push("name"+V+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&S.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&S.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),S.push(",.*:")})),(p.matchesSelector=ee.test(b=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),c.push("!=",W)}),S=S.length&&new RegExp(S.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(s.compareDocumentPosition),g=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===m&&g(m,e)?-1:t===P||t.ownerDocument===m&&g(m,t)?1:l?k(l,e)-k(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===P?-1:t===P?1:i?-1:o?1:l?k(l,e)-k(l,t):0;if(i===o)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?fe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),P},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==P&&y(e),p.matchesSelector&&M&&!w[t+" "]&&(!c||!c.test(t))&&(!S||!S.test(t)))try{var n=b.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){w(t,!0)}return 0<se(t,P,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==P&&y(e),g(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==P&&y(e);var n=v.attrHandle[t.toLowerCase()],r=n&&D.call(v.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:p.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(ie,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(u=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(B),u){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return l=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(v=se.selectors={cacheLength:50,createPseudo:ue,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(re,d),e[3]=(e[3]||e[4]||e[5]||"").replace(re,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Q.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(re,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+V+")"+e+"("+V+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(j," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(T,e,t,h,S){var b="nth"!==T.slice(0,3),g="last"!==T.slice(-4),m="of-type"===e;return 1===h&&0===S?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,l,u=b!=g?"nextSibling":"previousSibling",c=e.parentNode,d=m&&e.nodeName.toLowerCase(),f=!n&&!m,p=!1;if(c){if(b){for(;u;){for(a=e;a=a[u];)if(m?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=u="only"===T&&!l&&"nextSibling"}return!0}if(l=[g?c.firstChild:c.lastChild],g&&f){for(p=(s=(r=(i=(o=(a=c)[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]||[])[0]===C&&r[1])&&r[2],a=s&&c.childNodes[s];a=++s&&a&&a[u]||(p=s=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){i[T]=[C,s,p];break}}else if(f&&(p=s=(r=(i=(o=(a=e)[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]||[])[0]===C&&r[1]),!1===p)for(;(a=++s&&a&&a[u]||(p=s=0)||l.pop())&&((m?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++p||(f&&((i=(o=a[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]=[C,p]),a!==e)););return(p-=S)===h||p%h==0&&0<=p/h}}},PSEUDO:function(e,o){var t,a=v.pseudos[e]||v.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[G]?a(o):1<a.length?(t=[e,e,"",o],v.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var n,r=a(e,o),i=r.length;i--;)e[n=k(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ue(function(e){var r=[],i=[],s=f(e.replace(_,"$1"));return s[G]?ue(function(e,t,n,r){for(var i,o=s(e,null,r,[]),a=e.length;a--;)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:ue(function(t){return function(e){return 0<se(t,e).length}}),contains:ue(function(t){return t=t.replace(re,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:ue(function(n){return z.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(re,d).toLowerCase(),function(e){var t;do{if(t=M?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!v.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:Se(function(){return[0]}),last:Se(function(e,t){return[t-1]}),eq:Se(function(e,t,n){return[n<0?n+t:n]}),even:Se(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:Se(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:Se(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:Se(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=v.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})v.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})v.pseudos[e]=Te(e);function ge(){}function me(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(s,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,f=r++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[C,f];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(i=(o=e[G]||(e[G]={}))[e.uniqueID]||(o[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((r=i[c])&&r[0]===C&&r[1]===f)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function Ae(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function ye(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function Pe(p,T,h,S,b,e){return S&&!S[G]&&(S=Pe(S)),b&&!b[G]&&(b=Pe(b,e)),ue(function(e,t,n,r){var i,o,a,s=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(T||"*",n.nodeType?[n]:n,[]),d=!p||!e&&T?c:ye(c,s,p,n,r),f=h?b||(e?p:u||S)?[]:t:d;if(h&&h(d,f,n,r),S)for(i=ye(f,l),S(i,[],n,r),o=i.length;o--;)(a=i[o])&&(f[l[o]]=!(d[l[o]]=a));if(e){if(b||p){if(b){for(i=[],o=f.length;o--;)(a=f[o])&&i.push(d[o]=a);b(null,f=[],i,r)}for(o=f.length;o--;)(a=f[o])&&-1<(i=b?k(e,a):s[o])&&(e[i]=!(t[i]=a))}}else f=ye(f===t?f.splice(u,f.length):f),b?b(null,t,f,r):L.apply(t,f)})}function Me(e){for(var i,t,n,r=e.length,o=v.relative[e[0].type],a=o||v.relative[" "],s=o?1:0,l=ve(function(e){return e===i},a,!0),u=ve(function(e){return-1<k(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==A)||((i=t).nodeType?l(e,t,n):u(e,t,n));return i=null,r}];s<r;s++)if(t=v.relative[e[s].type])c=[ve(Ae(c),t)];else{if((t=v.filter[e[s].type].apply(null,e[s].matches))[G]){for(n=++s;n<r&&!v.relative[e[n].type];n++);return Pe(1<s&&Ae(c),1<s&&me(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(_,"$1"),t,s<n&&Me(e.slice(s,n)),n<r&&Me(e=e.slice(n)),n<r&&me(e))}c.push(t)}return Ae(c)}return ge.prototype=v.filters=v.pseudos,v.setFilters=new ge,T=se.tokenize=function(e,t){var n,r,i,o,a,s,l,u=E[e+" "];if(u)return t?0:u.slice(0);for(a=e,s=[],l=v.preFilter;a;){for(o in n&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=U.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(_," ")}),a=a.slice(n.length)),v.filter)!(r=$[o].exec(a))||l[o]&&!(r=l[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):E(e,s).slice(0)},f=se.compile=function(e,t){var n,r=[],i=[],o=x[e+" "];if(!o){for(n=(t=t||T(e)).length;n--;)(o=Me(t[n]))[G]?r.push(o):i.push(o);(o=x(e,function(S,b){function e(e,t,n,r,i){var o,a,s,l=0,u="0",c=e&&[],d=[],f=A,p=e||m&&v.find.TAG("*",i),T=C+=null==f?1:Math.random()||.1,h=p.length;for(i&&(A=t===P||t||i);u!==h&&null!=(o=p[u]);u++){if(m&&o){for(a=0,t||o.ownerDocument===P||(y(o),n=!M);s=S[a++];)if(s(o,t||P,n)){r.push(o);break}i&&(C=T)}g&&((o=!s&&o)&&l--,e&&c.push(o))}if(l+=u,g&&u!==l){for(a=0;s=b[a++];)s(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=I.call(r));d=ye(d)}L.apply(r,d),i&&!e&&0<d.length&&1<l+b.length&&se.uniqueSort(r)}return i&&(C=T,A=f),c}var g=0<b.length,m=0<S.length;return g?ue(e):e}(i,r))).selector=e}return o},h=se.select=function(e,t,n,r){var i,o,a,s,l,u="function"==typeof e&&e,c=!r&&T(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&M&&v.relative[o[1].type]){if(!(t=(v.find.ID(a.matches[0].replace(re,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=$.needsContext.test(e)?0:o.length;i--&&(a=o[i],!v.relative[s=a.type]);)if((l=v.find[s])&&(r=l(a.matches[0].replace(re,d),ne.test(o[0].type)&&be(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&me(o)))return L.apply(n,r),n;break}}return(u||f(e,c))(r,t,!M,n,!t||ne.test(e)&&be(t.parentNode)||t),n},p.sortStable=G.split("").sort(B).join("")===G,p.detectDuplicates=!!u,y(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(P);G.find=T,G.expr=T.selectors,G.expr[":"]=G.expr.pseudos,G.uniqueSort=G.unique=T.uniqueSort,G.text=T.getText,G.isXMLDoc=T.isXML,G.contains=T.contains,G.escapeSelector=T.escape;function y(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&G(e).is(n))break;r.push(e)}return r}function C(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var H=G.expr.match.needsContext;function E(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var x=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function w(e,n,r){return m(n)?G.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?G.grep(e,function(e){return e===n!==r}):"string"!=typeof n?G.grep(e,function(e){return-1<i.call(n,e)!==r}):G.filter(n,e,r)}G.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?G.find.matchesSelector(r,e)?[r]:[]:G.find.matches(e,G.grep(t,function(e){return 1===e.nodeType}))},G.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(G(e).filter(function(){for(t=0;t<r;t++)if(G.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)G.find(e,i[t],n);return 1<r?G.uniqueSort(n):n},filter:function(e){return this.pushStack(w(this,e||[],!1))},not:function(e){return this.pushStack(w(this,e||[],!0))},is:function(e){return!!w(this,"string"==typeof e&&H.test(e)?G(e):e||[],!1).length}});var B,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(G.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||B,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(G):G.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:D.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof G?t[0]:t,G.merge(this,G.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:M,!0)),x.test(r[1])&&G.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=M.getElementById(r[2]))&&(this[0]=i,this.length=1),this}).prototype=G.fn,B=G(M);var I=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}G.fn.extend({has:function(e){var t=G(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(G.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&G(e);if(!H.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&G.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?G.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(G(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(G.uniqueSort(G.merge(this.get(),G(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),G.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return y(e,"parentNode")},parentsUntil:function(e,t,n){return y(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return y(e,"nextSibling")},prevAll:function(e){return y(e,"previousSibling")},nextUntil:function(e,t,n){return y(e,"nextSibling",n)},prevUntil:function(e,t,n){return y(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(E(e,"template")&&(e=e.content||e),G.merge([],e.childNodes))}},function(r,i){G.fn[r]=function(e,t){var n=G.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=G.filter(t,n)),1<this.length&&(N[r]||G.uniqueSort(n),I.test(r)&&n.reverse()),this.pushStack(n)}});var O=/[^\x20\t\r\n\f]+/g;function k(e){return e}function R(e){throw e}function V(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}G.Callbacks=function(r){r="string"==typeof r?function(e){var n={};return G.each(e.match(O)||[],function(e,t){n[t]=!0}),n}(r):G.extend({},r);function n(){for(o=o||r.once,t=i=!0;s.length;l=-1)for(e=s.shift();++l<a.length;)!1===a[l].apply(e[0],e[1])&&r.stopOnFalse&&(l=a.length,e=!1);r.memory||(e=!1),i=!1,o&&(a=e?[]:"")}var i,e,t,o,a=[],s=[],l=-1,u={add:function(){return a&&(e&&!i&&(l=a.length-1,s.push(e)),function n(e){G.each(e,function(e,t){m(t)?r.unique&&u.has(t)||a.push(t):t&&t.length&&"string"!==A(t)&&n(t)})}(arguments),e&&!i&&n()),this},remove:function(){return G.each(arguments,function(e,t){for(var n;-1<(n=G.inArray(t,a,n));)a.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<G.inArray(e,a):0<a.length},empty:function(){return a=a&&[],this},disable:function(){return o=s=[],a=e="",this},disabled:function(){return!a},lock:function(){return o=s=[],e||i||(a=e=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],s.push(t),i||n()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!t}};return u},G.extend({Deferred:function(e){var o=[["notify","progress",G.Callbacks("memory"),G.Callbacks("memory"),2],["resolve","done",G.Callbacks("once memory"),G.Callbacks("once memory"),0,"resolved"],["reject","fail",G.Callbacks("once memory"),G.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var i=arguments;return G.Deferred(function(r){G.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var l=0;function u(i,o,a,s){return function(){function e(){var e,t;if(!(i<l)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,m(t)?s?t.call(e,u(l,o,k,s),u(l,o,R,s)):(l++,t.call(e,u(l,o,k,s),u(l,o,R,s),u(l,o,k,o.notifyWith))):(a!==k&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}}var n=this,r=arguments,t=s?e:function(){try{e()}catch(e){G.Deferred.exceptionHook&&G.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(G.Deferred.getStackHook&&(t.stackTrace=G.Deferred.getStackHook()),P.setTimeout(t))}}return G.Deferred(function(e){o[0][3].add(u(0,e,m(r)?r:k,e.notifyWith)),o[1][3].add(u(0,e,m(t)?t:k)),o[2][3].add(u(0,e,m(n)?n:R))}).promise()},promise:function(e){return null!=e?G.extend(e,a):a}},s={};return G.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=s.call(arguments),a=G.Deferred();if(n<=1&&(V(e,a.done(t(r)).resolve,a.reject,!n),"pending"===a.state()||m(o[r]&&o[r].then)))return a.then();for(;r--;)V(o[r],t(r),a.reject);return a.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;G.Deferred.exceptionHook=function(e,t){P.console&&P.console.warn&&e&&F.test(e.name)&&P.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},G.readyException=function(e){P.setTimeout(function(){throw e})};var X=G.Deferred();function W(){M.removeEventListener("DOMContentLoaded",W),P.removeEventListener("load",W),G.ready()}G.fn.ready=function(e){return X.then(e).catch(function(e){G.readyException(e)}),this},G.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--G.readyWait:G.isReady)||(G.isReady=!0)!==e&&0<--G.readyWait||X.resolveWith(M,[G])}}),G.ready.then=X.then,"complete"===M.readyState||"loading"!==M.readyState&&!M.documentElement.doScroll?P.setTimeout(G.ready):(M.addEventListener("DOMContentLoaded",W),P.addEventListener("load",W));function j(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===A(n))for(s in i=!0,n)j(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),u&&(t=a?(t.call(e,r),null):(u=t,function(e,t,n){return u.call(G(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o}var _=/^-ms-/,q=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function K(e){return e.replace(_,"ms-").replace(q,U)}function Q(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function z(){this.expando=G.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[K(t)]=n;else for(r in t)i[K(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in r?[t]:t.match(O)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!G.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!G.isEmptyObject(t)}};var $=new z,Y=new z,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function ee(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}Y.set(e,t,n)}else n=void 0;return n}G.extend({hasData:function(e){return Y.hasData(e)||$.hasData(e)},data:function(e,t,n){return Y.access(e,t,n)},removeData:function(e,t){Y.remove(e,t)},_data:function(e,t,n){return $.access(e,t,n)},_removeData:function(e,t){$.remove(e,t)}}),G.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){Y.set(this,n)}):j(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=Y.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){Y.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=Y.get(o),1===o.nodeType&&!$.get(o,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=K(r.slice(5)),ee(o,r,i[r]));$.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){Y.remove(this,e)})}}),G.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=$.get(e,t),n&&(!r||Array.isArray(n)?r=$.access(e,t,G.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=G.queue(e,t),r=n.length,i=n.shift(),o=G._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){G.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $.get(e,n)||$.access(e,n,{empty:G.Callbacks("once memory").add(function(){$.remove(e,[t+"queue",n])})})}}),G.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?G.queue(this[0],t):void 0===n?this:this.each(function(){var e=G.queue(this,t,n);G._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&G.dequeue(this,t)})},dequeue:function(e){return this.each(function(){G.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(a,[a])}var r,i=1,o=G.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=$.get(a[s],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=M.documentElement,oe=function(e){return G.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return G.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});function se(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i}var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===G.css(e,"display")};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return G.css(e,t,"")},l=s(),u=n&&n[3]||(G.cssNumber[t]?"":"px"),c=e.nodeType&&(G.cssNumber[t]||"px"!==u&&+l)&&ne.exec(G.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)G.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,G.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var ce={};function de(e,t){for(var n,r,i,o,a,s,l,u=[],c=0,d=e.length;c<d;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(u[c]=$.get(r,"display")||null,u[c]||(r.style.display="")),""===r.style.display&&le(r)&&(u[c]=(l=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(l=ce[s])||(o=a.body.appendChild(a.createElement(s)),l=G.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),ce[s]=l)))):"none"!==n&&(u[c]="none",$.set(r,"display",n)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}G.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){le(this)?G(this).show():G(this).hide()})}});var fe=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Te=/^$|^module$|\/(?:java|ecma)script/i,he={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Se(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&E(e,t)?G.merge([e],n):n}function be(e,t){for(var n=0,r=e.length;n<r;n++)$.set(e[n],"globalEval",!t||$.get(t[n],"globalEval"))}he.optgroup=he.option,he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td;var ge,me,ve=/<|&#?\w+;/;function Ae(e,t,n,r,i){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),f=[],p=0,T=e.length;p<T;p++)if((o=e[p])||0===o)if("object"===A(o))G.merge(f,o.nodeType?[o]:o);else if(ve.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(pe.exec(o)||["",""])[1].toLowerCase(),l=he[s]||he._default,a.innerHTML=l[1]+G.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;G.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(r&&-1<G.inArray(o,r))i&&i.push(o);else if(u=oe(o),a=Se(d.appendChild(o),"script"),u&&be(a),n)for(c=0;o=a[c++];)Te.test(o.type||"")&&n.push(o);return d}ge=M.createDocumentFragment().appendChild(M.createElement("div")),(me=M.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),ge.appendChild(me),g.checkClone=ge.cloneNode(!0).cloneNode(!0).lastChild.checked,ge.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!ge.cloneNode(!0).lastChild.defaultValue;var ye=/^key/,Pe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Me=/^([^.]*)(?:\.(.+)|)/;function Ge(){return!0}function Ce(){return!1}function He(e,t){return e===function(){try{return M.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,r,i,o){var a,s;if("object"===_typeof(t)){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ee(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return G().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=G.guid++)),e.each(function(){G.event.add(this,t,i,r,n)})}function xe(e,i,o){o?($.set(e,i,!1),G.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=$.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(G.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),$.set(this,i,r),t=o(this,i),this[i](),r!==(n=$.get(this,i))||t?$.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&($.set(this,i,{value:G.event.trigger(G.extend(r[0],G.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===$.get(e,i)&&G.event.add(e,i,Ge)}G.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,d,f,p,T,h,S=$.get(t);if(S)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&G.find.matchesSelector(ie,i),n.guid||(n.guid=G.guid++),(l=S.events)||(l=S.events={}),(a=S.handle)||(a=S.handle=function(e){return void 0!==G&&G.event.triggered!==e.type?G.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(O)||[""]).length;u--;)p=h=(s=Me.exec(e[u])||[])[1],T=(s[2]||"").split(".").sort(),p&&(d=G.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=G.event.special[p]||{},c=G.extend({type:p,origType:h,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&G.expr.match.needsContext.test(i),namespace:T.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,r,T,a)||t.addEventListener&&t.addEventListener(p,a)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),G.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,f,p,T,h,S=$.hasData(e)&&$.get(e);if(S&&(l=S.events)){for(u=(t=(t||"").match(O)||[""]).length;u--;)if(p=h=(s=Me.exec(t[u])||[])[1],T=(s[2]||"").split(".").sort(),p){for(d=G.event.special[p]||{},f=l[p=(r?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+T.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&h!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,T,S.handle)||G.removeEvent(e,p,S.handle),delete l[p])}else for(p in l)G.event.remove(e,p+t[u],n,r,!0);G.isEmptyObject(l)&&$.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=G.event.fix(e),l=new Array(arguments.length),u=($.get(this,"events")||{})[s.type]||[],c=G.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=G.event.handlers.call(this,s,u),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((G.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<G(i,this).index(u):G.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(G.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[G.expando]?e:new G.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&E(t,"input")&&xe(t,"click",Ge),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&E(t,"input")&&xe(t,"click"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&E(t,"input")&&$.get(t,"click")||E(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},G.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},G.Event=function(e,t){if(!(this instanceof G.Event))return new G.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ge:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&G.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[G.expando]=!0},G.Event.prototype={constructor:G.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ge,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ge,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ge,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},G.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Pe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},G.event.addProp),G.each({focus:"focusin",blur:"focusout"},function(e,t){G.event.special[e]={setup:function(){return xe(this,e,He),!1},trigger:function(){return xe(this,e),!0},delegateType:t}}),G.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){G.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||G.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),G.fn.extend({on:function(e,t,n,r){return Ee(this,e,t,n,r)},one:function(e,t,n,r){return Ee(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,G(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){G.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var we=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Be=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return E(e,"table")&&E(11!==t.nodeType?t:t.firstChild,"tr")&&G(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ke(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if($.hasData(e)&&(o=$.access(e),a=$.set(t,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)G.event.add(t,i,u[i][n]);Y.hasData(e)&&(s=Y.access(e),l=G.extend({},s),Y.set(t,l))}}function Re(n,r,i,o){r=S.apply([],r);var e,t,a,s,l,u,c=0,d=n.length,f=d-1,p=r[0],T=m(p);if(T||1<d&&"string"==typeof p&&!g.checkClone&&De.test(p))return n.each(function(e){var t=n.eq(e);T&&(r[0]=p.call(this,e,t.html())),Re(t,r,i,o)});if(d&&(t=(e=Ae(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=G.map(Se(e,"script"),Le)).length;c<d;c++)l=e,c!==f&&(l=G.clone(l,!0,!0),s&&G.merge(a,Se(l,"script"))),i.call(n[c],l,c);if(s)for(u=a[a.length-1].ownerDocument,G.map(a,Oe),c=0;c<s;c++)l=a[c],Te.test(l.type||"")&&!$.access(l,"globalEval")&&G.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?G._evalUrl&&!l.noModule&&G._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):v(l.textContent.replace(Ie,""),l,u))}return n}function Ve(e,t,n){for(var r,i=t?G.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||G.cleanData(Se(r)),r.parentNode&&(n&&oe(r)&&be(Se(r,"script")),r.parentNode.removeChild(r));return e}G.extend({htmlPrefilter:function(e){return e.replace(we,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,l,u,c=e.cloneNode(!0),d=oe(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||G.isXMLDoc(e)))for(a=Se(c),r=0,i=(o=Se(e)).length;r<i;r++)s=o[r],l=a[r],void 0,"input"===(u=l.nodeName.toLowerCase())&&fe.test(s.type)?l.checked=s.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=s.defaultValue);if(t)if(n)for(o=o||Se(e),a=a||Se(c),r=0,i=o.length;r<i;r++)ke(o[r],a[r]);else ke(e,c);return 0<(a=Se(c,"script")).length&&be(a,!d&&Se(e,"script")),c},cleanData:function(e){for(var t,n,r,i=G.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[$.expando]){if(t.events)for(r in t.events)i[r]?G.event.remove(n,r):G.removeEvent(n,r,t.handle);n[$.expando]=void 0}n[Y.expando]&&(n[Y.expando]=void 0)}}}),G.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return j(this,function(e){return void 0===e?G.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(G.cleanData(Se(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return G.clone(this,e,t)})},html:function(e){return j(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Be.test(e)&&!he[(pe.exec(e)||["",""])[1].toLowerCase()]){e=G.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(G.cleanData(Se(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Re(this,arguments,function(e){var t=this.parentNode;G.inArray(this,n)<0&&(G.cleanData(Se(this)),t&&t.replaceChild(e,this))},n)}}),G.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){G.fn[e]=function(e){for(var t,n=[],r=G(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),G(r[o])[a](t),l.apply(n,t.get());return this.pushStack(n)}});var Fe,Xe,We,je,_e,qe,Ue,Ke=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=P),t.getComputedStyle(e)},ze=new RegExp(re.join("|"),"i");function $e(){if(Ue){qe.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ue.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(qe).appendChild(Ue);var e=P.getComputedStyle(Ue);Fe="1%"!==e.top,_e=12===Ye(e.marginLeft),Ue.style.right="60%",je=36===Ye(e.right),Xe=36===Ye(e.width),Ue.style.position="absolute",We=12===Ye(Ue.offsetWidth/3),ie.removeChild(qe),Ue=null}}function Ye(e){return Math.round(parseFloat(e))}function Ze(e,t,n){var r,i,o,a,s=e.style;return(n=n||Qe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=G.style(e,t)),!g.pixelBoxStyles()&&Ke.test(a)&&ze.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}qe=M.createElement("div"),(Ue=M.createElement("div")).style&&(Ue.style.backgroundClip="content-box",Ue.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===Ue.style.backgroundClip,G.extend(g,{boxSizingReliable:function(){return $e(),Xe},pixelBoxStyles:function(){return $e(),je},pixelPosition:function(){return $e(),Fe},reliableMarginLeft:function(){return $e(),_e},scrollboxSize:function(){return $e(),We}}));var et=["Webkit","Moz","ms"],tt=M.createElement("div").style,nt={};function rt(e){var t=G.cssProps[e]||nt[e];return t||(e in tt?e:nt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=et.length;n--;)if((e=et[n]+t)in tt)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,ot=/^--/,at={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function ut(e,t,n,r,i,o){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=G.css(e,n+re[a],!0,i)),r?("content"===n&&(l-=G.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(l-=G.css(e,"border"+re[a]+"Width",!0,i))):(l+=G.css(e,"padding"+re[a],!0,i),"padding"!==n?l+=G.css(e,"border"+re[a]+"Width",!0,i):s+=G.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function ct(e,t,n){var r=Qe(e),i=(!g.boxSizingReliable()||n)&&"border-box"===G.css(e,"boxSizing",!1,r),o=i,a=Ze(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ke.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===G.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===G.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+ut(e,t,n||(i?"border":"content"),o,r,a)+"px"}function dt(e,t,n,r,i){return new dt.prototype.init(e,t,n,r,i)}G.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=K(t),l=ot.test(t),u=e.style;if(l||(t=rt(s)),a=G.cssHooks[t]||G.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=_typeof(n))&&(i=ne.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(G.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=K(t);return ot.test(t)||(t=rt(s)),(a=G.cssHooks[t]||G.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ze(e,t,r)),"normal"===i&&t in st&&(i=st[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),G.each(["height","width"],function(e,l){G.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(G.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):se(e,at,function(){return ct(e,l,n)})},set:function(e,t,n){var r,i=Qe(e),o=!g.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===G.css(e,"boxSizing",!1,i),s=n?ut(e,l,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(i[l])-ut(e,l,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[l]=t,t=G.css(e,l)),lt(0,t,s)}}}),G.cssHooks.marginLeft=Je(g.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),G.each({margin:"",padding:"",border:"Width"},function(i,o){G.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(G.cssHooks[i+o].set=lt)}),G.fn.extend({css:function(e,t){return j(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Qe(e),i=t.length;a<i;a++)o[t[a]]=G.css(e,t[a],!1,r);return o}return void 0!==n?G.style(e,t,n):G.css(e,t)},e,t,1<arguments.length)}}),((G.Tween=dt).prototype={constructor:dt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||G.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(G.cssNumber[n]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,n=dt.propHooks[this.prop];return this.options.duration?this.pos=t=G.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):dt.propHooks._default.set(this),this}}).init.prototype=dt.prototype,(dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=G.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){G.fx.step[e.prop]?G.fx.step[e.prop](e):1!==e.elem.nodeType||!G.cssHooks[e.prop]&&null==e.elem.style[rt(e.prop)]?e.elem[e.prop]=e.now:G.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},G.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},G.fx=dt.prototype.init,G.fx.step={};var ft,pt,Tt,ht,St=/^(?:toggle|show|hide)$/,bt=/queueHooks$/;function gt(){pt&&(!1===M.hidden&&P.requestAnimationFrame?P.requestAnimationFrame(gt):P.setTimeout(gt,G.fx.interval),G.fx.tick())}function mt(){return P.setTimeout(function(){ft=void 0}),ft=Date.now()}function vt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function At(e,t,n){for(var r,i=(yt.tweeners[t]||[]).concat(yt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function yt(o,e,t){var n,a,r=0,i=yt.prefilters.length,s=G.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=ft||mt(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),r=0,i=u.tweens.length;r<i;r++)u.tweens[r].run(n);return s.notifyWith(o,[u,n,t]),n<1&&i?t:(i||s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u]),!1)},u=s.promise({elem:o,props:G.extend({},e),opts:G.extend(!0,{specialEasing:{},easing:G.easing._default},t),originalProperties:e,originalOptions:t,startTime:ft||mt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=G.Tween(o,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u,e])):s.rejectWith(o,[u,e]),this}}),c=u.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=K(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=G.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);r<i;r++)if(n=yt.prefilters[r].call(u,o,c,u.opts))return m(n.stop)&&(G._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return G.map(c,At,u),m(u.opts.start)&&u.opts.start.call(o,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),G.fx.timer(G.extend(l,{elem:o,anim:u,queue:u.opts.queue})),u}G.Animation=G.extend(yt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,i=(e=m(e)?(t=e,["*"]):e.match(O)).length;r<i;r++)n=e[r],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,l,u,c,d="width"in t||"height"in t,f=this,p={},T=e.style,h=e.nodeType&&le(e),S=$.get(e,"fxshow");for(r in n.queue||(null==(a=G._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,G.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],St.test(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!S||void 0===S[r])continue;h=!0}p[r]=S&&S[r]||G.style(e,r)}if((l=!G.isEmptyObject(t))||!G.isEmptyObject(p))for(r in d&&1===e.nodeType&&(n.overflow=[T.overflow,T.overflowX,T.overflowY],null==(u=S&&S.display)&&(u=$.get(e,"display")),"none"===(c=G.css(e,"display"))&&(u?c=u:(de([e],!0),u=e.style.display||u,c=G.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===G.css(e,"float")&&(l||(f.done(function(){T.display=u}),null==u&&(c=T.display,u="none"===c?"":c)),T.display="inline-block")),n.overflow&&(T.overflow="hidden",f.always(function(){T.overflow=n.overflow[0],T.overflowX=n.overflow[1],T.overflowY=n.overflow[2]})),l=!1,p)l||(S?"hidden"in S&&(h=S.hidden):S=$.access(e,"fxshow",{display:u}),o&&(S.hidden=!h),h&&de([e],!0),f.done(function(){for(r in h||de([e]),$.remove(e,"fxshow"),p)G.style(e,r,p[r])})),l=At(h?S[r]:0,r,f),r in S||(S[r]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),G.speed=function(e,t,n){var r=e&&"object"===_typeof(e)?G.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return G.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in G.fx.speeds?r.duration=G.fx.speeds[r.duration]:r.duration=G.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&G.dequeue(this,r.queue)},r},G.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function i(){var e=yt(this,G.extend({},t),a);(o||$.get(this,"finish"))&&e.stop(!0)}var o=G.isEmptyObject(t),a=G.speed(e,n,r);return i.finish=i,o||!1===a.queue?this.each(i):this.queue(a.queue,i)},stop:function(i,e,o){function a(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=G.timers,r=$.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&bt.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||G.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=$.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=G.timers,o=n?n.length:0;for(t.finish=!0,G.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),G.each(["toggle","show","hide"],function(e,r){var i=G.fn[r];G.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(vt(r,!0),e,t,n)}}),G.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){G.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),G.timers=[],G.fx.tick=function(){var e,t=0,n=G.timers;for(ft=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||G.fx.stop(),ft=void 0},G.fx.timer=function(e){G.timers.push(e),G.fx.start()},G.fx.interval=13,G.fx.start=function(){pt||(pt=!0,gt())},G.fx.stop=function(){pt=null},G.fx.speeds={slow:600,fast:200,_default:400},G.fn.delay=function(r,e){return r=G.fx&&G.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=P.setTimeout(e,r);t.stop=function(){P.clearTimeout(n)}})},Tt=M.createElement("input"),ht=M.createElement("select").appendChild(M.createElement("option")),Tt.type="checkbox",g.checkOn=""!==Tt.value,g.optSelected=ht.selected,(Tt=M.createElement("input")).value="t",Tt.type="radio",g.radioValue="t"===Tt.value;var Pt,Mt=G.expr.attrHandle;G.fn.extend({attr:function(e,t){return j(this,G.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){G.removeAttr(this,e)})}}),G.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?G.prop(e,t,n):(1===o&&G.isXMLDoc(e)||(i=G.attrHooks[t.toLowerCase()]||(G.expr.match.bool.test(t)?Pt:void 0)),void 0!==n?null===n?void G.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=G.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&E(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(O);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),Pt={set:function(e,t,n){return!1===t?G.removeAttr(e,n):e.setAttribute(n,n),n}},G.each(G.expr.match.bool.source.match(/\w+/g),function(e,t){var a=Mt[t]||G.find.attr;Mt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=Mt[o],Mt[o]=r,r=null!=a(e,t,n)?o:null,Mt[o]=i),r}});var Gt=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;function Ht(e){return(e.match(O)||[]).join(" ")}function Et(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(O)||[]}G.fn.extend({prop:function(e,t){return j(this,G.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[G.propFix[e]||e]})}}),G.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&G.isXMLDoc(e)||(t=G.propFix[t]||t,i=G.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=G.find.attr(e,"tabindex");return t?parseInt(t,10):Gt.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(G.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),G.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){G.propFix[this.toLowerCase()]=this}),G.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,l=0;if(m(t))return this.each(function(e){G(this).addClass(t.call(this,e,Et(this)))});if((e=xt(t)).length)for(;n=this[l++];)if(i=Et(n),r=1===n.nodeType&&" "+Ht(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=Ht(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,l=0;if(m(t))return this.each(function(e){G(this).removeClass(t.call(this,e,Et(this)))});if(!arguments.length)return this.attr("class","");if((e=xt(t)).length)for(;n=this[l++];)if(i=Et(n),r=1===n.nodeType&&" "+Ht(i)+" "){for(a=0;o=e[a++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(s=Ht(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=_typeof(i),a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){G(this).toggleClass(i.call(this,e,Et(this),t),t)}):this.each(function(){var e,t,n,r;if(a)for(t=0,n=G(this),r=xt(i);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!==o||((e=Et(this))&&$.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":$.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+Ht(Et(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;G.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,G(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=G.map(t,function(e){return null==e?"":e+""})),(r=G.valHooks[this.type]||G.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=G.valHooks[t.type]||G.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),G.extend({valHooks:{option:{get:function(e){var t=G.find.attr(e,"value");return null!=t?t:Ht(G.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(t=G(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=G.makeArray(t),a=i.length;a--;)((r=i[a]).selected=-1<G.inArray(G.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),G.each(["radio","checkbox"],function(){G.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<G.inArray(G(e).val(),t)}},g.checkOn||(G.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),g.focusin="onfocusin"in P;function Bt(e){e.stopPropagation()}var Dt=/^(?:focusinfocus|focusoutblur)$/;G.extend(G.event,{trigger:function(e,t,n,r){var i,o,a,s,l,u,c,d,f=[n||M],p=b.call(e,"type")?e.type:e,T=b.call(e,"namespace")?e.namespace.split("."):[];if(o=d=a=n=n||M,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(p+G.event.triggered)&&(-1<p.indexOf(".")&&(p=(T=p.split(".")).shift(),T.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[G.expando]?e:new G.Event(p,"object"===_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=T.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+T.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:G.makeArray(t,[e]),c=G.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!h(n)){for(s=c.delegateType||p,Dt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(n.ownerDocument||M)&&f.push(a.defaultView||a.parentWindow||P)}for(i=0;(o=f[i++])&&!e.isPropagationStopped();)d=o,e.type=1<i?s:c.bindType||p,(u=($.get(o,"events")||{})[e.type]&&$.get(o,"handle"))&&u.apply(o,t),(u=l&&o[l])&&u.apply&&Q(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),t)||!Q(n)||l&&m(n[p])&&!h(n)&&((a=n[l])&&(n[l]=null),G.event.triggered=p,e.isPropagationStopped()&&d.addEventListener(p,Bt),n[p](),e.isPropagationStopped()&&d.removeEventListener(p,Bt),G.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var r=G.extend(new G.Event,n,{type:e,isSimulated:!0});G.event.trigger(r,null,t)}}),G.fn.extend({trigger:function(e,t){return this.each(function(){G.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return G.event.trigger(e,t,n,!0)}}),g.focusin||G.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){G.event.simulate(r,e.target,G.event.fix(e))}G.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=$.access(e,r);t||e.addEventListener(n,i,!0),$.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=$.access(e,r)-1;t?$.access(e,r,t):(e.removeEventListener(n,i,!0),$.remove(e,r))}}});var It=P.location,Nt=Date.now(),Lt=/\?/;G.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new P.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||G.error("Invalid XML: "+e),t};var Ot=/\[\]$/,kt=/\r?\n/g,Rt=/^(?:submit|button|image|reset|file)$/i,Vt=/^(?:input|select|textarea|keygen)/i;function Ft(n,e,r,i){var t;if(Array.isArray(e))G.each(e,function(e,t){r||Ot.test(n)?i(n,t):Ft(n+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==A(e))i(n,e);else for(t in e)Ft(n+"["+t+"]",e[t],r,i)}G.param=function(e,t){function n(e,t){var n=m(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var r,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!G.isPlainObject(e))G.each(e,function(){n(this.name,this.value)});else for(r in e)Ft(r,e[r],t,n);return i.join("&")},G.fn.extend({serialize:function(){return G.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=G.prop(this,"elements");return e?G.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!G(this).is(":disabled")&&Vt.test(this.nodeName)&&!Rt.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=G(this).val();return null==n?null:Array.isArray(n)?G.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Xt=/%20/g,Wt=/#.*$/,jt=/([?&])_=[^&]*/,_t=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:GET|HEAD)$/,Ut=/^\/\//,Kt={},Qt={},zt="*/".concat("*"),$t=M.createElement("a");function Yt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(O)||[];if(m(t))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Zt(t,i,o,a){var s={},l=t===Qt;function u(e){var r;return s[e]=!0,G.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||l||s[n]?l?!(r=n):void 0:(i.dataTypes.unshift(n),u(n),!1)}),r}return u(i.dataTypes[0])||!s["*"]&&u("*")}function Jt(e,t){var n,r,i=G.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r=r||{})[n]=t[n]);return r&&G.extend(!0,e,r),e}$t.href=It.href,G.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:It.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(It.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":G.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,G.ajaxSettings),t):Jt(G.ajaxSettings,e)},ajaxPrefilter:Yt(Kt),ajaxTransport:Yt(Qt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var c,d,f,n,p,r,T,h,i,o,S=G.ajaxSetup({},t),b=S.context||S,g=S.context&&(b.nodeType||b.jquery)?G(b):G.event,m=G.Deferred(),v=G.Callbacks("once memory"),A=S.statusCode||{},a={},s={},l="canceled",y={readyState:0,getResponseHeader:function(e){var t;if(T){if(!n)for(n={};t=_t.exec(f);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return T?f:null},setRequestHeader:function(e,t){return null==T&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==T&&(S.mimeType=e),this},statusCode:function(e){var t;if(e)if(T)y.always(e[y.status]);else for(t in e)A[t]=[A[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(m.promise(y),S.url=((e||S.url||It.href)+"").replace(Ut,It.protocol+"//"),S.type=t.method||t.type||S.method||S.type,S.dataTypes=(S.dataType||"*").toLowerCase().match(O)||[""],null==S.crossDomain){r=M.createElement("a");try{r.href=S.url,r.href=r.href,S.crossDomain=$t.protocol+"//"+$t.host!=r.protocol+"//"+r.host}catch(e){S.crossDomain=!0}}if(S.data&&S.processData&&"string"!=typeof S.data&&(S.data=G.param(S.data,S.traditional)),Zt(Kt,S,t,y),T)return y;for(i in(h=G.event&&S.global)&&0==G.active++&&G.event.trigger("ajaxStart"),S.type=S.type.toUpperCase(),S.hasContent=!qt.test(S.type),d=S.url.replace(Wt,""),S.hasContent?S.data&&S.processData&&0===(S.contentType||"").indexOf("application/x-www-form-urlencoded")&&(S.data=S.data.replace(Xt,"+")):(o=S.url.slice(d.length),S.data&&(S.processData||"string"==typeof S.data)&&(d+=(Lt.test(d)?"&":"?")+S.data,delete S.data),!1===S.cache&&(d=d.replace(jt,"$1"),o=(Lt.test(d)?"&":"?")+"_="+Nt+++o),S.url=d+o),S.ifModified&&(G.lastModified[d]&&y.setRequestHeader("If-Modified-Since",G.lastModified[d]),G.etag[d]&&y.setRequestHeader("If-None-Match",G.etag[d])),(S.data&&S.hasContent&&!1!==S.contentType||t.contentType)&&y.setRequestHeader("Content-Type",S.contentType),y.setRequestHeader("Accept",S.dataTypes[0]&&S.accepts[S.dataTypes[0]]?S.accepts[S.dataTypes[0]]+("*"!==S.dataTypes[0]?", "+zt+"; q=0.01":""):S.accepts["*"]),S.headers)y.setRequestHeader(i,S.headers[i]);if(S.beforeSend&&(!1===S.beforeSend.call(b,y,S)||T))return y.abort();if(l="abort",v.add(S.complete),y.done(S.success),y.fail(S.error),c=Zt(Qt,S,t,y)){if(y.readyState=1,h&&g.trigger("ajaxSend",[y,S]),T)return y;S.async&&0<S.timeout&&(p=P.setTimeout(function(){y.abort("timeout")},S.timeout));try{T=!1,c.send(a,u)}catch(e){if(T)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,n,r){var i,o,a,s,l,u=t;T||(T=!0,p&&P.clearTimeout(p),c=void 0,f=r||"",y.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a=a||i}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(S,y,n)),s=function(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(S,s,y,i),i?(S.ifModified&&((l=y.getResponseHeader("Last-Modified"))&&(G.lastModified[d]=l),(l=y.getResponseHeader("etag"))&&(G.etag[d]=l)),204===e||"HEAD"===S.type?u="nocontent":304===e?u="notmodified":(u=s.state,o=s.data,i=!(a=s.error))):(a=u,!e&&u||(u="error",e<0&&(e=0))),y.status=e,y.statusText=(t||u)+"",i?m.resolveWith(b,[o,u,y]):m.rejectWith(b,[y,u,a]),y.statusCode(A),A=void 0,h&&g.trigger(i?"ajaxSuccess":"ajaxError",[y,S,i?o:a]),v.fireWith(b,[y,u]),h&&(g.trigger("ajaxComplete",[y,S]),--G.active||G.event.trigger("ajaxStop")))}return y},getJSON:function(e,t,n){return G.get(e,t,n,"json")},getScript:function(e,t){return G.get(e,void 0,t,"script")}}),G.each(["get","post"],function(e,i){G[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),G.ajax(G.extend({url:e,type:i,dataType:r,data:t,success:n},G.isPlainObject(e)&&e))}}),G._evalUrl=function(e,t){return G.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){G.globalEval(e,t)}})},G.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=G(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){G(this).wrapInner(n.call(this,e))}):this.each(function(){var e=G(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){G(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){G(this).replaceWith(this.childNodes)}),this}}),G.expr.pseudos.hidden=function(e){return!G.expr.pseudos.visible(e)},G.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},G.ajaxSettings.xhr=function(){try{return new P.XMLHttpRequest}catch(e){}};var en={0:200,1223:204},tn=G.ajaxSettings.xhr();g.cors=!!tn&&"withCredentials"in tn,g.ajax=tn=!!tn,G.ajaxTransport(function(i){var o,a;if(g.cors||tn&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(en[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&P.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),G.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),G.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return G.globalEval(e),e}}}),G.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),G.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=G("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),M.head.appendChild(r[0])},abort:function(){i&&i()}}});var nn,rn=[],on=/(=)\?(?=&|$)|\?\?/;G.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=rn.pop()||G.expando+"_"+Nt++;return this[e]=!0,e}}),G.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(on.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&on.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(on,"$1"+r):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||G.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=P[r],P[r]=function(){o=arguments},n.always(function(){void 0===i?G(P).removeProp(r):P[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,rn.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),g.createHTMLDocument=((nn=M.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===nn.childNodes.length),G.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=M.implementation.createHTMLDocument("")).createElement("base")).href=M.location.href,t.head.appendChild(r)):t=M),o=!n&&[],(i=x.exec(e))?[t.createElement(i[1])]:(i=Ae([e],t,o),o&&o.length&&G(o).remove(),G.merge([],i.childNodes)));var r,i,o},G.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=Ht(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(i="POST"),0<a.length&&G.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?G("<div>").append(G.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},G.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){G.fn[t]=function(e){return this.on(t,e)}}),G.expr.pseudos.animated=function(t){return G.grep(G.timers,function(e){return t===e.elem}).length},G.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u=G.css(e,"position"),c=G(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=G.css(e,"top"),l=G.css(e,"left"),i=("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(a=(r=c.position()).top,r.left):(a=parseFloat(o)||0,parseFloat(l)||0),m(t)&&(t=t.call(e,n,G.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):c.css(d)}},G.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){G.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===G.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===G.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=G(e).offset()).top+=G.css(e,"borderTopWidth",!0),i.left+=G.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-G.css(r,"marginTop",!0),left:t.left-i.left-G.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===G.css(e,"position");)e=e.offsetParent;return e||ie})}}),G.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;G.fn[t]=function(e){return j(this,function(e,t,n){var r;if(h(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),G.each(["top","left"],function(e,n){G.cssHooks[n]=Je(g.pixelPosition,function(e,t){if(t)return t=Ze(e,n),Ke.test(t)?G(e).position()[n]+"px":t})}),G.each({Height:"height",Width:"width"},function(a,s){G.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){G.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return j(this,function(e,t,n){var r;return h(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?G.css(e,t,i):G.style(e,t,n,i)},s,n?e:void 0,n)}})}),G.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){G.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),G.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),G.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),G.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||G.guid++,i},G.holdReady=function(e){e?G.readyWait++:G.ready(!0)},G.isArray=Array.isArray,G.parseJSON=JSON.parse,G.nodeName=E,G.isFunction=m,G.isWindow=h,G.camelCase=K,G.type=A,G.now=Date.now,G.isNumeric=function(e){var t=G.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return G});var an=P.jQuery,sn=P.$;return G.noConflict=function(e){return P.$===G&&(P.$=sn),e&&P.jQuery===G&&(P.jQuery=an),G},e||(P.jQuery=P.$=G),G}),function(e,d){(function(){if(typeof module!=="undefined"&&module.exports){return function(e){module.exports=e()}}else if(typeof define==="function"&&define.amd){return define}else if(typeof window!=="undefined"){return function(e){window.MobileDetect=e()}}else{throw new Error("unknown environment")}})()(function(){var s,l={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",Asus:"Asus.*Galaxy|PadFone.*Mobile",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android.*\\bG1\\b(?!\\))",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},u=Object.prototype.hasOwnProperty;function t(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function n(e,t){var n,r,i=e.length;if(!i||!t)return!1;for(n=t.toLowerCase(),r=0;r<i;++r)if(n===e[r].toLowerCase())return!0;return!1}function c(e){for(var t in e)u.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function a(e,t){this.ua=function(e){return(e||"").substr(0,500)}(e),this._cache={},this.maxPhoneWidth=t||600}return l.FALLBACK_PHONE="UnknownPhone",l.FALLBACK_TABLET="UnknownTablet",l.FALLBACK_MOBILE="UnknownMobile",s="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var e,t,n,r,i,o,a=l.mobileDetectRules;for(e in a.props)if(u.call(a.props,e)){for(t=a.props[e],s(t)||(t=[t]),i=t.length,r=0;r<i;++r)0<=(o=(n=t[r]).indexOf("[VER]"))&&(n=n.substring(0,o)+"([\\w._\\+]+)"+n.substring(o+5)),t[r]=new RegExp(n,"i");a.props[e]=t}c(a.oss),c(a.phones),c(a.tablets),c(a.uas),c(a.utils),a.oss0={WindowsPhoneOS:a.oss.WindowsPhoneOS,WindowsMobileOS:a.oss.WindowsMobileOS}}(),l.findMatch=function(e,t){for(var n in e)if(u.call(e,n)&&e[n].test(t))return n;return null},l.findMatches=function(e,t){var n=[];for(var r in e)u.call(e,r)&&e[r].test(t)&&n.push(r);return n},l.getVersionStr=function(e,t){var n,r,i,o,a=l.mobileDetectRules.props;if(u.call(a,e))for(i=(n=a[e]).length,r=0;r<i;++r)if(null!==(o=n[r].exec(t)))return o[1];return null},l.getVersion=function(e,t){var n=l.getVersionStr(e,t);return n?l.prepareVersionNo(n):NaN},l.prepareVersionNo=function(e){var t;return 1===(t=e.split(/[a-z._ \/\-]/i)).length&&(e=t[0]),1<t.length&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},l.isMobileFallback=function(e){return l.detectMobileBrowsers.fullPattern.test(e)||l.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},l.isTabletFallback=function(e){return l.detectMobileBrowsers.tabletPattern.test(e)},l.prepareDetectionCache=function(e,t,n){if(e.mobile===d){var r,i,o;if(i=l.findMatch(l.mobileDetectRules.tablets,t))return e.mobile=e.tablet=i,void(e.phone=null);if(r=l.findMatch(l.mobileDetectRules.phones,t))return e.mobile=e.phone=r,void(e.tablet=null);l.isMobileFallback(t)?(o=a.isPhoneSized(n))===d?(e.mobile=l.FALLBACK_MOBILE,e.tablet=e.phone=null):o?(e.mobile=e.phone=l.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):l.isTabletFallback(t)?(e.mobile=e.tablet=l.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null}},l.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&4.3<=e.version("iPad")||e.os("iOS")&&3.1<=e.version("iPhone")||e.os("iOS")&&3.1<=e.version("iPod")||2.1<e.version("Android")&&e.is("Webkit")||7<=e.version("Windows Phone OS")||e.is("BlackBerry")&&6<=e.version("BlackBerry")||e.match("Playbook.*Tablet")||1.4<=e.version("webOS")&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&12<=e.version("Firefox")||e.is("Chrome")&&e.is("AndroidOS")&&4<=e.version("Android")||e.is("Skyfire")&&4.1<=e.version("Skyfire")&&e.is("AndroidOS")&&2.3<=e.version("Android")||e.is("Opera")&&11<e.version("Opera Mobi")&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&2<=e.version("Bada")||(e.is("UC Browser")||e.is("Dolfin"))&&2.3<=e.version("Android")||e.match("Kindle Fire")||e.is("Kindle")&&3<=e.version("Kindle")||e.is("AndroidOS")&&e.is("NookTablet")||11<=e.version("Chrome")&&!t||5<=e.version("Safari")&&!t||4<=e.version("Firefox")&&!t||7<=e.version("MSIE")&&!t||10<=e.version("Opera")&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&5<=e.version("BlackBerry")&&e.version("BlackBerry")<6||5<=e.version("Opera Mini")&&e.version("Opera Mini")<=6.5&&(2.3<=e.version("Android")||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||11<=e.version("Opera Mobi")&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},l.detectOS=function(e){return l.findMatch(l.mobileDetectRules.oss0,e)||l.findMatch(l.mobileDetectRules.oss,e)},l.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},a.prototype={constructor:a,mobile:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return l.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===d&&(this._cache.userAgent=l.findMatch(l.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===d&&(this._cache.userAgents=l.findMatches(l.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===d&&(this._cache.os=l.detectOS(this.ua)),this._cache.os},version:function(e){return l.getVersion(e,this.ua)},versionStr:function(e){return l.getVersionStr(e,this.ua)},is:function(e){return n(this.userAgents(),e)||t(e,this.os())||t(e,this.phone())||t(e,this.tablet())||n(l.findMatches(l.mobileDetectRules.utils,this.ua),e)},match:function(e){return e instanceof RegExp||(e=new RegExp(e,"i")),e.test(this.ua)},isPhoneSized:function(e){return a.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===d&&(this._cache.grade=l.mobileGrade(this)),this._cache.grade}},a.isPhoneSized="undefined"!=typeof window&&window.screen?function(e){return e<0?d:l.getDeviceSmallerSide()<=e}:function(){},a._impl=l,a.version="1.4.4 2019-09-21",a})}(),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):"undefined"!=typeof module&&module.exports?e(require("jquery")):e(jQuery)}(function(se){var le="left",ue="right",ce="up",de="down",fe="in",pe="out",Te="none",he="auto",Se="swipe",be="pinch",ge="tap",me="doubletap",ve="longtap",Ae="horizontal",ye="vertical",Pe="all",Me=10,Ge="start",Ce="move",He="end",Ee="cancel",xe="ontouchstart"in window,we=window.navigator.msPointerEnabled&&!window.PointerEvent&&!xe,Be=(window.PointerEvent||window.navigator.msPointerEnabled)&&!xe,De="TouchSwipe";function r(e,s){s=se.extend({},s);var t=xe||Be||!s.fallbackToMouseEvents,n=t?Be?we?"MSPointerDown":"pointerdown":"touchstart":"mousedown",r=t?Be?we?"MSPointerMove":"pointermove":"touchmove":"mousemove",i=t?Be?we?"MSPointerUp":"pointerup":"touchend":"mouseup",o=t?Be?"mouseleave":null:"mouseleave",a=Be?we?"MSPointerCancel":"pointercancel":"touchcancel",l=0,u=null,c=null,d=0,f=0,p=0,T=1,h=0,S=0,b=null,g=se(e),m="start",v=0,A={},y=0,P=0,M=0,G=0,C=0,H=null,E=null;try{g.on(n,x),g.on(a,D)}catch(e){se.error("events not supported "+n+","+a+" on jQuery.swipe")}function x(e){if(!0!==g.data(De+"_intouch")&&!(0<se(e.target).closest(s.excludedElements,g).length)){var t=e.originalEvent?e.originalEvent:e;if(!t.pointerType||"mouse"!=t.pointerType||0!=s.fallbackToMouseEvents){var n,r=t.touches,i=r?r[0]:t;return m=Ge,r?v=r.length:!1!==s.preventDefaultEvents&&e.preventDefault(),S=c=u=null,T=1,h=p=f=d=l=0,b=function(){var e={};return e[le]=ne(le),e[ue]=ne(ue),e[ce]=ne(ce),e[de]=ne(de),e}(),$(),J(0,i),!r||v===s.fingers||s.fingers===Pe||W()?(y=ae(),2==v&&(J(1,r[1]),f=p=ie(A[0].start,A[1].start)),(s.swipeStatus||s.pinchStatus)&&(n=O(t,m))):n=!1,!1===n?(O(t,m=Ee),n):(s.hold&&(E=setTimeout(se.proxy(function(){g.trigger("hold",[t.target]),s.hold&&(n=s.hold.call(g,t,t.target))},this),s.longTapThreshold)),Z(!0),null)}}}function w(e){var t=e.originalEvent?e.originalEvent:e;if(m!==He&&m!==Ee&&!Y()){var n,r=t.touches,i=ee(r?r[0]:t);if(P=ae(),r&&(v=r.length),s.hold&&clearTimeout(E),m=Ce,2==v&&(0==f?(J(1,r[1]),f=p=ie(A[0].start,A[1].start)):(ee(r[1]),p=ie(A[0].end,A[1].end),A[0].end,A[1].end,S=T<1?pe:fe),T=function(e,t){return(t/e*1).toFixed(2)}(f,p),h=Math.abs(f-p)),v===s.fingers||s.fingers===Pe||!r||W()){if(u=oe(i.start,i.end),function(e,t){if(!1===s.preventDefaultEvents)return;if(s.allowPageScroll===Te)e.preventDefault();else{var n=s.allowPageScroll===he;switch(t){case le:(s.swipeLeft&&n||!n&&s.allowPageScroll!=Ae)&&e.preventDefault();break;case ue:(s.swipeRight&&n||!n&&s.allowPageScroll!=Ae)&&e.preventDefault();break;case ce:(s.swipeUp&&n||!n&&s.allowPageScroll!=ye)&&e.preventDefault();break;case de:(s.swipeDown&&n||!n&&s.allowPageScroll!=ye)&&e.preventDefault()}}}(e,c=oe(i.last,i.end)),l=function(e,t){return Math.round(Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)))}(i.start,i.end),d=re(),function(e,t){if(e==Te)return;t=Math.max(t,te(e)),b[e].distance=t}(u,l),n=O(t,m),!s.triggerOnTouchEnd||s.triggerOnTouchLeave){var o=!0;if(s.triggerOnTouchLeave){var a=function(e){var t=(e=se(e)).offset();return{left:t.left,right:t.left+e.outerWidth(),top:t.top,bottom:t.top+e.outerHeight()}}(this);o=function(e,t){return e.x>t.left&&e.x<t.right&&e.y>t.top&&e.y<t.bottom}(i.end,a)}!s.triggerOnTouchEnd&&o?m=L(Ce):s.triggerOnTouchLeave&&!o&&(m=L(He)),m!=Ee&&m!=He||O(t,m)}}else O(t,m=Ee);!1===n&&O(t,m=Ee)}}function B(e){var t=e.originalEvent?e.originalEvent:e,n=t.touches;if(n){if(n.length&&!Y())return function(e){M=ae(),G=e.touches.length+1}(t),!0;if(n.length&&Y())return!0}return Y()&&(v=G),P=ae(),d=re(),V()||!R()?O(t,m=Ee):s.triggerOnTouchEnd||!1===s.triggerOnTouchEnd&&m===Ce?(!1!==s.preventDefaultEvents&&!1!==e.cancelable&&e.preventDefault(),O(t,m=He)):!s.triggerOnTouchEnd&&K()?k(t,m=He,ge):m===Ce&&O(t,m=Ee),Z(!1),null}function D(){p=f=y=P=v=0,T=1,$(),Z(!1)}function I(e){var t=e.originalEvent?e.originalEvent:e;s.triggerOnTouchLeave&&O(t,m=L(He))}function N(){g.off(n,x),g.off(a,D),g.off(r,w),g.off(i,B),o&&g.off(o,I),Z(!1)}function L(e){var t=e,n=F(),r=R(),i=V();return!n||i?t=Ee:!r||e!=Ce||s.triggerOnTouchEnd&&!s.triggerOnTouchLeave?!r&&e==He&&s.triggerOnTouchLeave&&(t=Ee):t=He,t}function O(e,t){var n,r=e.touches;return(j()&&_()||_())&&(n=k(e,t,Se)),(X()&&W()||W())&&!1!==n&&(n=k(e,t,be)),z()&&Q()&&!1!==n?n=k(e,t,me):d>s.longTapThreshold&&l<Me&&s.longTap&&!1!==n?n=k(e,t,ve):1!==v&&xe||!(isNaN(l)||l<s.threshold)||!K()||!1===n||(n=k(e,t,ge)),t===Ee&&D(),t===He&&(r&&r.length||D()),n}function k(e,t,n){var r;if(n==Se){if(g.trigger("swipeStatus",[t,u||null,l||0,d||0,v,A,c]),s.swipeStatus&&!1===(r=s.swipeStatus.call(g,e,t,u||null,l||0,d||0,v,A,c)))return!1;if(t==He&&j()){if(clearTimeout(H),clearTimeout(E),g.trigger("swipe",[u,l,d,v,A,c]),s.swipe&&!1===(r=s.swipe.call(g,e,u,l,d,v,A,c)))return!1;switch(u){case le:g.trigger("swipeLeft",[u,l,d,v,A,c]),s.swipeLeft&&(r=s.swipeLeft.call(g,e,u,l,d,v,A,c));break;case ue:g.trigger("swipeRight",[u,l,d,v,A,c]),s.swipeRight&&(r=s.swipeRight.call(g,e,u,l,d,v,A,c));break;case ce:g.trigger("swipeUp",[u,l,d,v,A,c]),s.swipeUp&&(r=s.swipeUp.call(g,e,u,l,d,v,A,c));break;case de:g.trigger("swipeDown",[u,l,d,v,A,c]),s.swipeDown&&(r=s.swipeDown.call(g,e,u,l,d,v,A,c))}}}if(n==be){if(g.trigger("pinchStatus",[t,S||null,h||0,d||0,v,T,A]),s.pinchStatus&&!1===(r=s.pinchStatus.call(g,e,t,S||null,h||0,d||0,v,T,A)))return!1;if(t==He&&X())switch(S){case fe:g.trigger("pinchIn",[S||null,h||0,d||0,v,T,A]),s.pinchIn&&(r=s.pinchIn.call(g,e,S||null,h||0,d||0,v,T,A));break;case pe:g.trigger("pinchOut",[S||null,h||0,d||0,v,T,A]),s.pinchOut&&(r=s.pinchOut.call(g,e,S||null,h||0,d||0,v,T,A))}}return n==ge?t!==Ee&&t!==He||(clearTimeout(H),clearTimeout(E),Q()&&!z()?(C=ae(),H=setTimeout(se.proxy(function(){C=null,g.trigger("tap",[e.target]),s.tap&&(r=s.tap.call(g,e,e.target))},this),s.doubleTapThreshold)):(C=null,g.trigger("tap",[e.target]),s.tap&&(r=s.tap.call(g,e,e.target)))):n==me?t!==Ee&&t!==He||(clearTimeout(H),clearTimeout(E),C=null,g.trigger("doubletap",[e.target]),s.doubleTap&&(r=s.doubleTap.call(g,e,e.target))):n==ve&&(t!==Ee&&t!==He||(clearTimeout(H),C=null,g.trigger("longtap",[e.target]),s.longTap&&(r=s.longTap.call(g,e,e.target)))),r}function R(){var e=!0;return null!==s.threshold&&(e=l>=s.threshold),e}function V(){var e=!1;return null!==s.cancelThreshold&&null!==u&&(e=te(u)-l>=s.cancelThreshold),e}function F(){return!s.maxTimeThreshold||!(d>=s.maxTimeThreshold)}function X(){var e=q(),t=U(),n=null===s.pinchThreshold||h>=s.pinchThreshold;return e&&t&&n}function W(){return!!(s.pinchStatus||s.pinchIn||s.pinchOut)}function j(){var e=F(),t=R(),n=q(),r=U();return!V()&&r&&n&&t&&e}function _(){return!!(s.swipe||s.swipeStatus||s.swipeLeft||s.swipeRight||s.swipeUp||s.swipeDown)}function q(){return v===s.fingers||s.fingers===Pe||!xe}function U(){return 0!==A[0].end.x}function K(){return!!s.tap}function Q(){return!!s.doubleTap}function z(){if(null==C)return!1;var e=ae();return Q()&&e-C<=s.doubleTapThreshold}function $(){G=M=0}function Y(){var e=!1;M&&ae()-M<=s.fingerReleaseThreshold&&(e=!0);return e}function Z(e){g&&(!0===e?(g.on(r,w),g.on(i,B),o&&g.on(o,I)):(g.off(r,w,!1),g.off(i,B,!1),o&&g.off(o,I,!1)),g.data(De+"_intouch",!0===e))}function J(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,A[e]=n}function ee(e){var t=void 0!==e.identifier?e.identifier:0,n=function(e){return A[e]||null}(t);return null===n&&(n=J(t,e)),n.last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function te(e){if(b[e])return b[e].distance}function ne(e){return{direction:e,distance:0}}function re(){return P-y}function ie(e,t){var n=Math.abs(e.x-t.x),r=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+r*r))}function oe(e,t){if(function(e,t){return e.x==t.x&&e.y==t.y}(e,t))return Te;var n=function(e,t){var n=e.x-t.x,r=t.y-e.y,i=Math.atan2(r,n),o=Math.round(180*i/Math.PI);return o<0&&(o=360-Math.abs(o)),o}(e,t);return n<=45&&0<=n?le:n<=360&&315<=n?le:135<=n&&n<=225?ue:45<n&&n<135?de:ce}function ae(){return(new Date).getTime()}this.enable=function(){return this.disable(),g.on(n,x),g.on(a,D),g},this.disable=function(){return N(),g},this.destroy=function(){N(),g.data(De,null),g=null},this.option=function(e,t){if("object"===_typeof(e))s=se.extend(s,e);else if(void 0!==s[e]){if(void 0===t)return s[e];s[e]=t}else{if(!e)return s;se.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}se.fn.swipe=function(e){var t=se(this),n=t.data(De);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));se.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"===_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!==_typeof(e)&&e))return function(n){!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=Te);void 0!==n.click&&void 0===n.tap&&(n.tap=n.click);n=n||{};return n=se.extend({},se.fn.swipe.defaults,n),this.each(function(){var e=se(this),t=e.data(De);t||(t=new r(this,n),e.data(De,t))})}.apply(this,arguments);return t},se.fn.swipe.version="1.6.18",se.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},se.fn.swipe.phases={PHASE_START:Ge,PHASE_MOVE:Ce,PHASE_END:He,PHASE_CANCEL:Ee},se.fn.swipe.directions={LEFT:le,RIGHT:ue,UP:ce,DOWN:de,IN:fe,OUT:pe},se.fn.swipe.pageScroll={NONE:Te,HORIZONTAL:Ae,VERTICAL:ye,AUTO:he},se.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:Pe}}),document.querySelector(".menu-acco").addEventListener("click",function(e){e.preventDefault();var t=document.querySelectorAll(".menu-acco__item"),n=e.target.closest("li");if(n)if(n.classList.contains("menu-acco__item--active"))n.classList.remove("menu-acco__item--active");else{var r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0)a.value.classList.remove("menu-acco__item--active")}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}n.classList.add("menu-acco__item--active")}}),document.querySelector(".team-acco").addEventListener("click",function(e){e.preventDefault();var t=document.querySelectorAll(".team-acco__item"),n=e.target.closest("li");if(n)if(n.classList.contains("team-acco__item--active"))n.classList.remove("team-acco__item--active");else{var r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0)a.value.classList.remove("team-acco__item--active")}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}n.classList.add("team-acco__item--active")}}),function(){var r=document.querySelector(".form__elem"),e=document.querySelector(".btn-order");document.querySelector(".btn-reset");e.addEventListener("click",function(e){e.preventDefault();var t=new FormData;t.append("name",r.elements.name.value),t.append("phone",r.elements.phone.value),t.append("comment",r.elements.comment.value),t.append("to","yereskod@gmail.com");var n=new XMLHttpRequest;n.responseType="json",n.open("POST","https://webdev-api.loftschool.com/sendmail"),n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.send(t),n.addEventListener("load",function(){modalRev.style.display="flex",document.body.style.overflow="hidden",modalText.innerText=n.response.message,modalTitle.style.display="none"})})}(),function(){var t=document.querySelector("#hamburgerMenu"),n=document.querySelector("#hamburgerButton");document.querySelectorAll(".nav__link");function r(){t.classList.remove("active"),n.classList.remove("is-active")}n.addEventListener("click",function(e){e.preventDefault(),n.classList.contains("is-active")?r():(t.classList.add("active"),n.classList.add("is-active"))}),t.addEventListener("click",function(e){e.preventDefault(),console.log(e.target),e.target.classList.contains("nav__link")&&r()})}(),function(e,t){"object"==("undefined"==typeof module?"undefined":_typeof(module))&&"object"==_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(P,e){function h(e){return null!=e&&e===e.window}var t=[],M=P.document,r=Object.getPrototypeOf,s=t.slice,S=t.concat,l=t.push,i=t.indexOf,n={},o=n.toString,b=n.hasOwnProperty,a=b.toString,u=a.call(Object),g={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},c={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var r,i,o=(n=n||M).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function A(e){return null==e?e+"":"object"==_typeof(e)||"function"==typeof e?n[o.call(e)]||"object":_typeof(e)}var G=function e(t,n){return new e.fn.init(t,n)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(e){var t=!!e&&"length"in e&&e.length,n=A(e);return!m(e)&&!h(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}G.fn=G.prototype={jquery:"3.4.1",constructor:G,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=G.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return G.each(this,e)},map:function(n){return this.pushStack(G.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},G.extend=G.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==_typeof(a)||m(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(u&&r&&(G.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||G.isPlainObject(n)?n:{},i=!1,a[t]=G.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},G.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e)||(t=r(e))&&("function"!=typeof(n=b.call(t,"constructor")&&t.constructor)||a.call(n)!==u))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){v(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(f(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(d,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(f(Object(e))?G.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!=a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(f(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return S.apply([],a)},guid:1,support:g}),"function"==typeof Symbol&&(G.fn[Symbol.iterator]=t[Symbol.iterator]),G.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var p=function(n){function d(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function i(){y()}var e,p,v,o,a,T,f,h,A,l,u,y,P,s,M,S,c,b,g,G="sizzle"+1*new Date,m=n.document,C=0,r=0,H=le(),E=le(),x=le(),w=le(),B=function(e,t){return e===t&&(u=!0),0},D={}.hasOwnProperty,t=[],I=t.pop,N=t.push,L=t.push,O=t.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",V="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",X="\\["+V+"*("+F+")(?:"+V+"*([*^$|!~]?=)"+V+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+V+"*\\]",W=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+X+")*)|.*)\\)|)",j=new RegExp(V+"+","g"),_=new RegExp("^"+V+"+|((?:^|[^\\\\])(?:\\\\.)*)"+V+"+$","g"),q=new RegExp("^"+V+"*,"+V+"*"),U=new RegExp("^"+V+"*([>+~]|"+V+")"+V+"*"),K=new RegExp(V+"|>"),Q=new RegExp(W),z=new RegExp("^"+F+"$"),$={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+X),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+V+"*(even|odd|(([+-]|)(\\d*)n|)"+V+"*(?:([+-]|)"+V+"*(\\d+)|))"+V+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+V+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+V+"*((?:-\\d)?\\d*)"+V+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,re=new RegExp("\\\\([\\da-f]{1,6}"+V+"?|("+V+")|.)","ig"),ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=ve(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{L.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){L={apply:t.length?function(e,t){N.apply(e,O.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,n,r){var i,o,a,s,l,u,c,d=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!r&&((t?t.ownerDocument||t:m)!==P&&y(t),t=t||P,M)){if(11!==f&&(l=te.exec(e)))if(i=l[1]){if(9===f){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&g(t,a)&&a.id===i)return n.push(a),n}else{if(l[2])return L.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&p.getElementsByClassName&&t.getElementsByClassName)return L.apply(n,t.getElementsByClassName(i)),n}if(p.qsa&&!w[e+" "]&&(!S||!S.test(e))&&(1!==f||"object"!==t.nodeName.toLowerCase())){if(c=e,d=t,1===f&&K.test(e)){for((s=t.getAttribute("id"))?s=s.replace(ie,oe):t.setAttribute("id",s=G),o=(u=T(e)).length;o--;)u[o]="#"+s+" "+me(u[o]);c=u.join(","),d=ne.test(e)&&be(t.parentNode)||t}try{return L.apply(n,d.querySelectorAll(c)),n}catch(t){w(e,!0)}finally{s===G&&t.removeAttribute("id")}}}return h(e.replace(_,"$1"),t,n,r)}function le(){var r=[];return function e(t,n){return r.push(t+" ")>v.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function ue(e){return e[G]=!0,e}function ce(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)v.attrHandle[n[r]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function Te(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function he(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function Se(a){return ue(function(o){return o=+o,ue(function(e,t){for(var n,r=a([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function be(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},y=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==P&&9===r.nodeType&&r.documentElement&&(s=(P=r).documentElement,M=!a(P),m!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),p.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ce(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(P.getElementsByClassName),p.getById=ce(function(e){return s.appendChild(e).id=G,!P.getElementsByName||!P.getElementsByName(G).length}),p.getById?(v.filter.ID=function(e){var t=e.replace(re,d);return function(e){return e.getAttribute("id")===t}},v.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}}):(v.filter.ID=function(e){var n=e.replace(re,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},v.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),v.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},v.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&M)return t.getElementsByClassName(e)},c=[],S=[],(p.qsa=ee.test(P.querySelectorAll))&&(ce(function(e){s.appendChild(e).innerHTML="<a id='"+G+"'></a><select id='"+G+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&S.push("[*^$]="+V+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||S.push("\\["+V+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+G+"-]").length||S.push("~="),e.querySelectorAll(":checked").length||S.push(":checked"),e.querySelectorAll("a#"+G+"+*").length||S.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&S.push("name"+V+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&S.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&S.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),S.push(",.*:")})),(p.matchesSelector=ee.test(b=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),c.push("!=",W)}),S=S.length&&new RegExp(S.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(s.compareDocumentPosition),g=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===m&&g(m,e)?-1:t===P||t.ownerDocument===m&&g(m,t)?1:l?k(l,e)-k(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===P?-1:t===P?1:i?-1:o?1:l?k(l,e)-k(l,t):0;if(i===o)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?fe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),P},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==P&&y(e),p.matchesSelector&&M&&!w[t+" "]&&(!c||!c.test(t))&&(!S||!S.test(t)))try{var n=b.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){w(t,!0)}return 0<se(t,P,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==P&&y(e),g(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==P&&y(e);var n=v.attrHandle[t.toLowerCase()],r=n&&D.call(v.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:p.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(ie,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(u=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(B),u){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return l=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(v=se.selectors={cacheLength:50,createPseudo:ue,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(re,d),e[3]=(e[3]||e[4]||e[5]||"").replace(re,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Q.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(re,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+V+")"+e+"("+V+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(j," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(T,e,t,h,S){var b="nth"!==T.slice(0,3),g="last"!==T.slice(-4),m="of-type"===e;return 1===h&&0===S?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,l,u=b!=g?"nextSibling":"previousSibling",c=e.parentNode,d=m&&e.nodeName.toLowerCase(),f=!n&&!m,p=!1;if(c){if(b){for(;u;){for(a=e;a=a[u];)if(m?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=u="only"===T&&!l&&"nextSibling"}return!0}if(l=[g?c.firstChild:c.lastChild],g&&f){for(p=(s=(r=(i=(o=(a=c)[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]||[])[0]===C&&r[1])&&r[2],a=s&&c.childNodes[s];a=++s&&a&&a[u]||(p=s=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){i[T]=[C,s,p];break}}else if(f&&(p=s=(r=(i=(o=(a=e)[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]||[])[0]===C&&r[1]),!1===p)for(;(a=++s&&a&&a[u]||(p=s=0)||l.pop())&&((m?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++p||(f&&((i=(o=a[G]||(a[G]={}))[a.uniqueID]||(o[a.uniqueID]={}))[T]=[C,p]),a!==e)););return(p-=S)===h||p%h==0&&0<=p/h}}},PSEUDO:function(e,o){var t,a=v.pseudos[e]||v.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[G]?a(o):1<a.length?(t=[e,e,"",o],v.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var n,r=a(e,o),i=r.length;i--;)e[n=k(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ue(function(e){var r=[],i=[],s=f(e.replace(_,"$1"));return s[G]?ue(function(e,t,n,r){for(var i,o=s(e,null,r,[]),a=e.length;a--;)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:ue(function(t){return function(e){return 0<se(t,e).length}}),contains:ue(function(t){return t=t.replace(re,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:ue(function(n){return z.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(re,d).toLowerCase(),function(e){var t;do{if(t=M?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!v.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:Se(function(){return[0]}),last:Se(function(e,t){return[t-1]}),eq:Se(function(e,t,n){return[n<0?n+t:n]}),even:Se(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:Se(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:Se(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:Se(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=v.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})v.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})v.pseudos[e]=Te(e);function ge(){}function me(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(s,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,f=r++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[C,f];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(i=(o=e[G]||(e[G]={}))[e.uniqueID]||(o[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((r=i[c])&&r[0]===C&&r[1]===f)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function Ae(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function ye(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function Pe(p,T,h,S,b,e){return S&&!S[G]&&(S=Pe(S)),b&&!b[G]&&(b=Pe(b,e)),ue(function(e,t,n,r){var i,o,a,s=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(T||"*",n.nodeType?[n]:n,[]),d=!p||!e&&T?c:ye(c,s,p,n,r),f=h?b||(e?p:u||S)?[]:t:d;if(h&&h(d,f,n,r),S)for(i=ye(f,l),S(i,[],n,r),o=i.length;o--;)(a=i[o])&&(f[l[o]]=!(d[l[o]]=a));if(e){if(b||p){if(b){for(i=[],o=f.length;o--;)(a=f[o])&&i.push(d[o]=a);b(null,f=[],i,r)}for(o=f.length;o--;)(a=f[o])&&-1<(i=b?k(e,a):s[o])&&(e[i]=!(t[i]=a))}}else f=ye(f===t?f.splice(u,f.length):f),b?b(null,t,f,r):L.apply(t,f)})}function Me(e){for(var i,t,n,r=e.length,o=v.relative[e[0].type],a=o||v.relative[" "],s=o?1:0,l=ve(function(e){return e===i},a,!0),u=ve(function(e){return-1<k(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==A)||((i=t).nodeType?l(e,t,n):u(e,t,n));return i=null,r}];s<r;s++)if(t=v.relative[e[s].type])c=[ve(Ae(c),t)];else{if((t=v.filter[e[s].type].apply(null,e[s].matches))[G]){for(n=++s;n<r&&!v.relative[e[n].type];n++);return Pe(1<s&&Ae(c),1<s&&me(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(_,"$1"),t,s<n&&Me(e.slice(s,n)),n<r&&Me(e=e.slice(n)),n<r&&me(e))}c.push(t)}return Ae(c)}return ge.prototype=v.filters=v.pseudos,v.setFilters=new ge,T=se.tokenize=function(e,t){var n,r,i,o,a,s,l,u=E[e+" "];if(u)return t?0:u.slice(0);for(a=e,s=[],l=v.preFilter;a;){for(o in n&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=U.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(_," ")}),a=a.slice(n.length)),v.filter)!(r=$[o].exec(a))||l[o]&&!(r=l[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):E(e,s).slice(0)},f=se.compile=function(e,t){var n,S,b,g,m,r,i=[],o=[],a=x[e+" "];if(!a){for(n=(t=t||T(e)).length;n--;)(a=Me(t[n]))[G]?i.push(a):o.push(a);(a=x(e,(S=o,g=0<(b=i).length,m=0<S.length,r=function(e,t,n,r,i){var o,a,s,l=0,u="0",c=e&&[],d=[],f=A,p=e||m&&v.find.TAG("*",i),T=C+=null==f?1:Math.random()||.1,h=p.length;for(i&&(A=t===P||t||i);u!==h&&null!=(o=p[u]);u++){if(m&&o){for(a=0,t||o.ownerDocument===P||(y(o),n=!M);s=S[a++];)if(s(o,t||P,n)){r.push(o);break}i&&(C=T)}g&&((o=!s&&o)&&l--,e&&c.push(o))}if(l+=u,g&&u!==l){for(a=0;s=b[a++];)s(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=I.call(r));d=ye(d)}L.apply(r,d),i&&!e&&0<d.length&&1<l+b.length&&se.uniqueSort(r)}return i&&(C=T,A=f),c},g?ue(r):r))).selector=e}return a},h=se.select=function(e,t,n,r){var i,o,a,s,l,u="function"==typeof e&&e,c=!r&&T(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&M&&v.relative[o[1].type]){if(!(t=(v.find.ID(a.matches[0].replace(re,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=$.needsContext.test(e)?0:o.length;i--&&(a=o[i],!v.relative[s=a.type]);)if((l=v.find[s])&&(r=l(a.matches[0].replace(re,d),ne.test(o[0].type)&&be(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&me(o)))return L.apply(n,r),n;break}}return(u||f(e,c))(r,t,!M,n,!t||ne.test(e)&&be(t.parentNode)||t),n},p.sortStable=G.split("").sort(B).join("")===G,p.detectDuplicates=!!u,y(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(P);G.find=p,G.expr=p.selectors,G.expr[":"]=G.expr.pseudos,G.uniqueSort=G.unique=p.uniqueSort,G.text=p.getText,G.isXMLDoc=p.isXML,G.contains=p.contains,G.escapeSelector=p.escape;function T(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&G(e).is(n))break;r.push(e)}return r}function y(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var C=G.expr.match.needsContext;function H(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function x(e,n,r){return m(n)?G.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?G.grep(e,function(e){return e===n!==r}):"string"!=typeof n?G.grep(e,function(e){return-1<i.call(n,e)!==r}):G.filter(n,e,r)}G.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?G.find.matchesSelector(r,e)?[r]:[]:G.find.matches(e,G.grep(t,function(e){return 1===e.nodeType}))},G.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(G(e).filter(function(){for(t=0;t<r;t++)if(G.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)G.find(e,i[t],n);return 1<r?G.uniqueSort(n):n},filter:function(e){return this.pushStack(x(this,e||[],!1))},not:function(e){return this.pushStack(x(this,e||[],!0))},is:function(e){return!!x(this,"string"==typeof e&&C.test(e)?G(e):e||[],!1).length}});var w,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(G.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||w,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(G):G.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:B.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof G?t[0]:t,G.merge(this,G.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:M,!0)),E.test(r[1])&&G.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=M.getElementById(r[2]))&&(this[0]=i,this.length=1),this}).prototype=G.fn,w=G(M);var D=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}G.fn.extend({has:function(e){var t=G(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(G.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&G(e);if(!C.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&G.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?G.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(G(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(G.uniqueSort(G.merge(this.get(),G(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),G.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return y((e.parentNode||{}).firstChild,e)},children:function(e){return y(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(H(e,"template")&&(e=e.content||e),G.merge([],e.childNodes))}},function(r,i){G.fn[r]=function(e,t){var n=G.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=G.filter(t,n)),1<this.length&&(I[r]||G.uniqueSort(n),D.test(r)&&n.reverse()),this.pushStack(n)}});var L=/[^\x20\t\r\n\f]+/g;function O(e){return e}function k(e){throw e}function R(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}G.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},G.each(e.match(L)||[],function(e,t){n[t]=!0}),n):G.extend({},r);function i(){for(s=s||r.once,a=o=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&r.stopOnFalse&&(c=l.length,t=!1);r.memory||(t=!1),o=!1,s&&(l=t?[]:"")}var o,t,a,s,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!o&&(c=l.length-1,u.push(t)),function n(e){G.each(e,function(e,t){m(t)?r.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==A(t)&&n(t)})}(arguments),t&&!o&&i()),this},remove:function(){return G.each(arguments,function(e,t){for(var n;-1<(n=G.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<G.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=u=[],t||o||(l=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),o||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},G.extend({Deferred:function(e){var o=[["notify","progress",G.Callbacks("memory"),G.Callbacks("memory"),2],["resolve","done",G.Callbacks("once memory"),G.Callbacks("once memory"),0,"resolved"],["reject","fail",G.Callbacks("once memory"),G.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var i=arguments;return G.Deferred(function(r){G.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var l=0;function u(i,o,a,s){return function(){function e(){var e,t;if(!(i<l)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==_typeof(e)||"function"==typeof e)&&e.then,m(t)?s?t.call(e,u(l,o,O,s),u(l,o,k,s)):(l++,t.call(e,u(l,o,O,s),u(l,o,k,s),u(l,o,O,o.notifyWith))):(a!==O&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}}var n=this,r=arguments,t=s?e:function(){try{e()}catch(e){G.Deferred.exceptionHook&&G.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(a!==k&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(G.Deferred.getStackHook&&(t.stackTrace=G.Deferred.getStackHook()),P.setTimeout(t))}}return G.Deferred(function(e){o[0][3].add(u(0,e,m(r)?r:O,e.notifyWith)),o[1][3].add(u(0,e,m(t)?t:O)),o[2][3].add(u(0,e,m(n)?n:k))}).promise()},promise:function(e){return null!=e?G.extend(e,a):a}},s={};return G.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=s.call(arguments),a=G.Deferred();if(n<=1&&(R(e,a.done(t(r)).resolve,a.reject,!n),"pending"===a.state()||m(o[r]&&o[r].then)))return a.then();for(;r--;)R(o[r],t(r),a.reject);return a.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;G.Deferred.exceptionHook=function(e,t){P.console&&P.console.warn&&e&&V.test(e.name)&&P.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},G.readyException=function(e){P.setTimeout(function(){throw e})};var F=G.Deferred();function X(){M.removeEventListener("DOMContentLoaded",X),P.removeEventListener("load",X),G.ready()}G.fn.ready=function(e){return F.then(e).catch(function(e){G.readyException(e)}),this},G.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--G.readyWait:G.isReady)||(G.isReady=!0)!==e&&0<--G.readyWait||F.resolveWith(M,[G])}}),G.ready.then=F.then,"complete"===M.readyState||"loading"!==M.readyState&&!M.documentElement.doScroll?P.setTimeout(G.ready):(M.addEventListener("DOMContentLoaded",X),P.addEventListener("load",X));function W(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===A(n))for(s in i=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),u&&(t=a?(t.call(e,r),null):(u=t,function(e,t,n){return u.call(G(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o}var j=/^-ms-/,_=/-([a-z])/g;function q(e,t){return t.toUpperCase()}function U(e){return e.replace(j,"ms-").replace(_,q)}function K(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function Q(){this.expando=G.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[U(t)]=n;else for(r in t)i[U(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in r?[t]:t.match(L)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!G.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!G.isEmptyObject(t)}};var z=new Q,$=new Q,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:Y.test(i)?JSON.parse(i):i)}catch(e){}$.set(e,t,n)}else n=void 0;return n}G.extend({hasData:function(e){return $.hasData(e)||z.hasData(e)},data:function(e,t,n){return $.access(e,t,n)},removeData:function(e,t){$.remove(e,t)},_data:function(e,t,n){return z.access(e,t,n)},_removeData:function(e,t){z.remove(e,t)}}),G.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0!==n)return"object"==_typeof(n)?this.each(function(){$.set(this,n)}):W(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=$.get(o,n))?t:void 0!==(t=J(o,n))?t:void 0;this.each(function(){$.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=$.get(o),1===o.nodeType&&!z.get(o,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=U(r.slice(5)),J(o,r,i[r]));z.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){$.remove(this,e)})}}),G.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=z.get(e,t),n&&(!r||Array.isArray(n)?r=z.access(e,t,G.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=G.queue(e,t),r=n.length,i=n.shift(),o=G._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){G.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return z.get(e,n)||z.access(e,n,{empty:G.Callbacks("once memory").add(function(){z.remove(e,[t+"queue",n])})})}}),G.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?G.queue(this[0],t):void 0===n?this:this.each(function(){var e=G.queue(this,t,n);G._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&G.dequeue(this,t)})},dequeue:function(e){return this.each(function(){G.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(a,[a])}var r,i=1,o=G.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=z.get(a[s],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=M.documentElement,ie=function(e){return G.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return G.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});function ae(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===G.css(e,"display")}function se(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i}function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return G.css(e,t,"")},l=s(),u=n&&n[3]||(G.cssNumber[t]?"":"px"),c=e.nodeType&&(G.cssNumber[t]||"px"!==u&&+l)&&te.exec(G.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;a--;)G.style(e,t,c+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),c/=o;c*=2,G.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var ue={};function ce(e,t){for(var n,r,i,o,a,s,l,u=[],c=0,d=e.length;c<d;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(u[c]=z.get(r,"display")||null,u[c]||(r.style.display="")),""===r.style.display&&ae(r)&&(u[c]=(l=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(l=ue[s])||(o=a.body.appendChild(a.createElement(s)),l=G.css(o,"display"),o.parentNode.removeChild(o),"none"===l&&(l="block"),ue[s]=l)))):"none"!==n&&(u[c]="none",z.set(r,"display",n)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}G.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?G(this).show():G(this).hide()})}});var de=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,Te={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function he(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&H(e,t)?G.merge([e],n):n}function Se(e,t){for(var n=0,r=e.length;n<r;n++)z.set(e[n],"globalEval",!t||z.get(t[n],"globalEval"))}Te.optgroup=Te.option,Te.tbody=Te.tfoot=Te.colgroup=Te.caption=Te.thead,Te.th=Te.td;var be,ge,me=/<|&#?\w+;/;function ve(e,t,n,r,i){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),f=[],p=0,T=e.length;p<T;p++)if((o=e[p])||0===o)if("object"===A(o))G.merge(f,o.nodeType?[o]:o);else if(me.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(fe.exec(o)||["",""])[1].toLowerCase(),l=Te[s]||Te._default,a.innerHTML=l[1]+G.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;G.merge(f,a.childNodes),(a=d.firstChild).textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(r&&-1<G.inArray(o,r))i&&i.push(o);else if(u=ie(o),a=he(d.appendChild(o),"script"),u&&Se(a),n)for(c=0;o=a[c++];)pe.test(o.type||"")&&n.push(o);return d}be=M.createDocumentFragment().appendChild(M.createElement("div")),(ge=M.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),be.appendChild(ge),g.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var Ae=/^key/,ye=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Pe=/^([^.]*)(?:\.(.+)|)/;function Me(){return!0}function Ge(){return!1}function Ce(e,t){return e===function(){try{return M.activeElement}catch(e){}}()==("focus"===t)}function He(e,t,n,r,i,o){var a,s;if("object"==_typeof(t)){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)He(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ge;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return G().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=G.guid++)),e.each(function(){G.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(z.set(e,i,!1),G.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=z.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(G.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),z.set(this,i,r),t=o(this,i),this[i](),r!==(n=z.get(this,i))||t?z.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(z.set(this,i,{value:G.event.trigger(G.extend(r[0],G.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===z.get(e,i)&&G.event.add(e,i,Me)}G.event={global:{},add:function(t,e,n,r,i){var o,a,s,l,u,c,d,f,p,T,h,S=z.get(t);if(S)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&G.find.matchesSelector(re,i),n.guid||(n.guid=G.guid++),(l=S.events)||(l=S.events={}),(a=S.handle)||(a=S.handle=function(e){return void 0!==G&&G.event.triggered!==e.type?G.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(L)||[""]).length;u--;)p=h=(s=Pe.exec(e[u])||[])[1],T=(s[2]||"").split(".").sort(),p&&(d=G.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=G.event.special[p]||{},c=G.extend({type:p,origType:h,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&G.expr.match.needsContext.test(i),namespace:T.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,r,T,a)||t.addEventListener&&t.addEventListener(p,a)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),G.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,f,p,T,h,S=z.hasData(e)&&z.get(e);if(S&&(l=S.events)){for(u=(t=(t||"").match(L)||[""]).length;u--;)if(p=h=(s=Pe.exec(t[u])||[])[1],T=(s[2]||"").split(".").sort(),p){for(d=G.event.special[p]||{},f=l[p=(r?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+T.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&h!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,T,S.handle)||G.removeEvent(e,p,S.handle),delete l[p])}else for(p in l)G.event.remove(e,p+t[u],n,r,!0);G.isEmptyObject(l)&&z.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=G.event.fix(e),l=new Array(arguments.length),u=(z.get(this,"events")||{})[s.type]||[],c=G.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=G.event.handlers.call(this,s,u),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((G.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<G(i,this).index(u):G.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(G.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[G.expando]?e:new G.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return de.test(t.type)&&t.click&&H(t,"input")&&Ee(t,"click",Me),!1},trigger:function(e){var t=this||e;return de.test(t.type)&&t.click&&H(t,"input")&&Ee(t,"click"),!0},_default:function(e){var t=e.target;return de.test(t.type)&&t.click&&H(t,"input")&&z.get(t,"click")||H(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},G.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},G.Event=function(e,t){if(!(this instanceof G.Event))return new G.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Me:Ge,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&G.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[G.expando]=!0},G.Event.prototype={constructor:G.Event,isDefaultPrevented:Ge,isPropagationStopped:Ge,isImmediatePropagationStopped:Ge,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Me,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Me,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Me,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},G.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ae.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ye.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},G.event.addProp),G.each({focus:"focusin",blur:"focusout"},function(e,t){G.event.special[e]={setup:function(){return Ee(this,e,Ce),!1},trigger:function(){return Ee(this,e),!0},delegateType:t}}),G.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){G.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||G.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),G.fn.extend({on:function(e,t,n,r){return He(this,e,t,n,r)},one:function(e,t,n,r){return He(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,G(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!=_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ge),this.each(function(){G.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i]);return this}});var xe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,we=/<script|<style|<link/i,Be=/checked\s*(?:[^=]|=\s*.checked.)/i,De=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ie(e,t){return H(e,"table")&&H(11!==t.nodeType?t:t.firstChild,"tr")&&G(e).children("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if(z.hasData(e)&&(o=z.access(e),a=z.set(t,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)G.event.add(t,i,u[i][n]);$.hasData(e)&&(s=$.access(e),l=G.extend({},s),$.set(t,l))}}function ke(n,r,i,o){r=S.apply([],r);var e,t,a,s,l,u,c=0,d=n.length,f=d-1,p=r[0],T=m(p);if(T||1<d&&"string"==typeof p&&!g.checkClone&&Be.test(p))return n.each(function(e){var t=n.eq(e);T&&(r[0]=p.call(this,e,t.html())),ke(t,r,i,o)});if(d&&(t=(e=ve(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=G.map(he(e,"script"),Ne)).length;c<d;c++)l=e,c!==f&&(l=G.clone(l,!0,!0),s&&G.merge(a,he(l,"script"))),i.call(n[c],l,c);if(s)for(u=a[a.length-1].ownerDocument,G.map(a,Le),c=0;c<s;c++)l=a[c],pe.test(l.type||"")&&!z.access(l,"globalEval")&&G.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?G._evalUrl&&!l.noModule&&G._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):v(l.textContent.replace(De,""),l,u))}return n}function Re(e,t,n){for(var r,i=t?G.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||G.cleanData(he(r)),r.parentNode&&(n&&ie(r)&&Se(he(r,"script")),r.parentNode.removeChild(r));return e}G.extend({htmlPrefilter:function(e){return e.replace(xe,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,l,u,c=e.cloneNode(!0),d=ie(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||G.isXMLDoc(e)))for(a=he(c),r=0,i=(o=he(e)).length;r<i;r++)s=o[r],"input"===(u=(l=a[r]).nodeName.toLowerCase())&&de.test(s.type)?l.checked=s.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=s.defaultValue);if(t)if(n)for(o=o||he(e),a=a||he(c),r=0,i=o.length;r<i;r++)Oe(o[r],a[r]);else Oe(e,c);return 0<(a=he(c,"script")).length&&Se(a,!d&&he(e,"script")),c},cleanData:function(e){for(var t,n,r,i=G.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[z.expando]){if(t.events)for(r in t.events)i[r]?G.event.remove(n,r):G.removeEvent(n,r,t.handle);n[z.expando]=void 0}n[$.expando]&&(n[$.expando]=void 0)}}}),G.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return W(this,function(e){return void 0===e?G.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return ke(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ie(this,e).appendChild(e)})},prepend:function(){return ke(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ie(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(G.cleanData(he(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return G.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!we.test(e)&&!Te[(fe.exec(e)||["",""])[1].toLowerCase()]){e=G.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(G.cleanData(he(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return ke(this,arguments,function(e){var t=this.parentNode;G.inArray(this,n)<0&&(G.cleanData(he(this)),t&&t.replaceChild(e,this))},n)}}),G.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){G.fn[e]=function(e){for(var t,n=[],r=G(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),G(r[o])[a](t),l.apply(n,t.get());return this.pushStack(n)}});var Ve,Fe,Xe,We,je,_e,qe,Ue=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ke=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=P),t.getComputedStyle(e)},Qe=new RegExp(ne.join("|"),"i");function ze(e,t,n){var r,i,o,a,s=e.style;return(n=n||Ke(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ie(e)||(a=G.style(e,t)),!g.pixelBoxStyles()&&Ue.test(a)&&Qe.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function Ye(){if(qe){_e.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",qe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(_e).appendChild(qe);var e=P.getComputedStyle(qe);Ve="1%"!==e.top,je=12===Ze(e.marginLeft),qe.style.right="60%",We=36===Ze(e.right),Fe=36===Ze(e.width),qe.style.position="absolute",Xe=12===Ze(qe.offsetWidth/3),re.removeChild(_e),qe=null}}function Ze(e){return Math.round(parseFloat(e))}_e=M.createElement("div"),(qe=M.createElement("div")).style&&(qe.style.backgroundClip="content-box",qe.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===qe.style.backgroundClip,G.extend(g,{boxSizingReliable:function(){return Ye(),Fe},pixelBoxStyles:function(){return Ye(),We},pixelPosition:function(){return Ye(),Ve},reliableMarginLeft:function(){return Ye(),je},scrollboxSize:function(){return Ye(),Xe}}));var Je=["Webkit","Moz","ms"],et=M.createElement("div").style,tt={};function nt(e){return G.cssProps[e]||tt[e]||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,it=/^--/,ot={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function st(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function lt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=G.css(e,n+ne[a],!0,i)),r?("content"===n&&(l-=G.css(e,"padding"+ne[a],!0,i)),"margin"!==n&&(l-=G.css(e,"border"+ne[a]+"Width",!0,i))):(l+=G.css(e,"padding"+ne[a],!0,i),"padding"!==n?l+=G.css(e,"border"+ne[a]+"Width",!0,i):s+=G.css(e,"border"+ne[a]+"Width",!0,i));return!r&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function ut(e,t,n){var r=Ke(e),i=(!g.boxSizingReliable()||n)&&"border-box"===G.css(e,"boxSizing",!1,r),o=i,a=ze(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===G.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===G.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+lt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function ct(e,t,n,r,i){return new ct.prototype.init(e,t,n,r,i)}G.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=U(t),l=it.test(t),u=e.style;if(l||(t=nt(s)),a=G.cssHooks[t]||G.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=_typeof(n))&&(i=te.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(G.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=U(t);return it.test(t)||(t=nt(s)),(a=G.cssHooks[t]||G.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=ze(e,t,r)),"normal"===i&&t in at&&(i=at[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),G.each(["height","width"],function(e,l){G.cssHooks[l]={get:function(e,t,n){if(t)return!rt.test(G.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ut(e,l,n):se(e,ot,function(){return ut(e,l,n)})},set:function(e,t,n){var r,i=Ke(e),o=!g.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===G.css(e,"boxSizing",!1,i),s=n?lt(e,l,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(i[l])-lt(e,l,"border",!1,i)-.5)),s&&(r=te.exec(t))&&"px"!==(r[3]||"px")&&(e.style[l]=t,t=G.css(e,l)),st(0,t,s)}}}),G.cssHooks.marginLeft=$e(g.reliableMarginLeft,function(e,t){if(t)return(parseFloat(ze(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),G.each({margin:"",padding:"",border:"Width"},function(i,o){G.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(G.cssHooks[i+o].set=st)}),G.fn.extend({css:function(e,t){return W(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ke(e),i=t.length;a<i;a++)o[t[a]]=G.css(e,t[a],!1,r);return o}return void 0!==n?G.style(e,t,n):G.css(e,t)},e,t,1<arguments.length)}}),((G.Tween=ct).prototype={constructor:ct,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||G.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(G.cssNumber[n]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=G.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}}).init.prototype=ct.prototype,(ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=G.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){G.fx.step[e.prop]?G.fx.step[e.prop](e):1!==e.elem.nodeType||!G.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:G.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},G.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},G.fx=ct.prototype.init,G.fx.step={};var dt,ft,pt,Tt,ht=/^(?:toggle|show|hide)$/,St=/queueHooks$/;function bt(){ft&&(!1===M.hidden&&P.requestAnimationFrame?P.requestAnimationFrame(bt):P.setTimeout(bt,G.fx.interval),G.fx.tick())}function gt(){return P.setTimeout(function(){dt=void 0}),dt=Date.now()}function mt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ne[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function vt(e,t,n){for(var r,i=(At.tweeners[t]||[]).concat(At.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function At(o,e,t){var n,a,r=0,i=At.prefilters.length,s=G.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=dt||gt(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),r=0,i=u.tweens.length;r<i;r++)u.tweens[r].run(n);return s.notifyWith(o,[u,n,t]),n<1&&i?t:(i||s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u]),!1)},u=s.promise({elem:o,props:G.extend({},e),opts:G.extend(!0,{specialEasing:{},easing:G.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||gt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=G.Tween(o,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(o,[u,1,0]),s.resolveWith(o,[u,e])):s.rejectWith(o,[u,e]),this}}),c=u.props;for(function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=U(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=G.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);r<i;r++)if(n=At.prefilters[r].call(u,o,c,u.opts))return m(n.stop)&&(G._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return G.map(c,vt,u),m(u.opts.start)&&u.opts.start.call(o,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),G.fx.timer(G.extend(l,{elem:o,anim:u,queue:u.opts.queue})),u}G.Animation=G.extend(At,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,i=(e=m(e)?(t=e,["*"]):e.match(L)).length;r<i;r++)n=e[r],At.tweeners[n]=At.tweeners[n]||[],At.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,l,u,c,d="width"in t||"height"in t,f=this,p={},T=e.style,h=e.nodeType&&ae(e),S=z.get(e,"fxshow");for(r in n.queue||(null==(a=G._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,G.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],ht.test(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!S||void 0===S[r])continue;h=!0}p[r]=S&&S[r]||G.style(e,r)}if((l=!G.isEmptyObject(t))||!G.isEmptyObject(p))for(r in d&&1===e.nodeType&&(n.overflow=[T.overflow,T.overflowX,T.overflowY],null==(u=S&&S.display)&&(u=z.get(e,"display")),"none"===(c=G.css(e,"display"))&&(u?c=u:(ce([e],!0),u=e.style.display||u,c=G.css(e,"display"),ce([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===G.css(e,"float")&&(l||(f.done(function(){T.display=u}),null==u&&(c=T.display,u="none"===c?"":c)),T.display="inline-block")),n.overflow&&(T.overflow="hidden",f.always(function(){T.overflow=n.overflow[0],T.overflowX=n.overflow[1],T.overflowY=n.overflow[2]})),l=!1,p)l||(S?"hidden"in S&&(h=S.hidden):S=z.access(e,"fxshow",{display:u}),o&&(S.hidden=!h),h&&ce([e],!0),f.done(function(){for(r in h||ce([e]),z.remove(e,"fxshow"),p)G.style(e,r,p[r])})),l=vt(h?S[r]:0,r,f),r in S||(S[r]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?At.prefilters.unshift(e):At.prefilters.push(e)}}),G.speed=function(e,t,n){var r=e&&"object"==_typeof(e)?G.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return G.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in G.fx.speeds?r.duration=G.fx.speeds[r.duration]:r.duration=G.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&G.dequeue(this,r.queue)},r},G.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function i(){var e=At(this,G.extend({},t),a);(o||z.get(this,"finish"))&&e.stop(!0)}var o=G.isEmptyObject(t),a=G.speed(e,n,r);return i.finish=i,o||!1===a.queue?this.each(i):this.queue(a.queue,i)},stop:function(i,e,o){function a(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=G.timers,r=z.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&St.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||G.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=z.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=G.timers,o=n?n.length:0;for(t.finish=!0,G.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),G.each(["toggle","show","hide"],function(e,r){var i=G.fn[r];G.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(mt(r,!0),e,t,n)}}),G.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){G.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),G.timers=[],G.fx.tick=function(){var e,t=0,n=G.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||G.fx.stop(),dt=void 0},G.fx.timer=function(e){G.timers.push(e),G.fx.start()},G.fx.interval=13,G.fx.start=function(){ft||(ft=!0,bt())},G.fx.stop=function(){ft=null},G.fx.speeds={slow:600,fast:200,_default:400},G.fn.delay=function(r,e){return r=G.fx&&G.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=P.setTimeout(e,r);t.stop=function(){P.clearTimeout(n)}})},pt=M.createElement("input"),Tt=M.createElement("select").appendChild(M.createElement("option")),pt.type="checkbox",g.checkOn=""!==pt.value,g.optSelected=Tt.selected,(pt=M.createElement("input")).value="t",pt.type="radio",g.radioValue="t"===pt.value;var yt,Pt=G.expr.attrHandle;G.fn.extend({attr:function(e,t){return W(this,G.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){G.removeAttr(this,e)})}}),G.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?G.prop(e,t,n):(1===o&&G.isXMLDoc(e)||(i=G.attrHooks[t.toLowerCase()]||(G.expr.match.bool.test(t)?yt:void 0)),void 0!==n?null===n?void G.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=G.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&H(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(L);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),yt={set:function(e,t,n){return!1===t?G.removeAttr(e,n):e.setAttribute(n,n),n}},G.each(G.expr.match.bool.source.match(/\w+/g),function(e,t){var a=Pt[t]||G.find.attr;Pt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=Pt[o],Pt[o]=r,r=null!=a(e,t,n)?o:null,Pt[o]=i),r}});var Mt=/^(?:input|select|textarea|button)$/i,Gt=/^(?:a|area)$/i;function Ct(e){return(e.match(L)||[]).join(" ")}function Ht(e){return e.getAttribute&&e.getAttribute("class")||""}function Et(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(L)||[]}G.fn.extend({prop:function(e,t){return W(this,G.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[G.propFix[e]||e]})}}),G.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&G.isXMLDoc(e)||(t=G.propFix[t]||t,i=G.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=G.find.attr(e,"tabindex");return t?parseInt(t,10):Mt.test(e.nodeName)||Gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(G.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),G.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){G.propFix[this.toLowerCase()]=this}),G.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,l=0;if(m(t))return this.each(function(e){G(this).addClass(t.call(this,e,Ht(this)))});if((e=Et(t)).length)for(;n=this[l++];)if(i=Ht(n),r=1===n.nodeType&&" "+Ct(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=Ct(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,l=0;if(m(t))return this.each(function(e){G(this).removeClass(t.call(this,e,Ht(this)))});if(!arguments.length)return this.attr("class","");if((e=Et(t)).length)for(;n=this[l++];)if(i=Ht(n),r=1===n.nodeType&&" "+Ct(i)+" "){for(a=0;o=e[a++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(s=Ct(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=_typeof(i),a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){G(this).toggleClass(i.call(this,e,Ht(this),t),t)}):this.each(function(){var e,t,n,r;if(a)for(t=0,n=G(this),r=Et(i);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!==o||((e=Ht(this))&&z.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":z.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+Ct(Ht(n))+" ").indexOf(t))return!0;return!1}});var xt=/\r/g;G.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,G(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=G.map(t,function(e){return null==e?"":e+""})),(r=G.valHooks[this.type]||G.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=G.valHooks[t.type]||G.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(xt,""):null==e?"":e:void 0}}),G.extend({valHooks:{option:{get:function(e){var t=G.find.attr(e,"value");return null!=t?t:Ct(G.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!H(n.parentNode,"optgroup"))){if(t=G(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=G.makeArray(t),a=i.length;a--;)((r=i[a]).selected=-1<G.inArray(G.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),G.each(["radio","checkbox"],function(){G.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<G.inArray(G(e).val(),t)}},g.checkOn||(G.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),g.focusin="onfocusin"in P;function wt(e){e.stopPropagation()}var Bt=/^(?:focusinfocus|focusoutblur)$/;G.extend(G.event,{trigger:function(e,t,n,r){var i,o,a,s,l,u,c,d,f=[n||M],p=b.call(e,"type")?e.type:e,T=b.call(e,"namespace")?e.namespace.split("."):[];if(o=d=a=n=n||M,3!==n.nodeType&&8!==n.nodeType&&!Bt.test(p+G.event.triggered)&&(-1<p.indexOf(".")&&(p=(T=p.split(".")).shift(),T.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[G.expando]?e:new G.Event(p,"object"==_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=T.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+T.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:G.makeArray(t,[e]),c=G.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!h(n)){for(s=c.delegateType||p,Bt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(n.ownerDocument||M)&&f.push(a.defaultView||a.parentWindow||P)}for(i=0;(o=f[i++])&&!e.isPropagationStopped();)d=o,e.type=1<i?s:c.bindType||p,(u=(z.get(o,"events")||{})[e.type]&&z.get(o,"handle"))&&u.apply(o,t),(u=l&&o[l])&&u.apply&&K(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),t)||!K(n)||l&&m(n[p])&&!h(n)&&((a=n[l])&&(n[l]=null),G.event.triggered=p,e.isPropagationStopped()&&d.addEventListener(p,wt),n[p](),e.isPropagationStopped()&&d.removeEventListener(p,wt),G.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var r=G.extend(new G.Event,n,{type:e,isSimulated:!0});G.event.trigger(r,null,t)}}),G.fn.extend({trigger:function(e,t){return this.each(function(){G.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return G.event.trigger(e,t,n,!0)}}),g.focusin||G.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){G.event.simulate(r,e.target,G.event.fix(e))}G.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=z.access(e,r);t||e.addEventListener(n,i,!0),z.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=z.access(e,r)-1;t?z.access(e,r,t):(e.removeEventListener(n,i,!0),z.remove(e,r))}}});var Dt=P.location,It=Date.now(),Nt=/\?/;G.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new P.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||G.error("Invalid XML: "+e),t};var Lt=/\[\]$/,Ot=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,Rt=/^(?:input|select|textarea|keygen)/i;function Vt(n,e,r,i){var t;if(Array.isArray(e))G.each(e,function(e,t){r||Lt.test(n)?i(n,t):Vt(n+"["+("object"==_typeof(t)&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==A(e))i(n,e);else for(t in e)Vt(n+"["+t+"]",e[t],r,i)}G.param=function(e,t){function n(e,t){var n=m(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var r,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!G.isPlainObject(e))G.each(e,function(){n(this.name,this.value)});else for(r in e)Vt(r,e[r],t,n);return i.join("&")},G.fn.extend({serialize:function(){return G.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=G.prop(this,"elements");return e?G.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!G(this).is(":disabled")&&Rt.test(this.nodeName)&&!kt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=G(this).val();return null==n?null:Array.isArray(n)?G.map(n,function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}}):{name:t.name,value:n.replace(Ot,"\r\n")}}).get()}});var Ft=/%20/g,Xt=/#.*$/,Wt=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,_t=/^(?:GET|HEAD)$/,qt=/^\/\//,Ut={},Kt={},Qt="*/".concat("*"),zt=M.createElement("a");function $t(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(L)||[];if(m(t))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Yt(t,i,o,a){var s={},l=t===Kt;function u(e){var r;return s[e]=!0,G.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||l||s[n]?l?!(r=n):void 0:(i.dataTypes.unshift(n),u(n),!1)}),r}return u(i.dataTypes[0])||!s["*"]&&u("*")}function Zt(e,t){var n,r,i=G.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r=r||{})[n]=t[n]);return r&&G.extend(!0,e,r),e}zt.href=Dt.href,G.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":G.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,G.ajaxSettings),t):Zt(G.ajaxSettings,e)},ajaxPrefilter:$t(Ut),ajaxTransport:$t(Kt),ajax:function(e,t){"object"==_typeof(e)&&(t=e,e=void 0),t=t||{};var c,d,f,n,p,r,T,h,i,o,S=G.ajaxSetup({},t),b=S.context||S,g=S.context&&(b.nodeType||b.jquery)?G(b):G.event,m=G.Deferred(),v=G.Callbacks("once memory"),A=S.statusCode||{},a={},s={},l="canceled",y={readyState:0,getResponseHeader:function(e){var t;if(T){if(!n)for(n={};t=jt.exec(f);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return T?f:null},setRequestHeader:function(e,t){return null==T&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==T&&(S.mimeType=e),this},statusCode:function(e){var t;if(e)if(T)y.always(e[y.status]);else for(t in e)A[t]=[A[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(m.promise(y),S.url=((e||S.url||Dt.href)+"").replace(qt,Dt.protocol+"//"),S.type=t.method||t.type||S.method||S.type,S.dataTypes=(S.dataType||"*").toLowerCase().match(L)||[""],null==S.crossDomain){r=M.createElement("a");try{r.href=S.url,r.href=r.href,S.crossDomain=zt.protocol+"//"+zt.host!=r.protocol+"//"+r.host}catch(e){S.crossDomain=!0}}if(S.data&&S.processData&&"string"!=typeof S.data&&(S.data=G.param(S.data,S.traditional)),Yt(Ut,S,t,y),T)return y;for(i in(h=G.event&&S.global)&&0==G.active++&&G.event.trigger("ajaxStart"),S.type=S.type.toUpperCase(),S.hasContent=!_t.test(S.type),d=S.url.replace(Xt,""),S.hasContent?S.data&&S.processData&&0===(S.contentType||"").indexOf("application/x-www-form-urlencoded")&&(S.data=S.data.replace(Ft,"+")):(o=S.url.slice(d.length),S.data&&(S.processData||"string"==typeof S.data)&&(d+=(Nt.test(d)?"&":"?")+S.data,delete S.data),!1===S.cache&&(d=d.replace(Wt,"$1"),o=(Nt.test(d)?"&":"?")+"_="+It+++o),S.url=d+o),S.ifModified&&(G.lastModified[d]&&y.setRequestHeader("If-Modified-Since",G.lastModified[d]),G.etag[d]&&y.setRequestHeader("If-None-Match",G.etag[d])),(S.data&&S.hasContent&&!1!==S.contentType||t.contentType)&&y.setRequestHeader("Content-Type",S.contentType),y.setRequestHeader("Accept",S.dataTypes[0]&&S.accepts[S.dataTypes[0]]?S.accepts[S.dataTypes[0]]+("*"!==S.dataTypes[0]?", "+Qt+"; q=0.01":""):S.accepts["*"]),S.headers)y.setRequestHeader(i,S.headers[i]);if(S.beforeSend&&(!1===S.beforeSend.call(b,y,S)||T))return y.abort();if(l="abort",v.add(S.complete),y.done(S.success),y.fail(S.error),c=Yt(Kt,S,t,y)){if(y.readyState=1,h&&g.trigger("ajaxSend",[y,S]),T)return y;S.async&&0<S.timeout&&(p=P.setTimeout(function(){y.abort("timeout")},S.timeout));try{T=!1,c.send(a,u)}catch(e){if(T)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,n,r){var i,o,a,s,l,u=t;T||(T=!0,p&&P.clearTimeout(p),c=void 0,f=r||"",y.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a=a||i}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(S,y,n)),s=function(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(S,s,y,i),i?(S.ifModified&&((l=y.getResponseHeader("Last-Modified"))&&(G.lastModified[d]=l),(l=y.getResponseHeader("etag"))&&(G.etag[d]=l)),204===e||"HEAD"===S.type?u="nocontent":304===e?u="notmodified":(u=s.state,o=s.data,i=!(a=s.error))):(a=u,!e&&u||(u="error",e<0&&(e=0))),y.status=e,y.statusText=(t||u)+"",i?m.resolveWith(b,[o,u,y]):m.rejectWith(b,[y,u,a]),y.statusCode(A),A=void 0,h&&g.trigger(i?"ajaxSuccess":"ajaxError",[y,S,i?o:a]),v.fireWith(b,[y,u]),h&&(g.trigger("ajaxComplete",[y,S]),--G.active||G.event.trigger("ajaxStop")))}return y},getJSON:function(e,t,n){return G.get(e,t,n,"json")},getScript:function(e,t){return G.get(e,void 0,t,"script")}}),G.each(["get","post"],function(e,i){G[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),G.ajax(G.extend({url:e,type:i,dataType:r,data:t,success:n},G.isPlainObject(e)&&e))}}),G._evalUrl=function(e,t){return G.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){G.globalEval(e,t)}})},G.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=G(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){G(this).wrapInner(n.call(this,e))}):this.each(function(){var e=G(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){G(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){G(this).replaceWith(this.childNodes)}),this}}),G.expr.pseudos.hidden=function(e){return!G.expr.pseudos.visible(e)},G.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},G.ajaxSettings.xhr=function(){try{return new P.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},en=G.ajaxSettings.xhr();g.cors=!!en&&"withCredentials"in en,g.ajax=en=!!en,G.ajaxTransport(function(i){var o,a;if(g.cors||en&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Jt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&P.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),G.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),G.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return G.globalEval(e),e}}}),G.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),G.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=G("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),M.head.appendChild(r[0])},abort:function(){i&&i()}}});var tn,nn=[],rn=/(=)\?(?=&|$)|\?\?/;G.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||G.expando+"_"+It++;return this[e]=!0,e}}),G.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(rn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&rn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(rn,"$1"+r):!1!==e.jsonp&&(e.url+=(Nt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||G.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=P[r],P[r]=function(){o=arguments},n.always(function(){void 0===i?G(P).removeProp(r):P[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,nn.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),g.createHTMLDocument=((tn=M.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),G.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=M.implementation.createHTMLDocument("")).createElement("base")).href=M.location.href,t.head.appendChild(r)):t=M),o=!n&&[],(i=E.exec(e))?[t.createElement(i[1])]:(i=ve([e],t,o),o&&o.length&&G(o).remove(),G.merge([],i.childNodes)));var r,i,o},G.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=Ct(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==_typeof(t)&&(i="POST"),0<a.length&&G.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?G("<div>").append(G.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},G.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){G.fn[t]=function(e){return this.on(t,e)}}),G.expr.pseudos.animated=function(t){return G.grep(G.timers,function(e){return t===e.elem}).length},G.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u=G.css(e,"position"),c=G(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=G.css(e,"top"),l=G.css(e,"left"),i=("absolute"===u||"fixed"===u)&&-1<(o+l).indexOf("auto")?(a=(r=c.position()).top,r.left):(a=parseFloat(o)||0,parseFloat(l)||0),m(t)&&(t=t.call(e,n,G.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):c.css(d)}},G.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){G.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===G.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===G.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=G(e).offset()).top+=G.css(e,"borderTopWidth",!0),i.left+=G.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-G.css(r,"marginTop",!0),left:t.left-i.left-G.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===G.css(e,"position");)e=e.offsetParent;return e||re})}}),G.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;G.fn[t]=function(e){return W(this,function(e,t,n){var r;if(h(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),G.each(["top","left"],function(e,n){G.cssHooks[n]=$e(g.pixelPosition,function(e,t){if(t)return t=ze(e,n),Ue.test(t)?G(e).position()[n]+"px":t})}),G.each({Height:"height",Width:"width"},function(a,s){G.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){G.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return W(this,function(e,t,n){var r;return h(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?G.css(e,t,i):G.style(e,t,n,i)},s,n?e:void 0,n)}})}),G.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){G.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),G.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),G.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),G.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||G.guid++,i},G.holdReady=function(e){e?G.readyWait++:G.ready(!0)},G.isArray=Array.isArray,G.parseJSON=JSON.parse,G.nodeName=H,G.isFunction=m,G.isWindow=h,G.camelCase=U,G.type=A,G.now=Date.now,G.isNumeric=function(e){var t=G.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return G});var on=P.jQuery,an=P.$;return G.noConflict=function(e){return P.$===G&&(P.$=an),e&&P.jQuery===G&&(P.jQuery=on),G},e||(P.jQuery=P.$=G),G}),function(e,d){(function(){if("undefined"!=typeof module&&module.exports)return function(e){module.exports=e()};if("function"==typeof define&&define.amd)return define;if("undefined"!=typeof window)return function(e){window.MobileDetect=e()};throw new Error("unknown environment")})()(function(){function t(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function n(e,t){var n,r,i=e.length;if(!i||!t)return!1;for(n=t.toLowerCase(),r=0;r<i;++r)if(n===e[r].toLowerCase())return!0;return!1}function s(e){for(var t in e)c.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function a(e,t){this.ua=e||"",this._cache={},this.maxPhoneWidth=t||600}var l,u={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",Dell:"Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b",Samsung:"\\bSamsung\\b|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323)",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",Asus:"Asus.*Galaxy|PadFone.*Mobile",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo 3DS",Amoi:"Amoi",INQ:"INQ",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP612|SOT31",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris [E|M]10)|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android.*\\bG1\\b",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Puffin:"Puffin",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]","UC Browser":"UC Browser[VER]",MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},c=Object.prototype.hasOwnProperty;return u.FALLBACK_PHONE="UnknownPhone",u.FALLBACK_TABLET="UnknownTablet",u.FALLBACK_MOBILE="UnknownMobile",l="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var e,t,n,r,i,o,a=u.mobileDetectRules;for(e in a.props)if(c.call(a.props,e)){for(t=a.props[e],l(t)||(t=[t]),i=t.length,r=0;r<i;++r)0<=(o=(n=t[r]).indexOf("[VER]"))&&(n=n.substring(0,o)+"([\\w._\\+]+)"+n.substring(o+5)),t[r]=new RegExp(n,"i");a.props[e]=t}s(a.oss),s(a.phones),s(a.tablets),s(a.uas),s(a.utils),a.oss0={WindowsPhoneOS:a.oss.WindowsPhoneOS,WindowsMobileOS:a.oss.WindowsMobileOS}}(),u.findMatch=function(e,t){for(var n in e)if(c.call(e,n)&&e[n].test(t))return n;return null},u.findMatches=function(e,t){var n=[];for(var r in e)c.call(e,r)&&e[r].test(t)&&n.push(r);return n},u.getVersionStr=function(e,t){var n,r,i,o,a=u.mobileDetectRules.props;if(c.call(a,e))for(i=(n=a[e]).length,r=0;r<i;++r)if(null!==(o=n[r].exec(t)))return o[1];return null},u.getVersion=function(e,t){var n=u.getVersionStr(e,t);return n?u.prepareVersionNo(n):NaN},u.prepareVersionNo=function(e){var t;return 1===(t=e.split(/[a-z._ \/\-]/i)).length&&(e=t[0]),1<t.length&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},u.isMobileFallback=function(e){return u.detectMobileBrowsers.fullPattern.test(e)||u.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},u.isTabletFallback=function(e){return u.detectMobileBrowsers.tabletPattern.test(e)},u.prepareDetectionCache=function(e,t,n){var r,i,o;if(e.mobile===d)return(i=u.findMatch(u.mobileDetectRules.tablets,t))?(e.mobile=e.tablet=i,void(e.phone=null)):(r=u.findMatch(u.mobileDetectRules.phones,t))?(e.mobile=e.phone=r,void(e.tablet=null)):void(u.isMobileFallback(t)?(o=a.isPhoneSized(n))===d?(e.mobile=u.FALLBACK_MOBILE,e.tablet=e.phone=null):o?(e.mobile=e.phone=u.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=u.FALLBACK_TABLET,e.phone=null):u.isTabletFallback(t)?(e.mobile=e.tablet=u.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null)},u.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&4.3<=e.version("iPad")||e.os("iOS")&&3.1<=e.version("iPhone")||e.os("iOS")&&3.1<=e.version("iPod")||2.1<e.version("Android")&&e.is("Webkit")||7<=e.version("Windows Phone OS")||e.is("BlackBerry")&&6<=e.version("BlackBerry")||e.match("Playbook.*Tablet")||1.4<=e.version("webOS")&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&12<=e.version("Firefox")||e.is("Chrome")&&e.is("AndroidOS")&&4<=e.version("Android")||e.is("Skyfire")&&4.1<=e.version("Skyfire")&&e.is("AndroidOS")&&2.3<=e.version("Android")||e.is("Opera")&&11<e.version("Opera Mobi")&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&2<=e.version("Bada")||(e.is("UC Browser")||e.is("Dolfin"))&&2.3<=e.version("Android")||e.match("Kindle Fire")||e.is("Kindle")&&3<=e.version("Kindle")||e.is("AndroidOS")&&e.is("NookTablet")||11<=e.version("Chrome")&&!t||5<=e.version("Safari")&&!t||4<=e.version("Firefox")&&!t||7<=e.version("MSIE")&&!t||10<=e.version("Opera")&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&5<=e.version("BlackBerry")&&e.version("BlackBerry")<6||5<=e.version("Opera Mini")&&e.version("Opera Mini")<=6.5&&(2.3<=e.version("Android")||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||11<=e.version("Opera Mobi")&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},u.detectOS=function(e){return u.findMatch(u.mobileDetectRules.oss0,e)||u.findMatch(u.mobileDetectRules.oss,e)},u.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},a.prototype={constructor:a,mobile:function(){return u.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return u.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return u.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===d&&(this._cache.userAgent=u.findMatch(u.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===d&&(this._cache.userAgents=u.findMatches(u.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===d&&(this._cache.os=u.detectOS(this.ua)),this._cache.os},version:function(e){return u.getVersion(e,this.ua)},versionStr:function(e){return u.getVersionStr(e,this.ua)},is:function(e){return n(this.userAgents(),e)||t(e,this.os())||t(e,this.phone())||t(e,this.tablet())||n(u.findMatches(u.mobileDetectRules.utils,this.ua),e)},match:function(e){return e instanceof RegExp||(e=new RegExp(e,"i")),e.test(this.ua)},isPhoneSized:function(e){return a.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===d&&(this._cache.grade=u.mobileGrade(this)),this._cache.grade}},a.isPhoneSized="undefined"!=typeof window&&window.screen?function(e){return e<0?d:u.getDeviceSmallerSide()<=e}:function(){},a._impl=u,a.version="1.3.6 2017-04-05",a})}(),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):e("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function(se){function r(e,s){function t(e){if(!(!0===$.data(De+"_intouch")||0<se(e.target).closest(s.excludedElements,$).length)){var t=e.originalEvent?e.originalEvent:e;if(!t.pointerType||"mouse"!=t.pointerType||0!=s.fallbackToMouseEvents){var n,r=t.touches,i=r?r[0]:t;return Y=Ge,r?Z=r.length:!1!==s.preventDefaultEvents&&e.preventDefault(),Q=W=X=null,U=1,K=q=_=j=F=0,z=function(){var e={};return e[le]=x(le),e[ue]=x(ue),e[ce]=x(ce),e[de]=x(de),e}(),P(),C(0,i),!r||Z===s.fingers||s.fingers===Pe||h()?(ee=I(),2==Z&&(C(1,r[1]),_=q=B(J[0].start,J[1].start)),(s.swipeStatus||s.pinchStatus)&&(n=u(t,Y))):n=!1,!1===n?(u(t,Y=Ee),n):(s.hold&&(ae=setTimeout(se.proxy(function(){$.trigger("hold",[t.target]),s.hold&&(n=s.hold.call($,t,t.target))},this),s.longTapThreshold)),G(!0),null)}}}function n(e){var t=e.originalEvent?e.originalEvent:e;if(Y!==He&&Y!==Ee&&!M()){var n,r=t.touches,i=H(r?r[0]:t);if(te=I(),r&&(Z=r.length),s.hold&&clearTimeout(ae),Y=Ce,2==Z&&(0==_?(C(1,r[1]),_=q=B(J[0].start,J[1].start)):(H(r[1]),q=B(J[0].end,J[1].end),J[0].end,J[1].end,Q=U<1?pe:fe),U=function(e,t){return(t/e*1).toFixed(2)}(_,q),K=Math.abs(_-q)),Z===s.fingers||s.fingers===Pe||!r||h()){if(X=D(i.start,i.end),function(e,t){if(!1!==s.preventDefaultEvents)if(s.allowPageScroll===Te)e.preventDefault();else{var n=s.allowPageScroll===he;switch(t){case le:(s.swipeLeft&&n||!n&&s.allowPageScroll!=Ae)&&e.preventDefault();break;case ue:(s.swipeRight&&n||!n&&s.allowPageScroll!=Ae)&&e.preventDefault();break;case ce:(s.swipeUp&&n||!n&&s.allowPageScroll!=ye)&&e.preventDefault();break;case de:(s.swipeDown&&n||!n&&s.allowPageScroll!=ye)&&e.preventDefault()}}}(e,W=D(i.last,i.end)),F=function(e,t){return Math.round(Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)))}(i.start,i.end),j=w(),function(e,t){e!=Te&&(t=Math.max(t,E(e)),z[e].distance=t)}(X,F),n=u(t,Y),!s.triggerOnTouchEnd||s.triggerOnTouchLeave){var o=!0;if(s.triggerOnTouchLeave){var a=function(e){var t=(e=se(e)).offset();return{left:t.left,right:t.left+e.outerWidth(),top:t.top,bottom:t.top+e.outerHeight()}}(this);o=function(e,t){return e.x>t.left&&e.x<t.right&&e.y>t.top&&e.y<t.bottom}(i.end,a)}!s.triggerOnTouchEnd&&o?Y=l(Ce):s.triggerOnTouchLeave&&!o&&(Y=l(He)),Y!=Ee&&Y!=He||u(t,Y)}}else u(t,Y=Ee);!1===n&&u(t,Y=Ee)}}function r(e){var t=e.originalEvent?e.originalEvent:e,n=t.touches;if(n){if(n.length&&!M())return function(e){ne=I(),re=e.touches.length+1}(t),!0;if(n.length&&M())return!0}return M()&&(Z=re),te=I(),j=w(),f()||!d()?u(t,Y=Ee):s.triggerOnTouchEnd||!1===s.triggerOnTouchEnd&&Y===Ce?(!1!==s.preventDefaultEvents&&e.preventDefault(),u(t,Y=He)):!s.triggerOnTouchEnd&&v()?c(t,Y=He,ge):Y===Ce&&u(t,Y=Ee),G(!1),null}function i(){q=_=ee=te=Z=0,U=1,P(),G(!1)}function o(e){var t=e.originalEvent?e.originalEvent:e;s.triggerOnTouchLeave&&u(t,Y=l(He))}function a(){$.unbind(L,t),$.unbind(V,i),$.unbind(O,n),$.unbind(k,r),R&&$.unbind(R,o),G(!1)}function l(e){var t=e,n=p(),r=d(),i=f();return!n||i?t=Ee:!r||e!=Ce||s.triggerOnTouchEnd&&!s.triggerOnTouchLeave?!r&&e==He&&s.triggerOnTouchLeave&&(t=Ee):t=He,t}function u(e,t){var n,r=e.touches;return(!S()||!b())&&!b()||(n=c(e,t,Se)),(!T()||!h())&&!h()||!1===n||(n=c(e,t,be)),y()&&A()&&!1!==n?n=c(e,t,me):j>s.longTapThreshold&&F<Me&&s.longTap&&!1!==n?n=c(e,t,ve):1!==Z&&xe||!(isNaN(F)||F<s.threshold)||!v()||!1===n||(n=c(e,t,ge)),t===Ee&&i(),t===He&&(r&&r.length||i()),n}function c(e,t,n){var r;if(n==Se){if($.trigger("swipeStatus",[t,X||null,F||0,j||0,Z,J,W]),s.swipeStatus&&!1===(r=s.swipeStatus.call($,e,t,X||null,F||0,j||0,Z,J,W)))return!1;if(t==He&&S()){if(clearTimeout(oe),clearTimeout(ae),$.trigger("swipe",[X,F,j,Z,J,W]),s.swipe&&!1===(r=s.swipe.call($,e,X,F,j,Z,J,W)))return!1;switch(X){case le:$.trigger("swipeLeft",[X,F,j,Z,J,W]),s.swipeLeft&&(r=s.swipeLeft.call($,e,X,F,j,Z,J,W));break;case ue:$.trigger("swipeRight",[X,F,j,Z,J,W]),s.swipeRight&&(r=s.swipeRight.call($,e,X,F,j,Z,J,W));break;case ce:$.trigger("swipeUp",[X,F,j,Z,J,W]),s.swipeUp&&(r=s.swipeUp.call($,e,X,F,j,Z,J,W));break;case de:$.trigger("swipeDown",[X,F,j,Z,J,W]),s.swipeDown&&(r=s.swipeDown.call($,e,X,F,j,Z,J,W))}}}if(n==be){if($.trigger("pinchStatus",[t,Q||null,K||0,j||0,Z,U,J]),s.pinchStatus&&!1===(r=s.pinchStatus.call($,e,t,Q||null,K||0,j||0,Z,U,J)))return!1;if(t==He&&T())switch(Q){case fe:$.trigger("pinchIn",[Q||null,K||0,j||0,Z,U,J]),s.pinchIn&&(r=s.pinchIn.call($,e,Q||null,K||0,j||0,Z,U,J));break;case pe:$.trigger("pinchOut",[Q||null,K||0,j||0,Z,U,J]),s.pinchOut&&(r=s.pinchOut.call($,e,Q||null,K||0,j||0,Z,U,J))}}return n==ge?t!==Ee&&t!==He||(clearTimeout(oe),clearTimeout(ae),A()&&!y()?(ie=I(),oe=setTimeout(se.proxy(function(){ie=null,$.trigger("tap",[e.target]),s.tap&&(r=s.tap.call($,e,e.target))},this),s.doubleTapThreshold)):(ie=null,$.trigger("tap",[e.target]),s.tap&&(r=s.tap.call($,e,e.target)))):n==me?t!==Ee&&t!==He||(clearTimeout(oe),clearTimeout(ae),ie=null,$.trigger("doubletap",[e.target]),s.doubleTap&&(r=s.doubleTap.call($,e,e.target))):n==ve&&(t!==Ee&&t!==He||(clearTimeout(oe),ie=null,$.trigger("longtap",[e.target]),s.longTap&&(r=s.longTap.call($,e,e.target)))),r}function d(){var e=!0;return null!==s.threshold&&(e=F>=s.threshold),e}function f(){var e=!1;return null!==s.cancelThreshold&&null!==X&&(e=E(X)-F>=s.cancelThreshold),e}function p(){return!s.maxTimeThreshold||!(j>=s.maxTimeThreshold)}function T(){var e=g(),t=m(),n=null===s.pinchThreshold||K>=s.pinchThreshold;return e&&t&&n}function h(){return!!(s.pinchStatus||s.pinchIn||s.pinchOut)}function S(){var e=p(),t=d(),n=g(),r=m();return!f()&&r&&n&&t&&e}function b(){return!!(s.swipe||s.swipeStatus||s.swipeLeft||s.swipeRight||s.swipeUp||s.swipeDown)}function g(){return Z===s.fingers||s.fingers===Pe||!xe}function m(){return 0!==J[0].end.x}function v(){return!!s.tap}function A(){return!!s.doubleTap}function y(){if(null==ie)return!1;var e=I();return A()&&e-ie<=s.doubleTapThreshold}function P(){re=ne=0}function M(){var e=!1;ne&&I()-ne<=s.fingerReleaseThreshold&&(e=!0);return e}function G(e){$&&(!0===e?($.bind(O,n),$.bind(k,r),R&&$.bind(R,o)):($.unbind(O,n,!1),$.unbind(k,r,!1),R&&$.unbind(R,o,!1)),$.data(De+"_intouch",!0===e))}function C(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,J[e]=n}function H(e){var t=void 0!==e.identifier?e.identifier:0,n=function(e){return J[e]||null}(t);return null===n&&(n=C(t,e)),n.last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function E(e){return z[e]?z[e].distance:void 0}function x(e){return{direction:e,distance:0}}function w(){return te-ee}function B(e,t){var n=Math.abs(e.x-t.x),r=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+r*r))}function D(e,t){if(function(e,t){return e.x==t.x&&e.y==t.y}(e,t))return Te;var n=function(e,t){var n=e.x-t.x,r=t.y-e.y,i=Math.atan2(r,n),o=Math.round(180*i/Math.PI);return o<0&&(o=360-Math.abs(o)),o}(e,t);return n<=45&&0<=n?le:n<=360&&315<=n?le:135<=n&&n<=225?ue:45<n&&n<135?de:ce}function I(){return(new Date).getTime()}s=se.extend({},s);var N=xe||Be||!s.fallbackToMouseEvents,L=N?Be?we?"MSPointerDown":"pointerdown":"touchstart":"mousedown",O=N?Be?we?"MSPointerMove":"pointermove":"touchmove":"mousemove",k=N?Be?we?"MSPointerUp":"pointerup":"touchend":"mouseup",R=N?Be?"mouseleave":null:"mouseleave",V=Be?we?"MSPointerCancel":"pointercancel":"touchcancel",F=0,X=null,W=null,j=0,_=0,q=0,U=1,K=0,Q=0,z=null,$=se(e),Y="start",Z=0,J={},ee=0,te=0,ne=0,re=0,ie=0,oe=null,ae=null;try{$.bind(L,t),$.bind(V,i)}catch(e){se.error("events not supported "+L+","+V+" on jQuery.swipe")}this.enable=function(){return this.disable(),$.bind(L,t),$.bind(V,i),$},this.disable=function(){return a(),$},this.destroy=function(){a(),$.data(De,null),$=null},this.option=function(e,t){if("object"==_typeof(e))s=se.extend(s,e);else if(void 0!==s[e]){if(void 0===t)return s[e];s[e]=t}else{if(!e)return s;se.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}var le="left",ue="right",ce="up",de="down",fe="in",pe="out",Te="none",he="auto",Se="swipe",be="pinch",ge="tap",me="doubletap",ve="longtap",Ae="horizontal",ye="vertical",Pe="all",Me=10,Ge="start",Ce="move",He="end",Ee="cancel",xe="ontouchstart"in window,we=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!xe,Be=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!xe,De="TouchSwipe";se.fn.swipe=function(e){var t=se(this),n=t.data(De);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));se.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"==_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!=_typeof(e)&&e))return function(n){return!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=Te),void 0!==n.click&&void 0===n.tap&&(n.tap=n.click),n=n||{},n=se.extend({},se.fn.swipe.defaults,n),this.each(function(){var e=se(this),t=e.data(De);t||(t=new r(this,n),e.data(De,t))})}.apply(this,arguments);return t},se.fn.swipe.version="1.6.18",se.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},se.fn.swipe.phases={PHASE_START:Ge,PHASE_MOVE:Ce,PHASE_END:He,PHASE_CANCEL:Ee},se.fn.swipe.directions={LEFT:le,RIGHT:ue,UP:ce,DOWN:de,IN:fe,OUT:pe},se.fn.swipe.pageScroll={NONE:Te,HORIZONTAL:Ae,VERTICAL:ye,AUTO:he},se.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:Pe}}),function(){ymaps.ready(function(){var n=new ymaps.Map("map",{center:[59.95005802,30.31781392],zoom:12,controls:["zoomControl"],behaviors:["drag"]});e.forEach(function(e){var t=new ymaps.Placemark([e.latitude,e.longitude],{hintContent:[e.hintContent],balloonContent:[e.balloonContent]},{iconLayout:"default#image",iconImageHref:"./svg/map-marker.svg",iconImageSize:[46,57],iconImageOffset:[-23,-57]});n.geoObjects.add(t)})});var e=[{latitude:59.89899884,longitude:30.484526,hintContent:'<div class="map__hint">Mr. Burger Ð½Ð° ÐÑÐ±ÐµÐ½ÐºÐ¾</div>',balloonContent:"Ð¡ ÑÐ°Ð²ÐµÑÐ¼Ð¾Ð¹ Ñ Ð¾ÐºÑÐ°Ð¸Ð½ ÑÐ»Ð¾Ð¶Ð½Ð¾ ÑÑÐ³Ð°ÑÑÑÑ, Ð½Ð¾ Ð¼Ñ Ð² ÑÐµÐ±Ðµ ÑÐ²ÐµÑÐµÐ½Ñ. ÐÐ°ÑÐ¾Ð´Ð¸ÑÐµ: Ð£Ð». ÐÑÑÐ»ÐµÐ½ÐºÐ¾ Ð´.31"},{latitude:59.93572476,longitude:30.32163087,hintContent:'<div class="map__hint">Mr. Burger Ð² Ð¦ÐµÐ½ÑÑÐµ</div>',balloonContent:"ÐÐ¾Ð²Ð°Ñ Ð´Ð¾ÑÑÐ¾Ð¿ÑÐ¸Ð¼ÐµÑÐ°ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ Ð² ÑÐ°Ð¼Ð¾Ð¼ ÑÐµÐ½ÑÑÐµ Ð¡ÐµÐ²ÐµÑÐ½Ð¾Ð¹ Ð¡ÑÐ¾Ð»Ð¸ÑÑ. ÐÐ´ÑÐ¼ Ð²Ð°Ñ: ÐÐµÐ²ÑÐºÐ¸Ð¹ Ð¿ÑÐ¾ÑÐ¿ÐµÐºÑ Ð´. 19"},{latitude:59.96527645,longitude:30.31072252,hintContent:'<div class="map__hint">Mr. Burger Ð½Ð° ÐÐµÑÑÐ¾Ð³ÑÐ°Ð´ÐºÐµ</div>',balloonContent:"ÐÐ¾Ð»ÑÑÐ¸Ðµ Ð±ÑÑÐ³ÐµÑÑ Ð½Ð° ÐÐ¾Ð»ÑÑÐ¾Ð¼. Ð ÐµÑÑ Ð¾Ð½Ð¸ ÑÐ°Ð¼ÑÐµ Ð²ÐºÑÑÐ½ÑÐµ. ÐÐµ Ð¿ÑÐ¾ÑÐ¾Ð´Ð¸ÑÐµ Ð¼Ð¸Ð¼Ð¾: ÐÐ¾Ð»ÑÑÐ¾Ð¹ Ð¿ÑÐ¾ÑÐ¿ÐµÐºÑ ÐÐ¡ Ð´. 92"}]}(),function(){var n=document.querySelector(".popup-reviews");modalTitle=document.querySelector(".popup-reviews__title"),modalText=document.querySelector(".popup-reviews__text");var e=document.querySelector(".reviews__list");revClose=document.querySelector(".popup-reviews__close"),revClose.addEventListener("click",function(e){e.preventDefault(),n.style.display="none",document.body.style.overflow="initial"}),e.addEventListener("click",function(e){e.preventDefault();var t=e.target.closest("button");t&&(n.style.display="flex",document.body.style.overflow="hidden",modalTitle.innerText=t.parentNode.firstChild.nextSibling.textContent,modalText.innerText=t.parentNode.firstChild.nextSibling.nextSibling.nextSibling.textContent)})}(),$(document).ready(function(){function n(e,t){e.eq(t).addClass("active").siblings().removeClass("active")}function i(e){if(!s){s=!0;var t=function(e){return"".concat(-100*e,"%")}(e);n(o,e),n($(".fixed-menu__item"),e),a.css({transform:"translateY(".concat(t,")")}),setTimeout(function(){s=!1},1300)}}function r(e){var t=o.filter(".active"),n=t.next(),r=t.prev();"next"===e&&n.length&&i(n.index()),"prev"===e&&r.length&&i(r.index())}var o=$(".section"),a=$(".maincontent"),s=!1,e=new MobileDetect(window.navigator.userAgent).mobile();$(document).on({wheel:function(e){var t=e.originalEvent.deltaY;r(0<t?"next":"prev")},keydown:function(e){var t=e.target.tagName.toLowerCase();if("input"!==t&&"textarea"!==t)switch(e.keyCode){case 40:r("next");break;case 38:r("prev")}}}),$("[data-scroll-to]").on("click",function(e){e.preventDefault(),i(parseInt($(e.currentTarget).attr("data-scroll-to")))}),e&&(window.addEventListener("touchmove",function(e){e.preventDefault()},{passive:!1}),$("body").swipe({swipe:function(e,t){var n;"up"===t&&(n="next"),"down"===t&&(n="prev"),r(n)}}))}),function(){var r=document.querySelector(".video__display"),i=document.querySelector(".video__playbtn"),o=document.querySelector(".video__controlls-play-play"),a=document.querySelector(".video__controlls-play-pause"),s=document.querySelector(".video__controlls-volume"),l=(document.querySelector(".video__controlls-volume"),document.querySelector(".video__controlls-circle--progress")),e=document.querySelector(".video__controlls-bar--progress"),u=document.querySelector(".video__controlls-circle--volume"),t=document.querySelector(".video__controlls-bar--volume");u.style.left="30%";var c=.3;r.volume=c,i.addEventListener("click",function(e){e.preventDefault(),r.play(),i.style.display="none",a.style.display="block",o.style.display="none"}),r.addEventListener("click",function(){r.paused?(r.play(),i.style.display="none",o.style.display="none",a.style.display="block"):(r.pause(),i.style.display="block",o.style.display="block",a.style.display="none")}),r.addEventListener("timeupdate",function(){var e=r.currentTime/r.duration;l.style.left=100*e+"%"}),o.addEventListener("click",function(e){e.preventDefault(),r.paused?(r.play(),i.style.display="none",this.style.display="none",a.style.display="block"):r.pause()}),a.addEventListener("click",function(e){e.preventDefault(),r.paused?r.play():(r.pause(),this.style.display="none",o.style.display="block",i.style.display="block")}),e.addEventListener("click",function(e){r.paused&&(i.style.display="none",a.style.display="block",o.style.display="none");var t=this.offsetWidth,n=e.offsetX;l.style.left=100*n/t+"%",r.currentTime=r.duration*n/t,r.play()}),t.addEventListener("click",function(e){var t=this.offsetWidth,n=e.offsetX;u.style.left=100*n/t+"%",c=n/t,r.volume=c,s.classList.remove("active")}),s.addEventListener("click",function(){this.classList.toggle("active"),this.classList.contains("active")?r.volume=0:r.volume=c})}(),function(){var e=document.querySelector(".slider__prev"),t=document.querySelector(".slider__next"),n=document.querySelector(".burgers__slider"),r=document.querySelector(".burgers__col"),i=document.querySelectorAll(".slide"),o=n.offsetWidth,a=(i.length-1)*o,s=0;r.style.right=s,e.addEventListener("click",function(e){e.preventDefault(),0<s?(s-=o,r.style.right=s+"px"):(s=a,r.style.right=a+"px")}),t.addEventListener("click",function(e){e.preventDefault(),s<a?(s+=o,r.style.right=s+"px"):(s=0,r.style.right="0px")})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIm1vYmlsZS1kZXRlY3QuanMiLCJqcXVlcnkudG91Y2hTd2lwZS5qcyIsImFjY29yZGVvbi1tZW51LmpzIiwiYWNjb3JkZW9uLXRlYW0uanMiLCJmb3JtLmpzIiwiZnVsbHNjcmVlbi1tZW51LmpzIiwibG9jYWwuanMiLCJtYXAuanMiLCJtb2RhbC1yZXZpZXdzLmpzIiwib25lcGFnZXNjcm9sbC5qcyIsInBsYXllci5qcyIsInNsaWRlci5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwibW9kdWxlIiwiX3R5cGVvZiIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsIm5vR2xvYmFsIiwiaXNXaW5kb3ciLCJvYmoiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2xpY2UiLCJjb25jYXQiLCJwdXNoIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImhhc093blByb3BlcnR5IiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwiY2FsbCIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwibm9kZVR5cGUiLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJpIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicnRyaW0iLCJpc0FycmF5TGlrZSIsImxlbmd0aCIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsInRoaXMiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcHBseSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwic2V0RG9jdW1lbnQiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0Iiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRvU2VsZWN0b3IiLCJqb2luIiwidGVzdENvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJrZXkiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwiYXJncyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJieUVsZW1lbnQiLCJkaXJydW5zVW5pcXVlIiwiYnlTZXQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsInJvb3RqUXVlcnkiLCJyZWFkeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmUiLCJsb2NrZWQiLCJvbmNlIiwiZmlyZWQiLCJmaXJpbmciLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwibWVtb3J5Iiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwibWlnaHRUaHJvdyIsInRoYXQiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwidXBkYXRlRnVuYyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJyZW1haW5pbmciLCJtYXN0ZXIiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJzZXQiLCJkYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJzd2FwIiwib2xkIiwic3R5bGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImJvZHkiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJwaXhlbFBvc2l0aW9uVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJjb250YWluZXIiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwicmJveFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJ3aWR0aCIsInBvc2l0aW9uIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJncmlkQXJlYSIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblN0YXJ0IiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3RhcnQiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwib3B0IiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsImRvQW5pbWF0aW9uIiwib3B0YWxsIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsInJmb2N1c01vcnBoIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwicyIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ0ZXh0IHNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJNb2JpbGVEZXRlY3QiLCJpbXBsIiwicGhvbmVzIiwiaVBob25lIiwiQmxhY2tCZXJyeSIsIkhUQyIsIk5leHVzIiwiRGVsbCIsIk1vdG9yb2xhIiwiU2Ftc3VuZyIsIkxHIiwiU29ueSIsIkFzdXMiLCJOb2tpYUx1bWlhIiwiTWljcm9tYXgiLCJQYWxtIiwiVmVydHUiLCJQYW50ZWNoIiwiRmx5IiwiV2lrbyIsImlNb2JpbGUiLCJTaW1WYWxsZXkiLCJXb2xmZ2FuZyIsIkFsY2F0ZWwiLCJOaW50ZW5kbyIsIkFtb2kiLCJJTlEiLCJPbmVQbHVzIiwiR2VuZXJpY1Bob25lIiwidGFibGV0cyIsImlQYWQiLCJOZXh1c1RhYmxldCIsIkdvb2dsZVRhYmxldCIsIlNhbXN1bmdUYWJsZXQiLCJLaW5kbGUiLCJTdXJmYWNlVGFibGV0IiwiSFBUYWJsZXQiLCJBc3VzVGFibGV0IiwiQmxhY2tCZXJyeVRhYmxldCIsIkhUQ3RhYmxldCIsIk1vdG9yb2xhVGFibGV0IiwiTm9va1RhYmxldCIsIkFjZXJUYWJsZXQiLCJUb3NoaWJhVGFibGV0IiwiTEdUYWJsZXQiLCJGdWppdHN1VGFibGV0IiwiUHJlc3RpZ2lvVGFibGV0IiwiTGVub3ZvVGFibGV0IiwiRGVsbFRhYmxldCIsIllhcnZpa1RhYmxldCIsIk1lZGlvblRhYmxldCIsIkFybm92YVRhYmxldCIsIkludGVuc29UYWJsZXQiLCJJUlVUYWJsZXQiLCJNZWdhZm9uVGFibGV0IiwiRWJvZGFUYWJsZXQiLCJBbGxWaWV3VGFibGV0IiwiQXJjaG9zVGFibGV0IiwiQWlub2xUYWJsZXQiLCJOb2tpYUx1bWlhVGFibGV0IiwiU29ueVRhYmxldCIsIlBoaWxpcHNUYWJsZXQiLCJDdWJlVGFibGV0IiwiQ29ieVRhYmxldCIsIk1JRFRhYmxldCIsIk1TSVRhYmxldCIsIlNNaVRUYWJsZXQiLCJSb2NrQ2hpcFRhYmxldCIsIkZseVRhYmxldCIsImJxVGFibGV0IiwiSHVhd2VpVGFibGV0IiwiTmVjVGFibGV0IiwiUGFudGVjaFRhYmxldCIsIkJyb25jaG9UYWJsZXQiLCJWZXJzdXNUYWJsZXQiLCJaeW5jVGFibGV0IiwiUG9zaXRpdm9UYWJsZXQiLCJOYWJpVGFibGV0IiwiS29ib1RhYmxldCIsIkRhbmV3VGFibGV0IiwiVGV4ZXRUYWJsZXQiLCJQbGF5c3RhdGlvblRhYmxldCIsIlRyZWtzdG9yVGFibGV0IiwiUHlsZUF1ZGlvVGFibGV0IiwiQWR2YW5UYWJsZXQiLCJEYW55VGVjaFRhYmxldCIsIkdhbGFwYWRUYWJsZXQiLCJNaWNyb21heFRhYmxldCIsIkthcmJvbm5UYWJsZXQiLCJBbGxGaW5lVGFibGV0IiwiUFJPU0NBTlRhYmxldCIsIllPTkVTVGFibGV0IiwiQ2hhbmdKaWFUYWJsZXQiLCJHVVRhYmxldCIsIlBvaW50T2ZWaWV3VGFibGV0IiwiT3Zlcm1heFRhYmxldCIsIkhDTFRhYmxldCIsIkRQU1RhYmxldCIsIlZpc3R1cmVUYWJsZXQiLCJDcmVzdGFUYWJsZXQiLCJNZWRpYXRla1RhYmxldCIsIkNvbmNvcmRlVGFibGV0IiwiR29DbGV2ZXJUYWJsZXQiLCJNb2RlY29tVGFibGV0IiwiVm9uaW5vVGFibGV0IiwiRUNTVGFibGV0IiwiU3RvcmV4VGFibGV0IiwiVm9kYWZvbmVUYWJsZXQiLCJFc3NlbnRpZWxCVGFibGV0IiwiUm9zc01vb3JUYWJsZXQiLCJpTW9iaWxlVGFibGV0IiwiVG9saW5vVGFibGV0IiwiQXVkaW9Tb25pY1RhYmxldCIsIkFNUEVUYWJsZXQiLCJTa2tUYWJsZXQiLCJUZWNub1RhYmxldCIsIkpYRFRhYmxldCIsImlKb3lUYWJsZXQiLCJGWDJUYWJsZXQiLCJYb3JvVGFibGV0IiwiVmlld3NvbmljVGFibGV0IiwiVmVyaXpvblRhYmxldCIsIk9keXNUYWJsZXQiLCJDYXB0aXZhVGFibGV0IiwiSWNvbmJpdFRhYmxldCIsIlRlY2xhc3RUYWJsZXQiLCJPbmRhVGFibGV0IiwiSmF5dGVjaFRhYmxldCIsIkJsYXVwdW5rdFRhYmxldCIsIkRpZ21hVGFibGV0IiwiRXZvbGlvVGFibGV0IiwiTGF2YVRhYmxldCIsIkFvY1RhYmxldCIsIk1wbWFuVGFibGV0IiwiQ2Vsa29uVGFibGV0IiwiV29sZGVyVGFibGV0IiwiTWVkaWFjb21UYWJsZXQiLCJNaVRhYmxldCIsIk5pYmlydVRhYmxldCIsIk5leG9UYWJsZXQiLCJMZWFkZXJUYWJsZXQiLCJVYmlzbGF0ZVRhYmxldCIsIlBvY2tldEJvb2tUYWJsZXQiLCJLb2Nhc29UYWJsZXQiLCJIaXNlbnNlVGFibGV0IiwiSHVkbCIsIlRlbHN0cmFUYWJsZXQiLCJHZW5lcmljVGFibGV0Iiwib3NzIiwiQW5kcm9pZE9TIiwiQmxhY2tCZXJyeU9TIiwiUGFsbU9TIiwiU3ltYmlhbk9TIiwiV2luZG93c01vYmlsZU9TIiwiV2luZG93c1Bob25lT1MiLCJpT1MiLCJpUGFkT1MiLCJNZWVHb09TIiwiTWFlbW9PUyIsIkphdmFPUyIsIndlYk9TIiwiYmFkYU9TIiwiQlJFV09TIiwidWFzIiwiQ2hyb21lIiwiRG9sZmluIiwiT3BlcmEiLCJTa3lmaXJlIiwiRWRnZSIsIklFIiwiRmlyZWZveCIsIkJvbHQiLCJUZWFTaGFyayIsIkJsYXplciIsIlNhZmFyaSIsIldlQ2hhdCIsIlVDQnJvd3NlciIsImJhaWR1Ym94YXBwIiwiYmFpZHVicm93c2VyIiwiRGlpZ29Ccm93c2VyIiwiTWVyY3VyeSIsIk9iaWdvQnJvd3NlciIsIk5ldEZyb250IiwiR2VuZXJpY0Jyb3dzZXIiLCJQYWxlTW9vbiIsIk1vYmlsZSIsIkJ1aWxkIiwiVmVyc2lvbiIsIlZlbmRvcklEIiwiaVBvZCIsIkNvYXN0IiwiRmVubmVjIiwiTm9raWFCcm93c2VyIiwiT3BlcmEgTWluaSIsIk9wZXJhIE1vYmkiLCJNUVFCcm93c2VyIiwiTWljcm9NZXNzZW5nZXIiLCJTYW1zdW5nQnJvd3NlciIsIklyb24iLCJUaXplbiIsIldlYmtpdCIsIkdlY2tvIiwiVHJpZGVudCIsIlByZXN0byIsIkdvYW5uYSIsIkFuZHJvaWQiLCJCUkVXIiwiSmF2YSIsIldpbmRvd3MgUGhvbmUgT1MiLCJXaW5kb3dzIFBob25lIiwiV2luZG93cyBDRSIsIldpbmRvd3MgTlQiLCJTeW1iaWFuIiwidXRpbHMiLCJCb3QiLCJNb2JpbGVCb3QiLCJEZXNrdG9wTW9kZSIsIlRWIiwiV2ViS2l0IiwiQ29uc29sZSIsIldhdGNoIiwiZnVsbFBhdHRlcm4iLCJzaG9ydFBhdHRlcm4iLCJ0YWJsZXRQYXR0ZXJuIiwiaGFzT3duUHJvcCIsImVxdWFsSUMiLCJjb250YWluc0lDIiwiYXJyYXkiLCJ2YWx1ZUxDIiwiY29udmVydFByb3BzVG9SZWdFeHAiLCJ1c2VyQWdlbnQiLCJtYXhQaG9uZVdpZHRoIiwidWEiLCJzdWJzdHIiLCJwcmVwYXJlVXNlckFnZW50IiwiX2NhY2hlIiwiRkFMTEJBQ0tfUEhPTkUiLCJGQUxMQkFDS19UQUJMRVQiLCJGQUxMQkFDS19NT0JJTEUiLCJ2ZXJQb3MiLCJtb2JpbGVEZXRlY3RSdWxlcyIsInN1YnN0cmluZyIsIm9zczAiLCJmaW5kTWF0Y2giLCJydWxlcyIsImZpbmRNYXRjaGVzIiwiZ2V0VmVyc2lvblN0ciIsInByb3BlcnR5TmFtZSIsInBhdHRlcm5zIiwiZ2V0VmVyc2lvbiIsInByZXBhcmVWZXJzaW9uTm8iLCJOYU4iLCJudW1iZXJzIiwiTnVtYmVyIiwiaXNNb2JpbGVGYWxsYmFjayIsImRldGVjdE1vYmlsZUJyb3dzZXJzIiwiaXNUYWJsZXRGYWxsYmFjayIsInByZXBhcmVEZXRlY3Rpb25DYWNoZSIsIm1vYmlsZSIsInBob25lIiwidGFibGV0IiwicGhvbmVTaXplZCIsImlzUGhvbmVTaXplZCIsIm1vYmlsZUdyYWRlIiwiJGlzTW9iaWxlIiwib3MiLCJkZXRlY3RPUyIsImdldERldmljZVNtYWxsZXJTaWRlIiwic2NyZWVuIiwidXNlckFnZW50cyIsInZlcnNpb25TdHIiLCJncmFkZSIsIl9pbXBsIiwicmVxdWlyZSIsIkxFRlQiLCJSSUdIVCIsIlVQIiwiRE9XTiIsIklOIiwiT1VUIiwiTk9ORSIsIkFVVE8iLCJTV0lQRSIsIlBJTkNIIiwiVEFQIiwiRE9VQkxFX1RBUCIsIkxPTkdfVEFQIiwiSE9SSVpPTlRBTCIsIlZFUlRJQ0FMIiwiQUxMX0ZJTkdFUlMiLCJET1VCTEVfVEFQX1RIUkVTSE9MRCIsIlBIQVNFX1NUQVJUIiwiUEhBU0VfTU9WRSIsIlBIQVNFX0VORCIsIlBIQVNFX0NBTkNFTCIsIlNVUFBPUlRTX1RPVUNIIiwiU1VQUE9SVFNfUE9JTlRFUl9JRTEwIiwibmF2aWdhdG9yIiwibXNQb2ludGVyRW5hYmxlZCIsIlBvaW50ZXJFdmVudCIsIlNVUFBPUlRTX1BPSU5URVIiLCJQTFVHSU5fTlMiLCJUb3VjaFN3aXBlIiwiZWxlbWVudCIsInVzZVRvdWNoRXZlbnRzIiwiZmFsbGJhY2tUb01vdXNlRXZlbnRzIiwiU1RBUlRfRVYiLCJNT1ZFX0VWIiwiRU5EX0VWIiwiTEVBVkVfRVYiLCJDQU5DRUxfRVYiLCJkaXN0YW5jZSIsImRpcmVjdGlvbiIsImN1cnJlbnREaXJlY3Rpb24iLCJzdGFydFRvdWNoZXNEaXN0YW5jZSIsImVuZFRvdWNoZXNEaXN0YW5jZSIsInBpbmNoWm9vbSIsInBpbmNoRGlzdGFuY2UiLCJwaW5jaERpcmVjdGlvbiIsIm1heGltdW1zTWFwIiwiJGVsZW1lbnQiLCJwaGFzZSIsImZpbmdlckNvdW50IiwiZmluZ2VyRGF0YSIsImVuZFRpbWUiLCJwcmV2aW91c1RvdWNoRW5kVGltZSIsImZpbmdlckNvdW50QXRSZWxlYXNlIiwiZG91YmxlVGFwU3RhcnRUaW1lIiwic2luZ2xlVGFwVGltZW91dCIsImhvbGRUaW1lb3V0IiwidG91Y2hTdGFydCIsInRvdWNoQ2FuY2VsIiwianFFdmVudCIsImV4Y2x1ZGVkRWxlbWVudHMiLCJwcmV2ZW50RGVmYXVsdEV2ZW50cyIsIm1heERhdGEiLCJjcmVhdGVNYXhpbXVtVk8iLCJjcmVhdGVNYXhpbXVtc0RhdGEiLCJjYW5jZWxNdWx0aUZpbmdlclJlbGVhc2UiLCJjcmVhdGVGaW5nZXJEYXRhIiwiZmluZ2VycyIsImhhc1BpbmNoZXMiLCJnZXRUaW1lU3RhbXAiLCJjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UiLCJzd2lwZVN0YXR1cyIsInBpbmNoU3RhdHVzIiwibG9uZ1RhcFRocmVzaG9sZCIsInNldFRvdWNoSW5Qcm9ncmVzcyIsInRvdWNoTW92ZSIsImluTXVsdGlGaW5nZXJSZWxlYXNlIiwiY3VycmVudEZpbmdlciIsInVwZGF0ZUZpbmdlckRhdGEiLCJzdGFydERpc3RhbmNlIiwiZW5kRGlzdGFuY2UiLCJ0b0ZpeGVkIiwiY2FsY3VsYXRlUGluY2hab29tIiwiYWJzIiwiY2FsY3VsYXRlRGlyZWN0aW9uIiwiYWxsb3dQYWdlU2Nyb2xsIiwiYXV0byIsInN3aXBlTGVmdCIsInN3aXBlUmlnaHQiLCJzd2lwZVVwIiwic3dpcGVEb3duIiwidmFsaWRhdGVEZWZhdWx0RXZlbnQiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJzcXJ0IiwicG93IiwieCIsInkiLCJjYWxjdWxhdGVEaXN0YW5jZSIsImNhbGN1bGF0ZUR1cmF0aW9uIiwiZ2V0TWF4RGlzdGFuY2UiLCJzZXRNYXhEaXN0YW5jZSIsInRyaWdnZXJPblRvdWNoRW5kIiwidHJpZ2dlck9uVG91Y2hMZWF2ZSIsImluQm91bmRzIiwiYm91bmRzIiwib3V0ZXJXaWR0aCIsImJvdHRvbSIsIm91dGVySGVpZ2h0IiwiZ2V0Ym91bmRzIiwicG9pbnQiLCJpc0luQm91bmRzIiwiZ2V0TmV4dFBoYXNlIiwidG91Y2hFbmQiLCJzdGFydE11bHRpRmluZ2VyUmVsZWFzZSIsImRpZFN3aXBlQmFja1RvQ2FuY2VsIiwidmFsaWRhdGVTd2lwZURpc3RhbmNlIiwiaGFzVGFwIiwidHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlIiwidG91Y2hMZWF2ZSIsInJlbW92ZUxpc3RlbmVycyIsImN1cnJlbnRQaGFzZSIsIm5leHRQaGFzZSIsInZhbGlkVGltZSIsInZhbGlkYXRlU3dpcGVUaW1lIiwidmFsaWREaXN0YW5jZSIsImRpZENhbmNlbCIsInZhbGlkYXRlU3dpcGUiLCJoYXNTd2lwZXMiLCJ2YWxpZGF0ZVBpbmNoIiwidmFsaWRhdGVEb3VibGVUYXAiLCJoYXNEb3VibGVUYXAiLCJsb25nVGFwIiwidGhyZXNob2xkIiwiZ2VzdHVyZSIsInN3aXBlIiwicGluY2hJbiIsInBpbmNoT3V0IiwidGFwIiwiZG91YmxlVGFwVGhyZXNob2xkIiwiZG91YmxlVGFwIiwidmFsaWQiLCJjYW5jZWxsZWQiLCJjYW5jZWxUaHJlc2hvbGQiLCJtYXhUaW1lVGhyZXNob2xkIiwiaGFzQ29ycmVjdEZpbmdlckNvdW50IiwidmFsaWRhdGVGaW5nZXJzIiwiaGFzRW5kUG9pbnQiLCJ2YWxpZGF0ZUVuZFBvaW50IiwiaGFzQ29ycmVjdERpc3RhbmNlIiwicGluY2hUaHJlc2hvbGQiLCJoYXNWYWxpZFRpbWUiLCJoYXNWYWxpZERpc3RhbmNlIiwid2l0aGluVGhyZXNob2xkIiwiZmluZ2VyUmVsZWFzZVRocmVzaG9sZCIsImYiLCJnZXRGaW5nZXJEYXRhIiwiZGlmZlgiLCJkaWZmWSIsInBvaW50QSIsInBvaW50QiIsImNvbXBhcmVQb2ludHMiLCJhbmdsZSIsInIiLCJhdGFuMiIsImNhbGN1bGF0ZUFuZ2xlIiwiZ2V0VGltZSIsImVuYWJsZSIsImRlc3Ryb3kiLCJwcm9wZXJ0eSIsIiR0aGlzIiwicGx1Z2luIiwiZGVmYXVsdHMiLCJwaGFzZXMiLCJkaXJlY3Rpb25zIiwicGFnZVNjcm9sbCIsIk9ORSIsIlRXTyIsIlRIUkVFIiwiRk9VUiIsIkZJVkUiLCJBTEwiLCJxdWVyeVNlbGVjdG9yIiwibWVudUFjY29JdGVtIiwiY2xhc3NMaXN0IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsInRlYW1BY2NvSXRlbSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsIm9yZGVyRm9ybSIsIm9yZGVyQnV0dG9uIiwiRm9ybURhdGEiLCJjb21tZW50IiwibW9kYWxSZXYiLCJtb2RhbFRleHQiLCJpbm5lclRleHQiLCJtb2RhbFRpdGxlIiwiaGFtYnVyZ2VyTWVudSIsImhhbWJ1cmdlckJ1dHRvbiIsImNsb3NlSGFtYnVyZ2VyTWVudSIsImxvZyIsIkMiLCJFIiwiZyIsInUiLCJvIiwiYyIsImsiLCJkIiwiaCIsIm5lIiwib2UiLCJUIiwiUyIsInVlIiwiTiIsIkEiLCJEIiwicSIsIkwiLCJIIiwiTyIsIlAiLCJSIiwiTSIsIkkiLCJXIiwiRiIsIkIiLCJ6IiwiVSIsIlgiLCJWIiwiRyIsIlkiLCJRIiwiSiIsIksiLCJaIiwiZWUiLCJ0ZSIsInJlIiwiaWUiLCJhZSIsImJlIiwic2UiLCJ4ZSIsInllIiwibGUiLCJjZSIsImZlIiwicGUiLCJkZSIsImhlIiwiZ2UiLCJ2ZSIsIm50aCIsIm1lIiwid2UiLCJUZSIsIkNlIiwiRWUiLCJrZSIsIlNlIiwiTmUiLCJBZSIsIkRlIiwiamUiLCJxZSIsIkxlIiwiSGUiLCJPZSIsIlBlIiwiUmUiLCJNZSIsIkllIiwiV2UiLCIkZSIsIkZlIiwiQmUiLCJfZSIsInplIiwiVWUiLCJYZSIsIlZlIiwiR2UiLCJZZSIsIlFlIiwiSmUiLCJLZSIsIlplIiwiZXQiLCJ0dCIsIm50IiwicnQiLCJpdCIsIm90IiwiYXQiLCJzdCIsInV0IiwiZnQiLCJwdCIsImR0IiwiaHQiLCJ2dCIsInl0IiwibXQiLCJ4dCIsImJ0Iiwid3QiLCJDdCIsIlR0IiwiRXQiLCJrdCIsIlN0IiwiTnQiLCJBdCIsIkR0IiwianQiLCJxdCIsIkx0IiwiSHQiLCJPdCIsIlB0IiwiUnQiLCJNdCIsIkl0IiwiV3QiLCIkdCIsIkZ0IiwiQnQiLCJfdCIsInp0IiwiVXQiLCJYdCIsIlZ0IiwiR3QiLCJZdCIsIlF0IiwiSnQiLCJQdWZmaW4iLCJVQyBCcm93c2VyIiwicG9pbnRlckVuYWJsZWQiLCJ5bWFwcyIsIk1hcCIsImNlbnRlciIsImNvbnRyb2xzIiwiYmVoYXZpb3JzIiwicGxhY2VtYXJrcyIsImZvckVhY2giLCJwbGFjZW1hcmsiLCJQbGFjZW1hcmsiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImhpbnRDb250ZW50IiwiYmFsbG9vbkNvbnRlbnQiLCJpY29uTGF5b3V0IiwiaWNvbkltYWdlSHJlZiIsImljb25JbWFnZVNpemUiLCJpY29uSW1hZ2VPZmZzZXQiLCJnZW9PYmplY3RzIiwicmV2TGlzdCIsInJldkNsb3NlIiwic3dpdGNoQWN0aXZlQ2xhc3MiLCJlbGVtTmR4IiwicGVyZm9ybVRyYW5zaXRpb24iLCJzZWN0aW9uRXEiLCJpbnNjcm9sbCIsImNvdW50UG9zaXRpb25QZXJjZW50Iiwic2VjdGlvbnMiLCJ0cmFuc2Zvcm0iLCJzY3JvbGxWaWV3cG9ydCIsImFjdGl2ZVNlY3Rpb24iLCJuZXh0U2VjdGlvbiIsInByZXZTZWN0aW9uIiwiaXNNb2JpbGUiLCJ3aGVlbCIsImRlbHRhWSIsImtleWRvd24iLCJ0YWdOYW1lIiwicGFzc2l2ZSIsInNjcm9sbERpcmVjcmlvbiIsInZpZGVvIiwiYmlnUGxheUJ0biIsInNtYWxsUGxheUJ0biIsInNtYWxsUGF1c2VCdG4iLCJ2b2x1bWVCdG4iLCJjaXJjbGVQcm9ncmVzcyIsInByb2dyZXNzQmFyIiwiY2lyY2xlVm9sdW1lIiwidm9sdW1lQmFyIiwiY3VycmVudFZvbHVtZSIsInZvbHVtZSIsInBsYXkiLCJwYXVzZWQiLCJwYXVzZSIsImJhcldpZHRoIiwiY2xpY2tQb3NpdGlvbiIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsInNsaWRlcldpbmRvdyIsInNsaWRlckxpc3QiLCJzbGlkZXMiLCJtYXhSaWdodCIsImN1cnJlbnRSaWdodCIsIm1pblJpZ2h0Il0sIm1hcHBpbmdzIjoiK1BBYUEsU0FBQUEsRUFBQUMsR0FJQSxZQUFBLG9CQUFBQyxPQUFBLFlBQUFDLFFBQUFELFVBQUEsV0FBQUMsUUFBQUQsT0FBQUUsU0FTQUYsT0FBQUUsUUFBQUosRUFBQUssU0FDQUosRUFBQUQsR0FBQSxHQUNBLFNBQUFNLEdBQ0EsSUFBQUEsRUFBQUQsU0FDQSxNQUFBLElBQUFFLE1BQUEsNENBRUEsT0FBQU4sRUFBQUssSUFHQUwsRUFBQUQsR0F0QkEsQ0EwQkEsb0JBQUFRLE9BQUFBLFlBQUEsRUFBQSxTQUFBQSxFQUFBQyxHQTRDQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUEsTUFBQUEsR0FBQUEsSUFBQUEsRUFBQUgsT0FyQ0EsSUFBQUksRUFBQSxHQUVBUCxFQUFBRyxFQUFB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RUFBQVUsT0FBQUQsRUFDQUwsRUFBQWpOLFVBQUFsckMsT0FBQSxZQUdBbTRDLEVBQUEvbEQsaUJBQUEsUUFBQSxXQUNBbk0sS0FBQWlsRCxVQUFBampDLE9BQUEsVUFDQWhpQixLQUFBaWxELFVBQUE1L0MsU0FBQSxVQUNBeXNELEVBQUFVLE9BQUEsRUFFQVYsRUFBQVUsT0FBQUQsSUFyR0EsR0NBQSxXQUNBLElBQUFPLEVBQUF6MkQsU0FBQTBvRCxjQUFBLGlCQUNBZ08sRUFBQTEyRCxTQUFBMG9ELGNBQUEsaUJBQ0FpTyxFQUFBMzJELFNBQUEwb0QsY0FBQSxvQkFDQWtPLEVBQUE1MkQsU0FBQTBvRCxjQUFBLGlCQUNBbU8sRUFBQTcyRCxTQUFBNE4saUJBQUEsVUFFQXNxQixFQUFBeStCLEVBQUF0a0MsWUFDQXlrQyxHQUFBRCxFQUFBdnpELE9BQUEsR0FBQTQwQixFQUNBNitCLEVBQUEsRUFDQUgsRUFBQXR5QyxNQUFBNE4sTUFBQTZrQyxFQW1CQU4sRUFBQTNtRCxpQkFBQSxRQUFBLFNBQUF0RCxHQUNBQSxFQUFBMmMsaUJBeEJBLEVBTUE0dEMsR0FDQUEsR0FBQTcrQixFQUNBMCtCLEVBQUF0eUMsTUFBQTROLE1BQUE2a0MsRUFBQSxPQUVBQSxFQUFBRCxFQUNBRixFQUFBdHlDLE1BQUE0TixNQUFBNGtDLEVBQUEsUUFnQkFKLEVBQUE1bUQsaUJBQUEsUUFBQSxTQUFBdEQsR0FDQUEsRUFBQTJjLGlCQWJBNHRDLEVBQUFELEdBQ0FDLEdBQUE3K0IsRUFDQTArQixFQUFBdHlDLE1BQUE0TixNQUFBNmtDLEVBQUEsT0FFQUEsRUFuQkEsRUFvQkFILEVBQUF0eUMsTUFBQTROLE1BQUE4a0MsU0ExQkEiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyBUSElTIEZJTEUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIEVESVQhXG4vKiFtb2JpbGUtZGV0ZWN0IHYxLjQuNCAyMDE5LTA5LTIxKi9cbi8qZ2xvYmFsIG1vZHVsZTpmYWxzZSwgZGVmaW5lOmZhbHNlKi9cbi8qanNoaW50IGxhdGVkZWY6ZmFsc2UqL1xuLyohQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMTMsIEhlaW5yaWNoIEdvZWJsLCBMaWNlbnNlOiBNSVQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMqL1xuKGZ1bmN0aW9uIChkZWZpbmUsIHVuZGVmaW5lZCkge1xuZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaW1wbCA9IHt9O1xuXG4gICAgaW1wbC5tb2JpbGVEZXRlY3RSdWxlcyA9IHtcbiAgICBcInBob25lc1wiOiB7XG4gICAgICAgIFwiaVBob25lXCI6IFwiXFxcXGJpUGhvbmVcXFxcYnxcXFxcYmlQb2RcXFxcYlwiLFxuICAgICAgICBcIkJsYWNrQmVycnlcIjogXCJCbGFja0JlcnJ5fFxcXFxiQkIxMFxcXFxifHJpbVswLTldK3xcXFxcYihCQkExMDB8QkJCMTAwfEJCRDEwMHxCQkUxMDB8QkJGMTAwfFNUSDEwMClcXFxcYi1bMC05XStcIixcbiAgICAgICAgXCJIVENcIjogXCJIVEN8SFRDLiooU2Vuc2F0aW9ufEV2b3xWaXNpb258RXhwbG9yZXJ8NjgwMHw4MTAwfDg5MDB8QTcyNzJ8UzUxMGV8QzExMGV8TGVnZW5kfERlc2lyZXxUODI4Mil8QVBYNTE1Q0tUfFF0ZWs5MDkwfEFQQTkyOTJLVHxIRF9taW5pfFNlbnNhdGlvbi4qWjcxMGV8UEc4NjEwMHxaNzE1ZXxEZXNpcmUuKihBODE4MXxIRCl8QURSNjIwMHxBRFI2NDAwTHxBRFI2NDI1fDAwMUhUfEluc3BpcmUgNEd8QW5kcm9pZC4qXFxcXGJFVk9cXFxcYnxULU1vYmlsZSBHMXxaNTIwbXxBbmRyb2lkIFswLTkuXSs7IFBpeGVsXCIsXG4gICAgICAgIFwiTmV4dXNcIjogXCJOZXh1cyBPbmV8TmV4dXMgU3xHYWxheHkuKk5leHVzfEFuZHJvaWQuKk5leHVzLipNb2JpbGV8TmV4dXMgNHxOZXh1cyA1fE5leHVzIDZcIixcbiAgICAgICAgXCJEZWxsXCI6IFwiRGVsbFs7XT8gKFN0cmVha3xBZXJvfFZlbnVlfFZlbnVlIFByb3xGbGFzaHxTbW9rZXxNaW5pIDNpWCl8WENEMjh8WENEMzV8XFxcXGIwMDFETFxcXFxifFxcXFxiMTAxRExcXFxcYnxcXFxcYkdTMDFcXFxcYlwiLFxuICAgICAgICBcIk1vdG9yb2xhXCI6IFwiTW90b3JvbGF8RFJPSURYfERST0lEIEJJT05JQ3xcXFxcYkRyb2lkXFxcXGIuKkJ1aWxkfEFuZHJvaWQuKlhvb218SFJJMzl8TU9ULXxBMTI2MHxBMTY4MHxBNTU1fEE4NTN8QTg1NXxBOTUzfEE5NTV8QTk1NnxNb3Rvcm9sYS4qRUxFQ1RSSUZZfE1vdG9yb2xhLippMXxpODY3fGk5NDB8TUIyMDB8TUIzMDB8TUI1MDF8TUI1MDJ8TUI1MDh8TUI1MTF8TUI1MjB8TUI1MjV8TUI1MjZ8TUI2MTF8TUI2MTJ8TUI2MzJ8TUI4MTB8TUI4NTV8TUI4NjB8TUI4NjF8TUI4NjV8TUI4NzB8TUU1MDF8TUU1MDJ8TUU1MTF8TUU1MjV8TUU2MDB8TUU2MzJ8TUU3MjJ8TUU4MTF8TUU4NjB8TUU4NjN8TUU4NjV8TVQ2MjB8TVQ3MTB8TVQ3MTZ8TVQ3MjB8TVQ4MTB8TVQ4NzB8TVQ5MTd8TW90b3JvbGEuKlRJVEFOSVVNfFdYNDM1fFdYNDQ1fFhUMzAwfFhUMzAxfFhUMzExfFhUMzE2fFhUMzE3fFhUMzE5fFhUMzIwfFhUMzkwfFhUNTAyfFhUNTMwfFhUNTMxfFhUNTMyfFhUNTM1fFhUNjAzfFhUNjEwfFhUNjExfFhUNjE1fFhUNjgxfFhUNzAxfFhUNzAyfFhUNzExfFhUNzIwfFhUODAwfFhUODA2fFhUODYwfFhUODYyfFhUODc1fFhUODgyfFhUODgzfFhUODk0fFhUOTAxfFhUOTA3fFhUOTA5fFhUOTEwfFhUOTEyfFhUOTI4fFhUOTI2fFhUOTE1fFhUOTE5fFhUOTI1fFhUMTAyMXxcXFxcYk1vdG8gRVxcXFxifFhUMTA2OHxYVDEwOTJ8WFQxMDUyXCIsXG4gICAgICAgIFwiU2Ftc3VuZ1wiOiBcIlxcXFxiU2Ftc3VuZ1xcXFxifFNNLUc5NTBGfFNNLUc5NTVGfFNNLUc5MjUwfEdULTE5MzAwfFNHSC1JMzM3fEJHVC1TNTIzMHxHVC1CMjEwMHxHVC1CMjcwMHxHVC1CMjcxMHxHVC1CMzIxMHxHVC1CMzMxMHxHVC1CMzQxMHxHVC1CMzczMHxHVC1CMzc0MHxHVC1CNTUxMHxHVC1CNTUxMnxHVC1CNTcyMnxHVC1CNjUyMHxHVC1CNzMwMHxHVC1CNzMyMHxHVC1CNzMzMHxHVC1CNzM1MHxHVC1CNzUxMHxHVC1CNzcyMnxHVC1CNzgwMHxHVC1DMzAxMHxHVC1DMzAxMXxHVC1DMzA2MHxHVC1DMzIwMHxHVC1DMzIxMnxHVC1DMzIxMkl8R1QtQzMyNjJ8R1QtQzMyMjJ8R1QtQzMzMDB8R1QtQzMzMDBLfEdULUMzMzAzfEdULUMzMzAzS3xHVC1DMzMxMHxHVC1DMzMyMnxHVC1DMzMzMHxHVC1DMzM1MHxHVC1DMzUwMHxHVC1DMzUxMHxHVC1DMzUzMHxHVC1DMzYzMHxHVC1DMzc4MHxHVC1DNTAxMHxHVC1DNTIxMnxHVC1DNjYyMHxHVC1DNjYyNXxHVC1DNjcxMnxHVC1FMTA1MHxHVC1FMTA3MHxHVC1FMTA3NXxHVC1FMTA4MHxHVC1FMTA4MXxHVC1FMTA4NXxHVC1FMTA4N3xHVC1FMTEwMHxHVC1FMTEwN3xHVC1FMTExMHxHVC1FMTEyMHxHVC1FMTEyNXxHVC1FMTEzMHxHVC1FMTE2MHxHVC1FMTE3MHxHVC1FMTE3NXxHVC1FMTE4MHxHVC1FMTE4MnxHVC1FMTIwMHxHVC1FMTIxMHxHVC1FMTIyNXxHVC1FMTIzMHxHVC1FMTM5MHxHVC1FMjEwMHxHVC1FMjEyMHxHVC1FMjEyMXxHVC1FMjE1MnxHVC1FMjIyMHxHVC1FMjIyMnxHVC1FMjIzMHxHVC1FMjIzMnxHVC1FMjI1MHxHVC1FMjM3MHxHVC1FMjU1MHxHVC1FMjY1MnxHVC1FMzIxMHxHVC1FMzIxM3xHVC1JNTUwMHxHVC1JNTUwM3xHVC1JNTcwMHxHVC1JNTgwMHxHVC1JNTgwMXxHVC1JNjQxMHxHVC1JNjQyMHxHVC1JNzExMHxHVC1JNzQxMHxHVC1JNzUwMHxHVC1JODAwMHxHVC1JODE1MHxHVC1JODE2MHxHVC1JODE5MHxHVC1JODMyMHxHVC1JODMzMHxHVC1JODM1MHxHVC1JODUzMHxHVC1JODcwMHxHVC1JODcwM3xHVC1JODkxMHxHVC1JOTAwMHxHVC1JOTAwMXxHVC1JOTAwM3xHVC1JOTAxMHxHVC1JOTAyMHxHVC1JOTAyM3xHVC1JOTA3MHxHVC1JOTA4MnxHVC1JOTEwMHxHVC1JOTEwM3xHVC1JOTIyMHxHVC1JOTI1MHxHVC1JOTMwMHxHVC1JOTMwNXxHVC1JOTUwMHxHVC1JOTUwNXxHVC1NMzUxMHxHVC1NNTY1MHxHVC1NNzUwMHxHVC1NNzYwMHxHVC1NNzYwM3xHVC1NODgwMHxHVC1NODkxMHxHVC1ONzAwMHxHVC1TMzExMHxHVC1TMzMxMHxHVC1TMzM1MHxHVC1TMzM1M3xHVC1TMzM3MHxHVC1TMzY1MHxHVC1TMzY1M3xHVC1TMzc3MHxHVC1TMzg1MHxHVC1TNTIxMHxHVC1TNTIyMHxHVC1TNTIyOXxHVC1TNTIzMHxHVC1TNTIzM3xHVC1TNTI1MHxHVC1TNTI1M3xHVC1TNTI2MHxHVC1TNTI2M3xHVC1TNTI3MHxHVC1TNTMwMHxHVC1TNTMzMHxHVC1TNTM1MHxHVC1TNTM2MHxHVC1TNTM2M3xHVC1TNTM2OXxHVC1TNTM4MHxHVC1TNTM4MER8R1QtUzU1NjB8R1QtUzU1NzB8R1QtUzU2MDB8R1QtUzU2MDN8R1QtUzU2MTB8R1QtUzU2MjB8R1QtUzU2NjB8R1QtUzU2NzB8R1QtUzU2OTB8R1QtUzU3NTB8R1QtUzU3ODB8R1QtUzU4MzB8R1QtUzU4Mzl8R1QtUzYxMDJ8R1QtUzY1MDB8R1QtUzcwNzB8R1QtUzcyMDB8R1QtUzcyMjB8R1QtUzcyMzB8R1QtUzcyMzN8R1QtUzcyNTB8R1QtUzc1MDB8R1QtUzc1MzB8R1QtUzc1NTB8R1QtUzc1NjJ8R1QtUzc3MTB8R1QtUzgwMDB8R1QtUzgwMDN8R1QtUzg1MDB8R1QtUzg1MzB8R1QtUzg2MDB8U0NILUEzMTB8U0NILUE1MzB8U0NILUE1NzB8U0NILUE2MTB8U0NILUE2MzB8U0NILUE2NTB8U0NILUE3OTB8U0NILUE3OTV8U0NILUE4NTB8U0NILUE4NzB8U0NILUE4OTB8U0NILUE5MzB8U0NILUE5NTB8U0NILUE5NzB8U0NILUE5OTB8U0NILUkxMDB8U0NILUkxMTB8U0NILUk0MDB8U0NILUk0MDV8U0NILUk1MDB8U0NILUk1MTB8U0NILUk1MTV8U0NILUk2MDB8U0NILUk3MzB8U0NILUk3NjB8U0NILUk3NzB8U0NILUk4MzB8U0NILUk5MTB8U0NILUk5MjB8U0NILUk5NTl8U0NILUxDMTF8U0NILU4xNTB8U0NILU4zMDB8U0NILVIxMDB8U0NILVIzMDB8U0NILVIzNTF8U0NILVI0MDB8U0NILVI0MTB8U0NILVQzMDB8U0NILVUzMTB8U0NILVUzMjB8U0NILVUzNTB8U0NILVUzNjB8U0NILVUzNjV8U0NILVUzNzB8U0NILVUzODB8U0NILVU0MTB8U0NILVU0MzB8U0NILVU0NTB8U0NILVU0NjB8U0NILVU0NzB8U0NILVU0OTB8U0NILVU1NDB8U0NILVU1NTB8U0NILVU2MjB8U0NILVU2NDB8U0NILVU2NTB8U0NILVU2NjB8U0NILVU3MDB8U0NILVU3NDB8U0NILVU3NTB8U0NILVU4MTB8U0NILVU4MjB8U0NILVU5MDB8U0NILVU5NDB8U0NILVU5NjB8U0NTLTI2VUN8U0dILUExMDd8U0dILUExMTd8U0dILUExMjd8U0dILUExMzd8U0dILUExNTd8U0dILUExNjd8U0dILUExNzd8U0dILUExODd8U0dILUExOTd8U0dILUEyMjd8U0dILUEyMzd8U0dILUEyNTd8U0dILUE0Mzd8U0dILUE1MTd8U0dILUE1OTd8U0dILUE2Mzd8U0dILUE2NTd8U0dILUE2Njd8U0dILUE2ODd8U0dILUE2OTd8U0dILUE3MDd8U0dILUE3MTd8U0dILUE3Mjd8U0dILUE3Mzd8U0dILUE3NDd8U0dILUE3Njd8U0dILUE3Nzd8U0dILUE3OTd8U0dILUE4MTd8U0dILUE4Mjd8U0dILUE4Mzd8U0dILUE4NDd8U0dILUE4Njd8U0dILUE4Nzd8U0dILUE4ODd8U0dILUE4OTd8U0dILUE5Mjd8U0dILUIxMDB8U0dILUIxMzB8U0dILUIyMDB8U0dILUIyMjB8U0dILUMxMDB8U0dILUMxMTB8U0dILUMxMjB8U0dILUMxMzB8U0dILUMxNDB8U0dILUMxNjB8U0dILUMxNzB8U0dILUMxODB8U0dILUMyMDB8U0dILUMyMDd8U0dILUMyMTB8U0dILUMyMjV8U0dILUMyMzB8U0dILUM0MTd8U0dILUM0NTB8U0dILUQzMDd8U0dILUQzNDd8U0dILUQzNTd8U0dILUQ0MDd8U0dILUQ0MTV8U0dILUQ3ODB8U0dILUQ4MDd8U0dILUQ5ODB8U0dILUUxMDV8U0dILUUyMDB8U0dILUUzMTV8U0dILUUzMTZ8U0dILUUzMTd8U0dILUUzMzV8U0dILUU1OTB8U0dILUU2MzV8U0dILUU3MTV8U0dILUU4OTB8U0dILUYzMDB8U0dILUY0ODB8U0dILUkyMDB8U0dILUkzMDB8U0dILUkzMjB8U0dILUk1NTB8U0dILUk1Nzd8U0dILUk2MDB8U0dILUk2MDd8U0dILUk2MTd8U0dILUk2Mjd8U0dILUk2Mzd8U0dILUk2Nzd8U0dILUk3MDB8U0dILUk3MTd8U0dILUk3Mjd8U0dILWk3NDdNfFNHSC1JNzc3fFNHSC1JNzgwfFNHSC1JODI3fFNHSC1JODQ3fFNHSC1JODU3fFNHSC1JODk2fFNHSC1JODk3fFNHSC1JOTAwfFNHSC1JOTA3fFNHSC1JOTE3fFNHSC1JOTI3fFNHSC1JOTM3fFNHSC1JOTk3fFNHSC1KMTUwfFNHSC1KMjAwfFNHSC1MMTcwfFNHSC1MNzAwfFNHSC1NMTEwfFNHSC1NMTUwfFNHSC1NMjAwfFNHSC1OMTA1fFNHSC1ONTAwfFNHSC1ONjAwfFNHSC1ONjIwfFNHSC1ONjI1fFNHSC1ONzAwfFNHSC1ONzEwfFNHSC1QMTA3fFNHSC1QMjA3fFNHSC1QMzAwfFNHSC1QMzEwfFNHSC1QNTIwfFNHSC1QNzM1fFNHSC1QNzc3fFNHSC1RMTA1fFNHSC1SMjEwfFNHSC1SMjIwfFNHSC1SMjI1fFNHSC1TMTA1fFNHSC1TMzA3fFNHSC1UMTA5fFNHSC1UMTE5fFNHSC1UMTM5fFNHSC1UMjA5fFNHSC1UMjE5fFNHSC1UMjI5fFNHSC1UMjM5fFNHSC1UMjQ5fFNHSC1UMjU5fFNHSC1UMzA5fFNHSC1UMzE5fFNHSC1UMzI5fFNHSC1UMzM5fFNHSC1UMzQ5fFNHSC1UMzU5fFNHSC1UMzY5fFNHSC1UMzc5fFNHSC1UNDA5fFNHSC1UNDI5fFNHSC1UNDM5fFNHSC1UNDU5fFNHSC1UNDY5fFNHSC1UNDc5fFNHSC1UNDk5fFNHSC1UNTA5fFNHSC1UNTE5fFNHSC1UNTM5fFNHSC1UNTU5fFNHSC1UNTg5fFNHSC1UNjA5fFNHSC1UNjE5fFNHSC1UNjI5fFNHSC1UNjM5fFNHSC1UNjU5fFNHSC1UNjY5fFNHSC1UNjc5fFNHSC1UNzA5fFNHSC1UNzE5fFNHSC1UNzI5fFNHSC1UNzM5fFNHSC1UNzQ2fFNHSC1UNzQ5fFNHSC1UNzU5fFNHSC1UNzY5fFNHSC1UODA5fFNHSC1UODE5fFNHSC1UODM5fFNHSC1UOTE5fFNHSC1UOTI5fFNHSC1UOTM5fFNHSC1UOTU5fFNHSC1UOTg5fFNHSC1VMTAwfFNHSC1VMjAwfFNHSC1VODAwfFNHSC1WMjA1fFNHSC1WMjA2fFNHSC1YMTAwfFNHSC1YMTA1fFNHSC1YMTIwfFNHSC1YMTQwfFNHSC1YNDI2fFNHSC1YNDI3fFNHSC1YNDc1fFNHSC1YNDk1fFNHSC1YNDk3fFNHSC1YNTA3fFNHSC1YNjAwfFNHSC1YNjEwfFNHSC1YNjIwfFNHSC1YNjMwfFNHSC1YNzAwfFNHSC1YODIwfFNHSC1YODkwfFNHSC1aMTMwfFNHSC1aMTUwfFNHSC1aMTcwfFNHSC1aWDEwfFNHSC1aWDIwfFNIVy1NMTEwfFNQSC1BMTIwfFNQSC1BNDAwfFNQSC1BNDIwfFNQSC1BNDYwfFNQSC1BNTAwfFNQSC1BNTYwfFNQSC1BNjAwfFNQSC1BNjIwfFNQSC1BNjYwfFNQSC1BNzAwfFNQSC1BNzQwfFNQSC1BNzYwfFNQSC1BNzkwfFNQSC1BODAwfFNQSC1BODIwfFNQSC1BODQwfFNQSC1BODgwfFNQSC1BOTAwfFNQSC1BOTQwfFNQSC1BOTYwfFNQSC1ENjAwfFNQSC1ENzAwfFNQSC1ENzEwfFNQSC1ENzIwfFNQSC1JMzAwfFNQSC1JMzI1fFNQSC1JMzMwfFNQSC1JMzUwfFNQSC1JNTAwfFNQSC1JNjAwfFNQSC1JNzAwfFNQSC1MNzAwfFNQSC1NMTAwfFNQSC1NMjIwfFNQSC1NMjQwfFNQSC1NMzAwfFNQSC1NMzA1fFNQSC1NMzIwfFNQSC1NMzMwfFNQSC1NMzUwfFNQSC1NMzYwfFNQSC1NMzcwfFNQSC1NMzgwfFNQSC1NNTEwfFNQSC1NNTQwfFNQSC1NNTUwfFNQSC1NNTYwfFNQSC1NNTcwfFNQSC1NNTgwfFNQSC1NNjEwfFNQSC1NNjIwfFNQSC1NNjMwfFNQSC1NODAwfFNQSC1NODEwfFNQSC1NODUwfFNQSC1NOTAwfFNQSC1NOTEwfFNQSC1NOTIwfFNQSC1NOTMwfFNQSC1OMTAwfFNQSC1OMjAwfFNQSC1OMjQwfFNQSC1OMzAwfFNQSC1ONDAwfFNQSC1aNDAwfFNXQy1FMTAwfFNDSC1pOTA5fEdULU43MTAwfEdULU43MTA1fFNDSC1JNTM1fFNNLU45MDBBfFNHSC1JMzE3fFNHSC1UOTk5THxHVC1TNTM2MEJ8R1QtSTgyNjJ8R1QtUzY4MDJ8R1QtUzYzMTJ8R1QtUzYzMTB8R1QtUzUzMTJ8R1QtUzUzMTB8R1QtSTkxMDV8R1QtSTg1MTB8R1QtUzY3OTBOfFNNLUc3MTA1fFNNLU45MDA1fEdULVM1MzAxfEdULUk5Mjk1fEdULUk5MTk1fFNNLUMxMDF8R1QtUzczOTJ8R1QtUzc1NjB8R1QtQjc2MTB8R1QtSTU1MTB8R1QtUzc1ODJ8R1QtUzc1MzBFfEdULUk4NzUwfFNNLUc5MDA2VnxTTS1HOTAwOFZ8U00tRzkwMDlEfFNNLUc5MDBBfFNNLUc5MDBEfFNNLUc5MDBGfFNNLUc5MDBIfFNNLUc5MDBJfFNNLUc5MDBKfFNNLUc5MDBLfFNNLUc5MDBMfFNNLUc5MDBNfFNNLUc5MDBQfFNNLUc5MDBSNHxTTS1HOTAwU3xTTS1HOTAwVHxTTS1HOTAwVnxTTS1HOTAwVzh8U0hWLUUxNjBLfFNDSC1QNzA5fFNDSC1QNzI5fFNNLVQyNTU4fEdULUk5MjA1fFNNLUc5MzUwfFNNLUoxMjBGfFNNLUc5MjBGfFNNLUc5MjBWfFNNLUc5MzBGfFNNLU45MTBDfFNNLUEzMTBGfEdULUk5MTkwfFNNLUo1MDBGTnxTTS1HOTAzRnxTTS1KMzMwRlwiLFxuICAgICAgICBcIkxHXCI6IFwiXFxcXGJMR1xcXFxiO3xMR1stIF0/KEM4MDB8QzkwMHxFNDAwfEU2MTB8RTkwMHxFLTkwMHxGMTYwfEYxODBLfEYxODBMfEYxODBTfDczMHw4NTV8TDE2MHxMUzc0MHxMUzg0MHxMUzk3MHxMVTYyMDB8TVM2OTB8TVM2OTV8TVM3NzB8TVM4NDB8TVM4NzB8TVM5MTB8UDUwMHxQNzAwfFA3MDV8Vk02OTZ8QVM2ODB8QVM2OTV8QVg4NDB8QzcyOXxFOTcwfEdTNTA1fDI3MnxDMzk1fEU3MzlCS3xFOTYwfEw1NUN8TDc1Q3xMUzY5NnxMUzg2MHxQNzY5Qkt8UDM1MHxQNTAwfFA1MDl8UDg3MHxVTjI3MnxVUzczMHxWUzg0MHxWUzk1MHxMTjI3MnxMTjUxMHxMUzY3MHxMUzg1NXxMVzY5MHxNTjI3MHxNTjUxMHxQNTA5fFA3Njl8UDkzMHxVTjIwMHxVTjI3MHxVTjUxMHxVTjYxMHxVUzY3MHxVUzc0MHxVUzc2MHxVWDI2NXxVWDg0MHxWTjI3MXxWTjUzMHxWUzY2MHxWUzcwMHxWUzc0MHxWUzc1MHxWUzkxMHxWUzkyMHxWUzkzMHxWWDkyMDB8VlgxMTAwMHxBWDg0MEF8TFc3NzB8UDUwNnxQOTI1fFA5OTl8RTYxMnxEOTU1fEQ4MDJ8TVMzMjN8TTI1Nyl8TE0tRzcxMFwiLFxuICAgICAgICBcIlNvbnlcIjogXCJTb255U1R8U29ueUxUfFNvbnlFcmljc3NvbnxTb255RXJpY3Nzb25MVDE1aXZ8TFQxOGl8RTEwaXxMVDI4aHxMVDI2d3xTb255RXJpY3Nzb25NVDI3aXxDNTMwM3xDNjkwMnxDNjkwM3xDNjkwNnxDNjk0M3xEMjUzM1wiLFxuICAgICAgICBcIkFzdXNcIjogXCJBc3VzLipHYWxheHl8UGFkRm9uZS4qTW9iaWxlXCIsXG4gICAgICAgIFwiTm9raWFMdW1pYVwiOiBcIkx1bWlhIFswLTldezMsNH1cIixcbiAgICAgICAgXCJNaWNyb21heFwiOiBcIk1pY3JvbWF4LipcXFxcYihBMjEwfEE5MnxBODh8QTcyfEExMTF8QTExMFF8QTExNXxBMTE2fEExMTB8QTkwU3xBMjZ8QTUxfEEzNXxBNTR8QTI1fEEyN3xBODl8QTY4fEE2NXxBNTd8QTkwKVxcXFxiXCIsXG4gICAgICAgIFwiUGFsbVwiOiBcIlBhbG1Tb3VyY2V8UGFsbVwiLFxuICAgICAgICBcIlZlcnR1XCI6IFwiVmVydHV8VmVydHUuKkx0ZHxWZXJ0dS4qQXNjZW50fFZlcnR1LipBeXh0YXxWZXJ0dS4qQ29uc3RlbGxhdGlvbihGfFF1ZXN0KT98VmVydHUuKk1vbmlrYXxWZXJ0dS4qU2lnbmF0dXJlXCIsXG4gICAgICAgIFwiUGFudGVjaFwiOiBcIlBBTlRFQ0h8SU0tQTg1MFN8SU0tQTg0MFN8SU0tQTgzMEx8SU0tQTgzMEt8SU0tQTgzMFN8SU0tQTgyMEx8SU0tQTgxMEt8SU0tQTgxMFN8SU0tQTgwMFN8SU0tVDEwMEt8SU0tQTcyNUx8SU0tQTc4MEx8SU0tQTc3NUN8SU0tQTc3MEt8SU0tQTc2MFN8SU0tQTc1MEt8SU0tQTc0MFN8SU0tQTczMFN8SU0tQTcyMEx8SU0tQTcxMEt8SU0tQTY5MEx8SU0tQTY5MFN8SU0tQTY1MFN8SU0tQTYzMEt8SU0tQTYwMFN8VkVHQSBQVEwyMXxQVDAwM3xQODAxMHxBRFI5MTBMfFA2MDMwfFA2MDIwfFA5MDcwfFA0MTAwfFA5MDYwfFA1MDAwfENETTg5OTJ8VFhUODA0NXxBRFI4OTk1fElTMTFQVHxQMjAzMHxQNjAxMHxQODAwMHxQVDAwMnxJUzA2fENETTg5OTl8UDkwNTB8UFQwMDF8VFhUODA0MHxQMjAyMHxQOTAyMHxQMjAwMHxQNzA0MHxQNzAwMHxDNzkwXCIsXG4gICAgICAgIFwiRmx5XCI6IFwiSVEyMzB8SVE0NDR8SVE0NTB8SVE0NDB8SVE0NDJ8SVE0NDF8SVEyNDV8SVEyNTZ8SVEyMzZ8SVEyNTV8SVEyMzV8SVEyNDV8SVEyNzV8SVEyNDB8SVEyODV8SVEyODB8SVEyNzB8SVEyNjB8SVEyNTBcIixcbiAgICAgICAgXCJXaWtvXCI6IFwiS0lURSA0R3xISUdIV0FZfEdFVEFXQVl8U1RBSVJXQVl8REFSS1NJREV8REFSS0ZVTEx8REFSS05JR0hUfERBUktNT09OfFNMSURFfFdBWCA0R3xSQUlOQk9XfEJMT09NfFNVTlNFVHxHT0EoPyFubmEpfExFTk5ZfEJBUlJZfElHR1l8T1paWXxDSU5LIEZJVkV8Q0lOSyBQRUFYfENJTksgUEVBWCAyfENJTksgU0xJTXxDSU5LIFNMSU0gMnxDSU5LICt8Q0lOSyBLSU5HfENJTksgUEVBWHxDSU5LIFNMSU18U1VCTElNXCIsXG4gICAgICAgIFwiaU1vYmlsZVwiOiBcImktbW9iaWxlIChJUXxpLVNUWUxFfGlkZWF8WkFBfEhpdHopXCIsXG4gICAgICAgIFwiU2ltVmFsbGV5XCI6IFwiXFxcXGIoU1AtODB8WFQtOTMwfFNYLTM0MHxYVC05MzB8U1gtMzEwfFNQLTM2MHxTUDYwfFNQVC04MDB8U1AtMTIwfFNQVC04MDB8U1AtMTQwfFNQWC01fFNQWC04fFNQLTEwMHxTUFgtOHxTUFgtMTIpXFxcXGJcIixcbiAgICAgICAgXCJXb2xmZ2FuZ1wiOiBcIkFULUIyNER8QVQtQVM1MEhEfEFULUFTNDBXfEFULUFTNTVIRHxBVC1BUzQ1cTJ8QVQtQjI2RHxBVC1BUzUwUVwiLFxuICAgICAgICBcIkFsY2F0ZWxcIjogXCJBbGNhdGVsXCIsXG4gICAgICAgIFwiTmludGVuZG9cIjogXCJOaW50ZW5kbyAoM0RTfFN3aXRjaClcIixcbiAgICAgICAgXCJBbW9pXCI6IFwiQW1vaVwiLFxuICAgICAgICBcIklOUVwiOiBcIklOUVwiLFxuICAgICAgICBcIk9uZVBsdXNcIjogXCJPTkVQTFVTXCIsXG4gICAgICAgIFwiR2VuZXJpY1Bob25lXCI6IFwiVGFwYXRhbGt8UERBO3xTQUdFTXxcXFxcYm1tcFxcXFxifHBvY2tldHxcXFxcYnBzcFxcXFxifHN5bWJpYW58U21hcnRwaG9uZXxzbWFydGZvbnx0cmVvfHVwLmJyb3dzZXJ8dXAubGlua3x2b2RhZm9uZXxcXFxcYndhcFxcXFxifG5va2lhfFNlcmllczQwfFNlcmllczYwfFM2MHxTb255RXJpY3Nzb258TjkwMHxNQVVJLipXQVAuKkJyb3dzZXJcIlxuICAgIH0sXG4gICAgXCJ0YWJsZXRzXCI6IHtcbiAgICAgICAgXCJpUGFkXCI6IFwiaVBhZHxpUGFkLipNb2JpbGVcIixcbiAgICAgICAgXCJOZXh1c1RhYmxldFwiOiBcIkFuZHJvaWQuKk5leHVzW1xcXFxzXSsoN3w5fDEwKVwiLFxuICAgICAgICBcIkdvb2dsZVRhYmxldFwiOiBcIkFuZHJvaWQuKlBpeGVsIENcIixcbiAgICAgICAgXCJTYW1zdW5nVGFibGV0XCI6IFwiU0FNU1VORy4qVGFibGV0fEdhbGF4eS4qVGFifFNDLTAxQ3xHVC1QMTAwMHxHVC1QMTAwM3xHVC1QMTAxMHxHVC1QMzEwNXxHVC1QNjIxMHxHVC1QNjgwMHxHVC1QNjgxMHxHVC1QNzEwMHxHVC1QNzMwMHxHVC1QNzMxMHxHVC1QNzUwMHxHVC1QNzUxMHxTQ0gtSTgwMHxTQ0gtSTgxNXxTQ0gtSTkwNXxTR0gtSTk1N3xTR0gtSTk4N3xTR0gtVDg0OXxTR0gtVDg1OXxTR0gtVDg2OXxTUEgtUDEwMHxHVC1QMzEwMHxHVC1QMzEwOHxHVC1QMzExMHxHVC1QNTEwMHxHVC1QNTExMHxHVC1QNjIwMHxHVC1QNzMyMHxHVC1QNzUxMXxHVC1OODAwMHxHVC1QODUxMHxTR0gtSTQ5N3xTUEgtUDUwMHxTR0gtVDc3OXxTQ0gtSTcwNXxTQ0gtSTkxNXxHVC1OODAxM3xHVC1QMzExM3xHVC1QNTExM3xHVC1QODExMHxHVC1OODAxMHxHVC1OODAwNXxHVC1OODAyMHxHVC1QMTAxM3xHVC1QNjIwMXxHVC1QNzUwMXxHVC1ONTEwMHxHVC1ONTEwNXxHVC1ONTExMHxTSFYtRTE0MEt8U0hWLUUxNDBMfFNIVi1FMTQwU3xTSFYtRTE1MFN8U0hWLUUyMzBLfFNIVi1FMjMwTHxTSFYtRTIzMFN8U0hXLU0xODBLfFNIVy1NMTgwTHxTSFctTTE4MFN8U0hXLU0xODBXfFNIVy1NMzAwV3xTSFctTTMwNVd8U0hXLU0zODBLfFNIVy1NMzgwU3xTSFctTTM4MFd8U0hXLU00MzBXfFNIVy1NNDgwS3xTSFctTTQ4MFN8U0hXLU00ODBXfFNIVy1NNDg1V3xTSFctTTQ4Nld8U0hXLU01MDBXfEdULUk5MjI4fFNDSC1QNzM5fFNDSC1JOTI1fEdULUk5MjAwfEdULVA1MjAwfEdULVA1MjEwfEdULVA1MjEwWHxTTS1UMzExfFNNLVQzMTB8U00tVDMxMFh8U00tVDIxMHxTTS1UMjEwUnxTTS1UMjExfFNNLVA2MDB8U00tUDYwMXxTTS1QNjA1fFNNLVA5MDB8U00tUDkwMXxTTS1UMjE3fFNNLVQyMTdBfFNNLVQyMTdTfFNNLVA2MDAwfFNNLVQzMTAwfFNHSC1JNDY3fFhFNTAwfFNNLVQxMTB8R1QtUDUyMjB8R1QtSTkyMDBYfEdULU41MTEwWHxHVC1ONTEyMHxTTS1QOTA1fFNNLVQxMTF8U00tVDIxMDV8U00tVDMxNXxTTS1UMzIwfFNNLVQzMjBYfFNNLVQzMjF8U00tVDUyMHxTTS1UNTI1fFNNLVQ1MzBOVXxTTS1UMjMwTlV8U00tVDMzME5VfFNNLVQ5MDB8WEU1MDBUMUN8U00tUDYwNVZ8U00tUDkwNVZ8U00tVDMzN1Z8U00tVDUzN1Z8U00tVDcwN1Z8U00tVDgwN1Z8U00tUDYwMFh8U00tUDkwMFh8U00tVDIxMFh8U00tVDIzMHxTTS1UMjMwWHxTTS1UMzI1fEdULVA3NTAzfFNNLVQ1MzF8U00tVDMzMHxTTS1UNTMwfFNNLVQ3MDV8U00tVDcwNUN8U00tVDUzNXxTTS1UMzMxfFNNLVQ4MDB8U00tVDcwMHxTTS1UNTM3fFNNLVQ4MDd8U00tUDkwN0F8U00tVDMzN0F8U00tVDUzN0F8U00tVDcwN0F8U00tVDgwN0F8U00tVDIzN3xTTS1UODA3UHxTTS1QNjA3VHxTTS1UMjE3VHxTTS1UMzM3VHxTTS1UODA3VHxTTS1UMTE2TlF8U00tVDExNkJVfFNNLVA1NTB8U00tVDM1MHxTTS1UNTUwfFNNLVQ5MDAwfFNNLVA5MDAwfFNNLVQ3MDVZfFNNLVQ4MDV8R1QtUDMxMTN8U00tVDcxMHxTTS1UODEwfFNNLVQ4MTV8U00tVDM2MHxTTS1UNTMzfFNNLVQxMTN8U00tVDMzNXxTTS1UNzE1fFNNLVQ1NjB8U00tVDY3MHxTTS1UNjc3fFNNLVQzNzd8U00tVDU2N3xTTS1UMzU3VHxTTS1UNTU1fFNNLVQ1NjF8U00tVDcxM3xTTS1UNzE5fFNNLVQ4MTN8U00tVDgxOXxTTS1UNTgwfFNNLVQzNTVZP3xTTS1UMjgwfFNNLVQ4MTdBfFNNLVQ4MjB8U00tVzcwMHxTTS1QNTgwfFNNLVQ1ODd8U00tUDM1MHxTTS1QNTU1TXxTTS1QMzU1TXxTTS1UMTEzTlV8U00tVDgxNVl8U00tVDU4NXxTTS1UMjg1fFNNLVQ4MjV8U00tVzcwOHxTTS1UODM1fFNNLVQ4MzB8U00tVDgzN1Z8U00tVDcyMHxTTS1UNTEwfFNNLVQzODdWXCIsXG4gICAgICAgIFwiS2luZGxlXCI6IFwiS2luZGxlfFNpbGsuKkFjY2VsZXJhdGVkfEFuZHJvaWQuKlxcXFxiKEtGT1R8S0ZUVHxLRkpXSXxLRkpXQXxLRk9URXxLRlNPV0l8S0ZUSFdJfEtGVEhXQXxLRkFQV0l8S0ZBUFdBfFdGSldBRXxLRlNBV0F8S0ZTQVdJfEtGQVNXSXxLRkFSV0l8S0ZGT1dJfEtGR0lXSXxLRk1FV0kpXFxcXGJ8QW5kcm9pZC4qU2lsa1xcL1swLTkuXSsgbGlrZSBDaHJvbWVcXC9bMC05Ll0rICg/IU1vYmlsZSlcIixcbiAgICAgICAgXCJTdXJmYWNlVGFibGV0XCI6IFwiV2luZG93cyBOVCBbMC05Ll0rOyBBUk07LiooVGFibGV0fEFSTUJKUylcIixcbiAgICAgICAgXCJIUFRhYmxldFwiOiBcIkhQIFNsYXRlICg3fDh8MTApfEhQIEVsaXRlUGFkIDkwMHxocC10YWJsZXR8RWxpdGVCb29rLipUb3VjaHxIUCA4fFNsYXRlIDIxfEhQIFNsYXRlQm9vayAxMFwiLFxuICAgICAgICBcIkFzdXNUYWJsZXRcIjogXCJeLipQYWRGb25lKCg/IU1vYmlsZSkuKSokfFRyYW5zZm9ybWVyfFRGMTAxfFRGMTAxR3xURjMwMFR8VEYzMDBUR3xURjMwMFRMfFRGNzAwVHxURjcwMEtMfFRGNzAxVHxURjgxMEN8TUUxNzF8TUUzMDFUfE1FMzAyQ3xNRTM3MU1HfE1FMzcwVHxNRTM3Mk1HfE1FMTcyVnxNRTE3M1h8TUU0MDBDfFNsaWRlciBTTDEwMXxcXFxcYkswMEZcXFxcYnxcXFxcYkswMENcXFxcYnxcXFxcYkswMEVcXFxcYnxcXFxcYkswMExcXFxcYnxUWDIwMUxBfE1FMTc2Q3xNRTEwMkF8XFxcXGJNODBUQVxcXFxifE1FMzcyQ0x8TUU1NjBDR3xNRTM3MkNHfE1FMzAyS0x8IEswMTAgfCBLMDExIHwgSzAxNyB8IEswMUUgfE1FNTcyQ3xNRTEwM0t8TUUxNzBDfE1FMTcxQ3xcXFxcYk1FNzBDXFxcXGJ8TUU1ODFDfE1FNTgxQ0x8TUU4NTEwQ3xNRTE4MUN8UDAxWXxQTzFNQXxQMDFafFxcXFxiUDAyN1xcXFxifFxcXFxiUDAyNFxcXFxifFxcXFxiUDAwQ1xcXFxiXCIsXG4gICAgICAgIFwiQmxhY2tCZXJyeVRhYmxldFwiOiBcIlBsYXlCb29rfFJJTSBUYWJsZXRcIixcbiAgICAgICAgXCJIVEN0YWJsZXRcIjogXCJIVENfRmx5ZXJfUDUxMnxIVEMgRmx5ZXJ8SFRDIEpldHN0cmVhbXxIVEMtUDcxNWF8SFRDIEVWTyBWaWV3IDRHfFBHNDEyMDB8UEcwOTQxMFwiLFxuICAgICAgICBcIk1vdG9yb2xhVGFibGV0XCI6IFwieG9vbXxzaG9sZXN0fE1aNjE1fE1aNjA1fE1aNTA1fE1aNjAxfE1aNjAyfE1aNjAzfE1aNjA0fE1aNjA2fE1aNjA3fE1aNjA4fE1aNjA5fE1aNjE1fE1aNjE2fE1aNjE3XCIsXG4gICAgICAgIFwiTm9va1RhYmxldFwiOiBcIkFuZHJvaWQuKk5vb2t8Tm9va0NvbG9yfG5vb2sgYnJvd3NlcnxCTlJWMjAwfEJOUlYyMDBBfEJOVFYyNTB8Qk5UVjI1MEF8Qk5UVjQwMHxCTlRWNjAwfExvZ2ljUEQgWm9vbTJcIixcbiAgICAgICAgXCJBY2VyVGFibGV0XCI6IFwiQW5kcm9pZC4qOyBcXFxcYihBMTAwfEExMDF8QTExMHxBMjAwfEEyMTB8QTIxMXxBNTAwfEE1MDF8QTUxMHxBNTExfEE3MDB8QTcwMXxXNTAwfFc1MDBQfFc1MDF8VzUwMVB8VzUxMHxXNTExfFc3MDB8RzEwMHxHMTAwV3xCMS1BNzF8QjEtNzEwfEIxLTcxMXxBMS04MTB8QTEtODExfEExLTgzMClcXFxcYnxXMy04MTB8XFxcXGJBMy1BMTBcXFxcYnxcXFxcYkEzLUExMVxcXFxifFxcXFxiQTMtQTIwXFxcXGJ8XFxcXGJBMy1BMzBcIixcbiAgICAgICAgXCJUb3NoaWJhVGFibGV0XCI6IFwiQW5kcm9pZC4qKEFUMTAwfEFUMTA1fEFUMjAwfEFUMjA1fEFUMjcwfEFUMjc1fEFUMzAwfEFUMzA1fEFUMVM1fEFUNTAwfEFUNTcwfEFUNzAwfEFUODMwKXxUT1NISUJBLipGT0xJT1wiLFxuICAgICAgICBcIkxHVGFibGV0XCI6IFwiXFxcXGJMLTA2Q3xMRy1WOTA5fExHLVY5MDB8TEctVjcwMHxMRy1WNTEwfExHLVY1MDB8TEctVjQxMHxMRy1WNDAwfExHLVZLODEwXFxcXGJcIixcbiAgICAgICAgXCJGdWppdHN1VGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoRi0wMUR8Ri0wMkZ8Ri0wNUV8Ri0xMER8TTUzMnxRNTcyKVxcXFxiXCIsXG4gICAgICAgIFwiUHJlc3RpZ2lvVGFibGV0XCI6IFwiUE1QMzE3MEJ8UE1QMzI3MEJ8UE1QMzQ3MEJ8UE1QNzE3MEJ8UE1QMzM3MEJ8UE1QMzU3MEN8UE1QNTg3MEN8UE1QMzY3MEJ8UE1QNTU3MEN8UE1QNTc3MER8UE1QMzk3MEJ8UE1QMzg3MEN8UE1QNTU4MEN8UE1QNTg4MER8UE1QNTc4MER8UE1QNTU4OEN8UE1QNzI4MEN8UE1QNzI4MEMzR3xQTVA3MjgwfFBNUDc4ODBEfFBNUDU1OTdEfFBNUDU1OTd8UE1QNzEwMER8UEVSMzQ2NHxQRVIzMjc0fFBFUjM1NzR8UEVSMzg4NHxQRVI1Mjc0fFBFUjU0NzR8UE1QNTA5N0NQUk98UE1QNTA5N3xQTVA3MzgwRHxQTVA1Mjk3Q3xQTVA1Mjk3Q19RVUFEfFBNUDgxMkV8UE1QODEyRTNHfFBNUDgxMkZ8UE1QODEwRXxQTVA4ODBURHxQTVQzMDE3fFBNVDMwMzd8UE1UMzA0N3xQTVQzMDU3fFBNVDcwMDh8UE1UNTg4N3xQTVQ1MDAxfFBNVDUwMDJcIixcbiAgICAgICAgXCJMZW5vdm9UYWJsZXRcIjogXCJMZW5vdm8gVEFCfElkZWEoVGFifFBhZCkoIEExfEExMHwgSzF8KXxUaGlua1BhZChbIF0rKT9UYWJsZXR8WVQzLTg1ME18WVQzLVg5MEx8WVQzLVg5MEZ8WVQzLVg5MFh8TGVub3ZvLiooUzIxMDl8UzIxMTB8UzUwMDB8UzYwMDB8SzMwMTF8QTMwMDB8QTM1MDB8QTEwMDB8QTIxMDd8QTIxMDl8QTExMDd8QTU1MDB8QTc2MDB8QjYwMDB8QjgwMDB8QjgwODApKC18KShGTHxGfEhWfEh8KXxUQi1YMTAzRnxUQi1YMzA0WHxUQi1YMzA0RnxUQi1YMzA0THxUQi1YNTA1RnxUQi1YNTA1THxUQi1YNTA1WHxUQi1YNjA1RnxUQi1YNjA1THxUQi04NzAzRnxUQi04NzAzWHxUQi04NzAzTnxUQi04NzA0TnxUQi04NzA0RnxUQi04NzA0WHxUQi04NzA0VnxUQi03MzA0RnxUQi03MzA0SXxUQi03MzA0WHxUYWIyQTctMTBGfFRhYjJBNy0yMEZ8VEIyLVgzMEx8WVQzLVg1MEx8WVQzLVg1MEZ8WVQzLVg1ME18WVQtWDcwNUZ8WVQtWDcwM0Z8WVQtWDcwM0x8WVQtWDcwNUx8WVQtWDcwNVh8VEIyLVgzMEZ8VEIyLVgzMEx8VEIyLVgzME18QTIxMDdBLUZ8QTIxMDdBLUh8VEIzLTczMEZ8VEIzLTczME18VEIzLTczMFh8VEItNzUwNEZ8VEItNzUwNFhcIixcbiAgICAgICAgXCJEZWxsVGFibGV0XCI6IFwiVmVudWUgMTF8VmVudWUgOHxWZW51ZSA3fERlbGwgU3RyZWFrIDEwfERlbGwgU3RyZWFrIDdcIixcbiAgICAgICAgXCJZYXJ2aWtUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYihUQUIyMTB8VEFCMjExfFRBQjIyNHxUQUIyNTB8VEFCMjYwfFRBQjI2NHxUQUIzMTB8VEFCMzYwfFRBQjM2NHxUQUI0MTB8VEFCNDExfFRBQjQyMHxUQUI0MjR8VEFCNDUwfFRBQjQ2MHxUQUI0NjF8VEFCNDY0fFRBQjQ2NXxUQUI0Njd8VEFCNDY4fFRBQjA3LTEwMHxUQUIwNy0xMDF8VEFCMDctMTUwfFRBQjA3LTE1MXxUQUIwNy0xNTJ8VEFCMDctMjAwfFRBQjA3LTIwMS0zR3xUQUIwNy0yMTB8VEFCMDctMjExfFRBQjA3LTIxMnxUQUIwNy0yMTR8VEFCMDctMjIwfFRBQjA3LTQwMHxUQUIwNy00ODV8VEFCMDgtMTUwfFRBQjA4LTIwMHxUQUIwOC0yMDEtM0d8VEFCMDgtMjAxLTMwfFRBQjA5LTEwMHxUQUIwOS0yMTF8VEFCMDktNDEwfFRBQjEwLTE1MHxUQUIxMC0yMDF8VEFCMTAtMjExfFRBQjEwLTQwMHxUQUIxMC00MTB8VEFCMTMtMjAxfFRBQjI3NEVVS3xUQUIyNzVFVUt8VEFCMzc0RVVLfFRBQjQ2MkVVS3xUQUI0NzRFVUt8VEFCOS0yMDApXFxcXGJcIixcbiAgICAgICAgXCJNZWRpb25UYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYk9ZT1xcXFxifExJRkUuKihQOTIxMnxQOTUxNHxQOTUxNnxTOTUxMil8TElGRVRBQlwiLFxuICAgICAgICBcIkFybm92YVRhYmxldFwiOiBcIjk3RzR8QU4xMEcyfEFON2JHM3xBTjdmRzN8QU44RzN8QU44Y0czfEFON0czfEFOOUczfEFON2RHM3xBTjdkRzNTVHxBTjdkRzNDaGlsZFBhZHxBTjEwYkczfEFOMTBiRzNEVHxBTjlHMlwiLFxuICAgICAgICBcIkludGVuc29UYWJsZXRcIjogXCJJTk04MDAyS1B8SU5NMTAxMEZQfElOTTgwNU5EfEludGVuc28gVGFifFRBQjEwMDRcIixcbiAgICAgICAgXCJJUlVUYWJsZXRcIjogXCJNNzAycHJvXCIsXG4gICAgICAgIFwiTWVnYWZvblRhYmxldFwiOiBcIk1lZ2FGb24gVjl8XFxcXGJaVEUgVjlcXFxcYnxBbmRyb2lkLipcXFxcYk1UN0FcXFxcYlwiLFxuICAgICAgICBcIkVib2RhVGFibGV0XCI6IFwiRS1Cb2RhIChTdXByZW1lfEltcHJlc3NwZWVkfEl6enljb21tfEVzc2VudGlhbClcIixcbiAgICAgICAgXCJBbGxWaWV3VGFibGV0XCI6IFwiQWxsdmlldy4qKFZpdmF8QWxsZHJvfENpdHl8U3BlZWR8QWxsIFRWfEZyZW56eXxRdWFzYXJ8U2hpbmV8VFgxfEFYMXxBWDIpXCIsXG4gICAgICAgIFwiQXJjaG9zVGFibGV0XCI6IFwiXFxcXGIoMTAxRzl8ODBHOXxBMTAxSVQpXFxcXGJ8UWlsaXZlIDk3UnxBcmNob3M1fFxcXFxiQVJDSE9TICg3MHw3OXw4MHw5MHw5N3wxMDF8RkFNSUxZUEFEfCkoYnxjfCkoRzEwfCBDb2JhbHR8IFRJVEFOSVVNKEhEfCl8IFhlbm9ufCBOZW9ufFhTS3wgMnwgWFMgMnwgUExBVElOVU18IENBUkJPTnxHQU1FUEFEKVxcXFxiXCIsXG4gICAgICAgIFwiQWlub2xUYWJsZXRcIjogXCJOT1ZPN3xOT1ZPOHxOT1ZPMTB8Tm92bzdBdXJvcmF8Tm92bzdCYXNpY3xOT1ZPN1BBTEFESU58bm92bzktU3BhcmtcIixcbiAgICAgICAgXCJOb2tpYUx1bWlhVGFibGV0XCI6IFwiTHVtaWEgMjUyMFwiLFxuICAgICAgICBcIlNvbnlUYWJsZXRcIjogXCJTb255LipUYWJsZXR8WHBlcmlhIFRhYmxldHxTb255IFRhYmxldCBTfFNPLTAzRXxTR1BUMTJ8U0dQVDEzfFNHUFQxMTR8U0dQVDEyMXxTR1BUMTIyfFNHUFQxMjN8U0dQVDExMXxTR1BUMTEyfFNHUFQxMTN8U0dQVDEzMXxTR1BUMTMyfFNHUFQxMzN8U0dQVDIxMXxTR1BUMjEyfFNHUFQyMTN8U0dQMzExfFNHUDMxMnxTR1AzMjF8RUJSRDExMDF8RUJSRDExMDJ8RUJSRDEyMDF8U0dQMzUxfFNHUDM0MXxTR1A1MTF8U0dQNTEyfFNHUDUyMXxTR1A1NDF8U0dQNTUxfFNHUDYyMXxTR1A2NDF8U0dQNjEyfFNPVDMxfFNHUDc3MXxTR1A2MTF8U0dQNjEyfFNHUDcxMlwiLFxuICAgICAgICBcIlBoaWxpcHNUYWJsZXRcIjogXCJcXFxcYihQSTIwMTB8UEkzMDAwfFBJMzEwMHxQSTMxMDV8UEkzMTEwfFBJMzIwNXxQSTMyMTB8UEkzOTAwfFBJNDAxMHxQSTcwMDB8UEk3MTAwKVxcXFxiXCIsXG4gICAgICAgIFwiQ3ViZVRhYmxldFwiOiBcIkFuZHJvaWQuKihLOEdUfFU5R1R8VTEwR1R8VTE2R1R8VTE3R1R8VTE4R1R8VTE5R1R8VTIwR1R8VTIzR1R8VTMwR1QpfENVQkUgVThHVFwiLFxuICAgICAgICBcIkNvYnlUYWJsZXRcIjogXCJNSUQxMDQyfE1JRDEwNDV8TUlEMTEyNXxNSUQxMTI2fE1JRDcwMTJ8TUlENzAxNHxNSUQ3MDE1fE1JRDcwMzR8TUlENzAzNXxNSUQ3MDM2fE1JRDcwNDJ8TUlENzA0OHxNSUQ3MTI3fE1JRDgwNDJ8TUlEODA0OHxNSUQ4MTI3fE1JRDkwNDJ8TUlEOTc0MHxNSUQ5NzQyfE1JRDcwMjJ8TUlENzAxMFwiLFxuICAgICAgICBcIk1JRFRhYmxldFwiOiBcIk05NzAxfE05MDAwfE05MTAwfE04MDZ8TTEwNTJ8TTgwNnxUNzAzfE1JRDcwMXxNSUQ3MTN8TUlENzEwfE1JRDcyN3xNSUQ3NjB8TUlEODMwfE1JRDcyOHxNSUQ5MzN8TUlEMTI1fE1JRDgxMHxNSUQ3MzJ8TUlEMTIwfE1JRDkzMHxNSUQ4MDB8TUlENzMxfE1JRDkwMHxNSUQxMDB8TUlEODIwfE1JRDczNXxNSUQ5ODB8TUlEMTMwfE1JRDgzM3xNSUQ3Mzd8TUlEOTYwfE1JRDEzNXxNSUQ4NjB8TUlENzM2fE1JRDE0MHxNSUQ5MzB8TUlEODM1fE1JRDczM3xNSUQ0WDEwXCIsXG4gICAgICAgIFwiTVNJVGFibGV0XCI6IFwiTVNJIFxcXFxiKFByaW1vIDczS3xQcmltbyA3M0x8UHJpbW8gODFMfFByaW1vIDc3fFByaW1vIDkzfFByaW1vIDc1fFByaW1vIDc2fFByaW1vIDczfFByaW1vIDgxfFByaW1vIDkxfFByaW1vIDkwfEVuam95IDcxfEVuam95IDd8RW5qb3kgMTApXFxcXGJcIixcbiAgICAgICAgXCJTTWlUVGFibGV0XCI6IFwiQW5kcm9pZC4qKFxcXFxiTUlEXFxcXGJ8TUlELTU2MHxNVFYtVDEyMDB8TVRWLVBORDUzMXxNVFYtUDExMDF8TVRWLVBORDUzMClcIixcbiAgICAgICAgXCJSb2NrQ2hpcFRhYmxldFwiOiBcIkFuZHJvaWQuKihSSzI4MTh8UksyODA4QXxSSzI5MTh8UkszMDY2KXxSSzI3Mzh8UksyODA4QVwiLFxuICAgICAgICBcIkZseVRhYmxldFwiOiBcIklRMzEwfEZseSBWaXNpb25cIixcbiAgICAgICAgXCJicVRhYmxldFwiOiBcIkFuZHJvaWQuKihicSk/LipcXFxcYihFbGNhbm98Q3VyaWV8RWRpc29ufE1heHdlbGx8S2VwbGVyfFBhc2NhbHxUZXNsYXxIeXBhdGlhfFBsYXRvbnxOZXd0b258TGl2aW5nc3RvbmV8Q2VydmFudGVzfEF2YW50fEFxdWFyaXMgKFtFfE1dMTB8TTgpKVxcXFxifE1heHdlbGwuKkxpdGV8TWF4d2VsbC4qUGx1c1wiLFxuICAgICAgICBcIkh1YXdlaVRhYmxldFwiOiBcIk1lZGlhUGFkfE1lZGlhUGFkIDcgWW91dGh8SURFT1MgUzd8UzctMjAxY3xTNy0yMDJ1fFM3LTEwMXxTNy0xMDN8UzctMTA0fFM3LTEwNXxTNy0xMDZ8UzctMjAxfFM3LVNsaW18TTItQTAxTHxCQUgtTDA5fEJBSC1XMDl8QUdTLUwwOXxDTVItQUwxOVwiLFxuICAgICAgICBcIk5lY1RhYmxldFwiOiBcIlxcXFxiTi0wNkR8XFxcXGJOLTA4RFwiLFxuICAgICAgICBcIlBhbnRlY2hUYWJsZXRcIjogXCJQYW50ZWNoLipQNDEwMFwiLFxuICAgICAgICBcIkJyb25jaG9UYWJsZXRcIjogXCJCcm9uY2hvLiooTjcwMXxONzA4fE44MDJ8YTcxMClcIixcbiAgICAgICAgXCJWZXJzdXNUYWJsZXRcIjogXCJUT1VDSFBBRC4qWzc4OTEwXXxcXFxcYlRPVUNIVEFCXFxcXGJcIixcbiAgICAgICAgXCJaeW5jVGFibGV0XCI6IFwiejEwMDB8Wjk5IDJHfHo5MzB8ejk5MHx6OTA5fFo5MTl8ejkwMFwiLFxuICAgICAgICBcIlBvc2l0aXZvVGFibGV0XCI6IFwiVEIwN1NUQXxUQjEwU1RBfFRCMDdGVEF8VEIxMEZUQVwiLFxuICAgICAgICBcIk5hYmlUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYk5hYmlcIixcbiAgICAgICAgXCJLb2JvVGFibGV0XCI6IFwiS29ibyBUb3VjaHxcXFxcYkswODBcXFxcYnxcXFxcYlZveFxcXFxiIEJ1aWxkfFxcXFxiQXJjXFxcXGIgQnVpbGRcIixcbiAgICAgICAgXCJEYW5ld1RhYmxldFwiOiBcIkRTbGlkZS4qXFxcXGIoNzAwfDcwMVJ8NzAyfDcwM1J8NzA0fDgwMnw5NzB8OTcxfDk3Mnw5NzN8OTc0fDEwMTB8MTAxMilcXFxcYlwiLFxuICAgICAgICBcIlRleGV0VGFibGV0XCI6IFwiTmF2aVBhZHxUQi03NzJBfFRNLTcwNDV8VE0tNzA1NXxUTS05NzUwfFRNLTcwMTZ8VE0tNzAyNHxUTS03MDI2fFRNLTcwNDF8VE0tNzA0M3xUTS03MDQ3fFRNLTgwNDF8VE0tOTc0MXxUTS05NzQ3fFRNLTk3NDh8VE0tOTc1MXxUTS03MDIyfFRNLTcwMjF8VE0tNzAyMHxUTS03MDExfFRNLTcwMTB8VE0tNzAyM3xUTS03MDI1fFRNLTcwMzdXfFRNLTcwMzhXfFRNLTcwMjdXfFRNLTk3MjB8VE0tOTcyNXxUTS05NzM3V3xUTS0xMDIwfFRNLTk3MzhXfFRNLTk3NDB8VE0tOTc0M1d8VEItODA3QXxUQi03NzFBfFRCLTcyN0F8VEItNzI1QXxUQi03MTlBfFRCLTgyM0F8VEItODA1QXxUQi03MjNBfFRCLTcxNUF8VEItNzA3QXxUQi03MDVBfFRCLTcwOUF8VEItNzExQXxUQi04OTBIRHxUQi04ODBIRHxUQi03OTBIRHxUQi03ODBIRHxUQi03NzBIRHxUQi03MjFIRHxUQi03MTBIRHxUQi00MzRIRHxUQi04NjBIRHxUQi04NDBIRHxUQi03NjBIRHxUQi03NTBIRHxUQi03NDBIRHxUQi03MzBIRHxUQi03MjJIRHxUQi03MjBIRHxUQi03MDBIRHxUQi01MDBIRHxUQi00NzBIRHxUQi00MzFIRHxUQi00MzBIRHxUQi01MDZ8VEItNTA0fFRCLTQ0NnxUQi00MzZ8VEItNDE2fFRCLTE0NlNFfFRCLTEyNlNFXCIsXG4gICAgICAgIFwiUGxheXN0YXRpb25UYWJsZXRcIjogXCJQbGF5c3RhdGlvbi4qKFBvcnRhYmxlfFZpdGEpXCIsXG4gICAgICAgIFwiVHJla3N0b3JUYWJsZXRcIjogXCJTVDEwNDE2LTF8VlQxMDQxNi0xfFNUNzA0MDgtMXxTVDcwMnh4LTF8U1Q3MDJ4eC0yfFNUODAyMDh8U1Q5NzIxNnxTVDcwMTA0LTJ8VlQxMDQxNi0yfFNUMTAyMTYtMkF8U3VyZlRhYlwiLFxuICAgICAgICBcIlB5bGVBdWRpb1RhYmxldFwiOiBcIlxcXFxiKFBUQkwxMENFVXxQVEJMMTBDfFBUQkw3MkJDfFBUQkw3MkJDRVV8UFRCTDdDRVV8UFRCTDdDfFBUQkw5MkJDfFBUQkw5MkJDRVV8UFRCTDlDRVV8UFRCTDlDVUt8UFRCTDlDKVxcXFxiXCIsXG4gICAgICAgIFwiQWR2YW5UYWJsZXRcIjogXCJBbmRyb2lkLiogXFxcXGIoRTNBfFQzWHxUNUN8VDVCfFQzRXxUM0N8VDNCfFQxSnxUMUZ8VDJBfFQxSHxUMWl8RTFDfFQxLUV8VDUtQXxUNHxFMS1CfFQyQ2l8VDEtQnxUMS1EfE8xLUF8RTEtQXxUMS1BfFQzQXxUNGkpXFxcXGIgXCIsXG4gICAgICAgIFwiRGFueVRlY2hUYWJsZXRcIjogXCJHZW5pdXMgVGFiIEczfEdlbml1cyBUYWIgUzJ8R2VuaXVzIFRhYiBRM3xHZW5pdXMgVGFiIEc0fEdlbml1cyBUYWIgUTR8R2VuaXVzIFRhYiBHLUlJfEdlbml1cyBUQUIgR0lJfEdlbml1cyBUQUIgR0lJSXxHZW5pdXMgVGFiIFMxXCIsXG4gICAgICAgIFwiR2FsYXBhZFRhYmxldFwiOiBcIkFuZHJvaWQuKlxcXFxiRzFcXFxcYig/IVxcXFwpKVwiLFxuICAgICAgICBcIk1pY3JvbWF4VGFibGV0XCI6IFwiRnVuYm9va3xNaWNyb21heC4qXFxcXGIoUDI1MHxQNTYwfFAzNjB8UDM2MnxQNjAwfFAzMDB8UDM1MHxQNTAwfFAyNzUpXFxcXGJcIixcbiAgICAgICAgXCJLYXJib25uVGFibGV0XCI6IFwiQW5kcm9pZC4qXFxcXGIoQTM5fEEzN3xBMzR8U1Q4fFNUMTB8U1Q3fFNtYXJ0IFRhYjN8U21hcnQgVGFiMilcXFxcYlwiLFxuICAgICAgICBcIkFsbEZpbmVUYWJsZXRcIjogXCJGaW5lNyBHZW5pdXN8RmluZTcgU2hpbmV8RmluZTcgQWlyfEZpbmU4IFN0eWxlfEZpbmU5IE1vcmV8RmluZTEwIEpveXxGaW5lMTEgV2lkZVwiLFxuICAgICAgICBcIlBST1NDQU5UYWJsZXRcIjogXCJcXFxcYihQRU02M3xQTFQxMDIzR3xQTFQxMDQxfFBMVDEwNDR8UExUMTA0NEd8UExUMTA5MXxQTFQ0MzExfFBMVDQzMTFQTHxQTFQ0MzE1fFBMVDcwMzB8UExUNzAzM3xQTFQ3MDMzRHxQTFQ3MDM1fFBMVDcwMzVEfFBMVDcwNDRLfFBMVDcwNDVLfFBMVDcwNDVLQnxQTFQ3MDcxS0d8UExUNzA3MnxQTFQ3MjIzR3xQTFQ3MjI1R3xQTFQ3Nzc3R3xQTFQ3ODEwS3xQTFQ3ODQ5R3xQTFQ3ODUxR3xQTFQ3ODUyR3xQTFQ4MDE1fFBMVDgwMzF8UExUODAzNHxQTFQ4MDM2fFBMVDgwODBLfFBMVDgwODJ8UExUODA4OHxQTFQ4MjIzR3xQTFQ4MjM0R3xQTFQ4MjM1R3xQTFQ4ODE2S3xQTFQ5MDExfFBMVDkwNDVLfFBMVDkyMzNHfFBMVDk3MzV8UExUOTc2MEd8UExUOTc3MEcpXFxcXGJcIixcbiAgICAgICAgXCJZT05FU1RhYmxldFwiOiBcIkJRMTA3OHxCQzEwMDN8QkMxMDc3fFJLOTcwMnxCQzk3MzB8QkM5MDAxfElUOTAwMXxCQzcwMDh8QkM3MDEwfEJDNzA4fEJDNzI4fEJDNzAxMnxCQzcwMzB8QkM3MDI3fEJDNzAyNlwiLFxuICAgICAgICBcIkNoYW5nSmlhVGFibGV0XCI6IFwiVFBDNzEwMnxUUEM3MTAzfFRQQzcxMDV8VFBDNzEwNnxUUEM3MTA3fFRQQzcyMDF8VFBDNzIwM3xUUEM3MjA1fFRQQzcyMTB8VFBDNzcwOHxUUEM3NzA5fFRQQzc3MTJ8VFBDNzExMHxUUEM4MTAxfFRQQzgxMDN8VFBDODEwNXxUUEM4MTA2fFRQQzgyMDN8VFBDODIwNXxUUEM4NTAzfFRQQzkxMDZ8VFBDOTcwMXxUUEM5NzEwMXxUUEM5NzEwM3xUUEM5NzEwNXxUUEM5NzEwNnxUUEM5NzExMXxUUEM5NzExM3xUUEM5NzIwM3xUUEM5NzYwM3xUUEM5NzgwOXxUUEM5NzIwNXxUUEMxMDEwMXxUUEMxMDEwM3xUUEMxMDEwNnxUUEMxMDExMXxUUEMxMDIwM3xUUEMxMDIwNXxUUEMxMDUwM1wiLFxuICAgICAgICBcIkdVVGFibGV0XCI6IFwiVFgtQTEzMDF8VFgtTTkwMDJ8UTcwMnxrZjAyNlwiLFxuICAgICAgICBcIlBvaW50T2ZWaWV3VGFibGV0XCI6IFwiVEFCLVA1MDZ8VEFCLW5hdmktNy0zRy1NfFRBQi1QNTE3fFRBQi1QLTUyN3xUQUItUDcwMXxUQUItUDcwM3xUQUItUDcyMXxUQUItUDczMU58VEFCLVA3NDF8VEFCLVA4MjV8VEFCLVA5MDV8VEFCLVA5MjV8VEFCLVBSOTQ1fFRBQi1QTDEwMTV8VEFCLVAxMDI1fFRBQi1QSTEwNDV8VEFCLVAxMzI1fFRBQi1QUk9UQUJbMC05XSt8VEFCLVBST1RBQjI1fFRBQi1QUk9UQUIyNnxUQUItUFJPVEFCMjd8VEFCLVBST1RBQjI2WEx8VEFCLVBST1RBQjItSVBTOXxUQUItUFJPVEFCMzAtSVBTOXxUQUItUFJPVEFCMjVYWEx8VEFCLVBST1RBQjI2LUlQUzEwfFRBQi1QUk9UQUIzMC1JUFMxMFwiLFxuICAgICAgICBcIk92ZXJtYXhUYWJsZXRcIjogXCJPVi0oU3RlZWxDb3JlfE5ld0Jhc2V8QmFzZWNvcmV8QmFzZW9uZXxFeGVsbGVufFF1YXR0b3J8RWR1VGFifFNvbHV0aW9ufEFDVElPTnxCYXNpY1RhYnxUZWRkeVRhYnxNYWdpY1RhYnxTdHJlYW18VEItMDh8VEItMDkpfFF1YWxjb3JlIDEwMjdcIixcbiAgICAgICAgXCJIQ0xUYWJsZXRcIjogXCJIQ0wuKlRhYmxldHxDb25uZWN0LTNHLTIuMHxDb25uZWN0LTJHLTIuMHxNRSBUYWJsZXQgVTF8TUUgVGFibGV0IFUyfE1FIFRhYmxldCBHMXxNRSBUYWJsZXQgWDF8TUUgVGFibGV0IFkyfE1FIFRhYmxldCBTeW5jXCIsXG4gICAgICAgIFwiRFBTVGFibGV0XCI6IFwiRFBTIERyZWFtIDl8RFBTIER1YWwgN1wiLFxuICAgICAgICBcIlZpc3R1cmVUYWJsZXRcIjogXCJWOTcgSER8aTc1IDNHfFZpc3R1cmUgVjQoIEhEKT98VmlzdHVyZSBWNSggSEQpP3xWaXN0dXJlIFYxMFwiLFxuICAgICAgICBcIkNyZXN0YVRhYmxldFwiOiBcIkNUUCgtKT84MTB8Q1RQKC0pPzgxOHxDVFAoLSk/ODI4fENUUCgtKT84Mzh8Q1RQKC0pPzg4OHxDVFAoLSk/OTc4fENUUCgtKT85ODB8Q1RQKC0pPzk4N3xDVFAoLSk/OTg4fENUUCgtKT85ODlcIixcbiAgICAgICAgXCJNZWRpYXRla1RhYmxldFwiOiBcIlxcXFxiTVQ4MTI1fE1UODM4OXxNVDgxMzV8TVQ4Mzc3XFxcXGJcIixcbiAgICAgICAgXCJDb25jb3JkZVRhYmxldFwiOiBcIkNvbmNvcmRlKFsgXSspP1RhYnxDb25Db3JkZSBSZWFkTWFuXCIsXG4gICAgICAgIFwiR29DbGV2ZXJUYWJsZXRcIjogXCJHT0NMRVZFUiBUQUJ8QTdHT0NMRVZFUnxNMTA0MnxNNzg0MXxNNzQyfFIxMDQyQkt8UjEwNDF8VEFCIEE5NzV8VEFCIEE3ODQyfFRBQiBBNzQxfFRBQiBBNzQxTHxUQUIgTTcyM0d8VEFCIE03MjF8VEFCIEExMDIxfFRBQiBJOTIxfFRBQiBSNzIxfFRBQiBJNzIwfFRBQiBUNzZ8VEFCIFI3MHxUQUIgUjc2LjJ8VEFCIFIxMDZ8VEFCIFI4My4yfFRBQiBNODEzR3xUQUIgSTcyMXxHQ1RBNzIyfFRBQiBJNzB8VEFCIEk3MXxUQUIgUzczfFRBQiBSNzN8VEFCIFI3NHxUQUIgUjkzfFRBQiBSNzV8VEFCIFI3Ni4xfFRBQiBBNzN8VEFCIEE5M3xUQUIgQTkzLjJ8VEFCIFQ3MnxUQUIgUjgzfFRBQiBSOTc0fFRBQiBSOTczfFRBQiBBMTAxfFRBQiBBMTAzfFRBQiBBMTA0fFRBQiBBMTA0LjJ8UjEwNUJLfE03MTNHfEE5NzJCS3xUQUIgQTk3MXxUQUIgUjk3NC4yfFRBQiBSMTA0fFRBQiBSODMuM3xUQUIgQTEwNDJcIixcbiAgICAgICAgXCJNb2RlY29tVGFibGV0XCI6IFwiRnJlZVRBQiA5MDAwfEZyZWVUQUIgNy40fEZyZWVUQUIgNzAwNHxGcmVlVEFCIDc4MDB8RnJlZVRBQiAyMDk2fEZyZWVUQUIgNy41fEZyZWVUQUIgMTAxNHxGcmVlVEFCIDEwMDEgfEZyZWVUQUIgODAwMXxGcmVlVEFCIDk3MDZ8RnJlZVRBQiA5NzAyfEZyZWVUQUIgNzAwM3xGcmVlVEFCIDcwMDJ8RnJlZVRBQiAxMDAyfEZyZWVUQUIgNzgwMXxGcmVlVEFCIDEzMzF8RnJlZVRBQiAxMDA0fEZyZWVUQUIgODAwMnxGcmVlVEFCIDgwMTR8RnJlZVRBQiA5NzA0fEZyZWVUQUIgMTAwM1wiLFxuICAgICAgICBcIlZvbmlub1RhYmxldFwiOiBcIlxcXFxiKEFyZ3VzWyBfXT9TfERpYW1vbmRbIF9dPzc5SER8RW1lcmFsZFsgX10/NzhFfEx1bmFbIF9dPzcwQ3xPbnl4WyBfXT9TfE9ueXhbIF9dP1p8T3JpblsgX10/SER8T3JpblsgX10/U3xPdGlzWyBfXT9TfFNwZWVkU3RhclsgX10/U3xNYWduZXRbIF9dP005fFByaW11c1sgX10/OTRbIF9dPzNHfFByaW11c1sgX10/OTRIRHxQcmltdXNbIF9dP1FTfEFuZHJvaWQuKlxcXFxiUThcXFxcYnxTaXJpdXNbIF9dP0VWT1sgX10/UVN8U2lyaXVzWyBfXT9RU3xTcGlyaXRbIF9dP1MpXFxcXGJcIixcbiAgICAgICAgXCJFQ1NUYWJsZXRcIjogXCJWMDdPVDJ8VE0xMDVBfFMxME9UMXxUUjEwQ1MxXCIsXG4gICAgICAgIFwiU3RvcmV4VGFibGV0XCI6IFwiZVplZVtfJ10/KFRhYnxHbylbMC05XSt8VGFiTEM3fExvb25leSBUdW5lcyBUYWJcIixcbiAgICAgICAgXCJWb2RhZm9uZVRhYmxldFwiOiBcIlNtYXJ0VGFiKFsgXSspP1swLTldK3xTbWFydFRhYklJMTB8U21hcnRUYWJJSTd8VkYtMTQ5N3xWRkQgMTQwMFwiLFxuICAgICAgICBcIkVzc2VudGllbEJUYWJsZXRcIjogXCJTbWFydFsgJ10/VEFCWyBdKz9bMC05XSt8RmFtaWx5WyAnXT9UQUIyXCIsXG4gICAgICAgIFwiUm9zc01vb3JUYWJsZXRcIjogXCJSTS03OTB8Uk0tOTk3fFJNRC04NzhHfFJNRC05NzRSfFJNVC03MDVBfFJNVC03MDF8Uk1FLTYwMXxSTVQtNTAxfFJNVC03MTFcIixcbiAgICAgICAgXCJpTW9iaWxlVGFibGV0XCI6IFwiaS1tb2JpbGUgaS1ub3RlXCIsXG4gICAgICAgIFwiVG9saW5vVGFibGV0XCI6IFwidG9saW5vIHRhYiBbMC05Ll0rfHRvbGlubyBzaGluZVwiLFxuICAgICAgICBcIkF1ZGlvU29uaWNUYWJsZXRcIjogXCJcXFxcYkMtMjJRfFQ3LVFDfFQtMTdCfFQtMTdQXFxcXGJcIixcbiAgICAgICAgXCJBTVBFVGFibGV0XCI6IFwiQW5kcm9pZC4qIEE3OCBcIixcbiAgICAgICAgXCJTa2tUYWJsZXRcIjogXCJBbmRyb2lkLiogKFNLWVBBRHxQSE9FTklYfENZQ0xPUFMpXCIsXG4gICAgICAgIFwiVGVjbm9UYWJsZXRcIjogXCJURUNOTyBQOXxURUNOTyBEUDhEXCIsXG4gICAgICAgIFwiSlhEVGFibGV0XCI6IFwiQW5kcm9pZC4qIFxcXFxiKEYzMDAwfEEzMzAwfEpYRDUwMDB8SlhEMzAwMHxKWEQyMDAwfEpYRDMwMEJ8SlhEMzAwfFM1ODAwfFM3ODAwfFM2MDJifFM1MTEwYnxTNzMwMHxTNTMwMHxTNjAyfFM2MDN8UzUxMDB8UzUxMTB8UzYwMXxTNzEwMGF8UDMwMDBGfFAzMDAwc3xQMTAxfFAyMDBzfFAxMDAwbXxQMjAwbXxQOTEwMHxQMTAwMHN8UzY2MDBifFM5MDh8UDEwMDB8UDMwMHxTMTh8UzY2MDB8UzkxMDApXFxcXGJcIixcbiAgICAgICAgXCJpSm95VGFibGV0XCI6IFwiVGFibGV0IChTcGlyaXQgN3xFc3NlbnRpYXxHYWxhdGVhfEZ1c2lvbnxPbml4IDd8TGFuZGF8VGl0YW58U2Nvb2J5fERlb3h8U3RlbGxhfFRoZW1pc3xBcmdvbnxVbmlxdWUgN3xTeWdudXN8SGV4ZW58RmluaXR5IDd8Q3JlYW18Q3JlYW0gWDJ8SmFkZXxOZW9uIDd8TmVyb24gN3xLYW5keXxTY2FwZXxTYXBoeXIgN3xSZWJlbHxCaW94fFJlYmVsfFJlYmVsIDhHQnxNeXN0fERyYWNvIDd8TXlzdHxUYWI3LTAwNHxNeXN0fFRhZGVvIEpvbmVzfFRhYmxldCBCb2luZ3xBcnJvd3xEcmFjbyBEdWFsIENhbXxBdXJpeHxNaW50fEFtaXR5fFJldm9sdXRpb258RmluaXR5IDl8TmVvbiA5fFQ5d3xBbWl0eSA0R0IgRHVhbCBDYW18U3RvbmUgNEdCfFN0b25lIDhHQnxBbmRyb21lZGF8U2lsa2VufFgyfEFuZHJvbWVkYSBJSXxIYWxsZXl8RmxhbWV8U2FwaHlyIDksN3xUb3VjaCA4fFBsYW5ldHxUcml0b258VW5pcXVlIDEwfEhleGVuIDEwfE1lbXBoaXMgNEdCfE1lbXBoaXMgOEdCfE9uaXggMTApXCIsXG4gICAgICAgIFwiRlgyVGFibGV0XCI6IFwiRlgyIFBBRDd8RlgyIFBBRDEwXCIsXG4gICAgICAgIFwiWG9yb1RhYmxldFwiOiBcIktpZHNQQUQgNzAxfFBBRFsgXT83MTJ8UEFEWyBdPzcxNHxQQURbIF0/NzE2fFBBRFsgXT83MTd8UEFEWyBdPzcxOHxQQURbIF0/NzIwfFBBRFsgXT83MjF8UEFEWyBdPzcyMnxQQURbIF0/NzkwfFBBRFsgXT83OTJ8UEFEWyBdPzkwMHxQQURbIF0/OTcxNUR8UEFEWyBdPzk3MTZEUnxQQURbIF0/OTcxOERSfFBBRFsgXT85NzE5UVJ8UEFEWyBdPzk3MjBRUnxUZWxlUEFEMTAzMHxUZWxlcGFkMTAzMnxUZWxlUEFENzMwfFRlbGVQQUQ3MzF8VGVsZVBBRDczMnxUZWxlUEFENzM1UXxUZWxlUEFEODMwfFRlbGVQQUQ5NzMwfFRlbGVQQUQ3OTV8TWVnYVBBRCAxMzMxfE1lZ2FQQUQgMTg1MXxNZWdhUEFEIDIxNTFcIixcbiAgICAgICAgXCJWaWV3c29uaWNUYWJsZXRcIjogXCJWaWV3UGFkIDEwcGl8Vmlld1BhZCAxMGV8Vmlld1BhZCAxMHN8Vmlld1BhZCBFNzJ8Vmlld1BhZDd8Vmlld1BhZCBFMTAwfFZpZXdQYWQgN2V8Vmlld1NvbmljIFZCNzMzfFZCMTAwYVwiLFxuICAgICAgICBcIlZlcml6b25UYWJsZXRcIjogXCJRVEFRWjN8UVRBSVI3fFFUQVFUWjN8UVRBU1VOMXxRVEFTVU4yfFFUQVhJQTFcIixcbiAgICAgICAgXCJPZHlzVGFibGV0XCI6IFwiTE9PWHxYRU5PMTB8T0RZU1sgLV0oU3BhY2V8RVZPfFhwcmVzc3xOT09OKXxcXFxcYlhFTElPXFxcXGJ8WGVsaW8xMFByb3xYRUxJTzdQSE9ORVRBQnxYRUxJTzEwRVhUUkVNRXxYRUxJT1BUMnxORU9fUVVBRDEwXCIsXG4gICAgICAgIFwiQ2FwdGl2YVRhYmxldFwiOiBcIkNBUFRJVkEgUEFEXCIsXG4gICAgICAgIFwiSWNvbmJpdFRhYmxldFwiOiBcIk5ldFRBQnxOVC0zNzAyfE5ULTM3MDJTfE5ULTM3MDJTfE5ULTM2MDNQfE5ULTM2MDNQfE5ULTA3MDRTfE5ULTA3MDRTfE5ULTM4MDVDfE5ULTM4MDVDfE5ULTA4MDZDfE5ULTA4MDZDfE5ULTA5MDlUfE5ULTA5MDlUfE5ULTA5MDdTfE5ULTA5MDdTfE5ULTA5MDJTfE5ULTA5MDJTXCIsXG4gICAgICAgIFwiVGVjbGFzdFRhYmxldFwiOiBcIlQ5OCA0R3xcXFxcYlA4MFxcXFxifFxcXFxiWDkwSERcXFxcYnxYOTggQWlyfFg5OCBBaXIgM0d8XFxcXGJYODlcXFxcYnxQODAgM0d8XFxcXGJYODBoXFxcXGJ8UDk4IEFpcnxcXFxcYlg4OUhEXFxcXGJ8UDk4IDNHfFxcXFxiUDkwSERcXFxcYnxQODkgM0d8WDk4IDNHfFxcXFxiUDcwaFxcXFxifFA3OUhEIDNHfEcxOGQgM0d8XFxcXGJQNzlIRFxcXFxifFxcXFxiUDg5c1xcXFxifFxcXFxiQTg4XFxcXGJ8XFxcXGJQMTBIRFxcXFxifFxcXFxiUDE5SERcXFxcYnxHMTggM0d8XFxcXGJQNzhIRFxcXFxifFxcXFxiQTc4XFxcXGJ8XFxcXGJQNzVcXFxcYnxHMTdzIDNHfEcxN2ggM0d8XFxcXGJQODV0XFxcXGJ8XFxcXGJQOTBcXFxcYnxcXFxcYlAxMVxcXFxifFxcXFxiUDk4dFxcXFxifFxcXFxiUDk4SERcXFxcYnxcXFxcYkcxOGRcXFxcYnxcXFxcYlA4NXNcXFxcYnxcXFxcYlAxMUhEXFxcXGJ8XFxcXGJQODhzXFxcXGJ8XFxcXGJBODBIRFxcXFxifFxcXFxiQTgwc2VcXFxcYnxcXFxcYkExMGhcXFxcYnxcXFxcYlA4OVxcXFxifFxcXFxiUDc4c1xcXFxifFxcXFxiRzE4XFxcXGJ8XFxcXGJQODVcXFxcYnxcXFxcYkE3MGhcXFxcYnxcXFxcYkE3MFxcXFxifFxcXFxiRzE3XFxcXGJ8XFxcXGJQMThcXFxcYnxcXFxcYkE4MHNcXFxcYnxcXFxcYkExMXNcXFxcYnxcXFxcYlA4OEhEXFxcXGJ8XFxcXGJBODBoXFxcXGJ8XFxcXGJQNzZzXFxcXGJ8XFxcXGJQNzZoXFxcXGJ8XFxcXGJQOThcXFxcYnxcXFxcYkExMEhEXFxcXGJ8XFxcXGJQNzhcXFxcYnxcXFxcYlA4OFxcXFxifFxcXFxiQTExXFxcXGJ8XFxcXGJBMTB0XFxcXGJ8XFxcXGJQNzZhXFxcXGJ8XFxcXGJQNzZ0XFxcXGJ8XFxcXGJQNzZlXFxcXGJ8XFxcXGJQODVIRFxcXFxifFxcXFxiUDg1YVxcXFxifFxcXFxiUDg2XFxcXGJ8XFxcXGJQNzVIRFxcXFxifFxcXFxiUDc2dlxcXFxifFxcXFxiQTEyXFxcXGJ8XFxcXGJQNzVhXFxcXGJ8XFxcXGJBMTVcXFxcYnxcXFxcYlA3NlRpXFxcXGJ8XFxcXGJQODFIRFxcXFxifFxcXFxiQTEwXFxcXGJ8XFxcXGJUNzYwVkVcXFxcYnxcXFxcYlQ3MjBIRFxcXFxifFxcXFxiUDc2XFxcXGJ8XFxcXGJQNzNcXFxcYnxcXFxcYlA3MVxcXFxifFxcXFxiUDcyXFxcXGJ8XFxcXGJUNzIwU0VcXFxcYnxcXFxcYkM1MjBUaVxcXFxifFxcXFxiVDc2MFxcXFxifFxcXFxiVDcyMFZFXFxcXGJ8VDcyMC0zR0V8VDcyMC1XaUZpXCIsXG4gICAgICAgIFwiT25kYVRhYmxldFwiOiBcIlxcXFxiKFY5NzVpfFZpMzB8Vlg1MzB8VjcwMXxWaTYwfFY3MDFzfFZpNTB8VjgwMXN8VjcxOXxWeDYxMHd8Vlg2MTBXfFY4MTlpfFZpMTB8Vlg1ODBXfFZpMTB8VjcxMXN8VjgxM3xWODExfFY4MjB3fFY4MjB8VmkyMHxWNzExfFZJMzBXfFY3MTJ8Vjg5MXd8Vjk3MnxWODE5d3xWODIwd3xWaTYwfFY4MjB3fFY3MTF8VjgxM3N8VjgwMXxWODE5fFY5NzVzfFY4MDF8VjgxOXxWODE5fFY4MTh8VjgxMXxWNzEyfFY5NzVtfFYxMDF3fFY5NjF3fFY4MTJ8VjgxOHxWOTcxfFY5NzFzfFY5MTl8Vjk4OXxWMTE2d3xWMTAyd3xWOTczfFZpNDApXFxcXGJbXFxcXHNdK3xWMTAgXFxcXGI0R1xcXFxiXCIsXG4gICAgICAgIFwiSmF5dGVjaFRhYmxldFwiOiBcIlRQQy1QQTc2MlwiLFxuICAgICAgICBcIkJsYXVwdW5rdFRhYmxldFwiOiBcIkVuZGVhdm91ciA4MDBOR3xFbmRlYXZvdXIgMTAxMFwiLFxuICAgICAgICBcIkRpZ21hVGFibGV0XCI6IFwiXFxcXGIoaUR4MTB8aUR4OXxpRHg4fGlEeDd8aUR4RDd8aUR4RDh8aURzUTh8aURzUTd8aURzUTh8aURzRDEwfGlEbkQ3fDNUUzgwNEh8aURzUTExfGlEajd8aURzMTApXFxcXGJcIixcbiAgICAgICAgXCJFdm9saW9UYWJsZXRcIjogXCJBUklBX01pbmlfd2lmaXxBcmlhWyBfXU1pbml8RXZvbGlvIFgxMHxFdm9saW8gWDd8RXZvbGlvIFg4fFxcXFxiRXZvdGFiXFxcXGJ8XFxcXGJOZXVyYVxcXFxiXCIsXG4gICAgICAgIFwiTGF2YVRhYmxldFwiOiBcIlFQQUQgRTcwNHxcXFxcYkl2b3J5U1xcXFxifEUtVEFCIElWT1JZfFxcXFxiRS1UQUJcXFxcYlwiLFxuICAgICAgICBcIkFvY1RhYmxldFwiOiBcIk1XMDgxMXxNVzA4MTJ8TVcwOTIyfE1USzgzODJ8TVcxMDMxfE1XMDgzMXxNVzA4MjF8TVcwOTMxfE1XMDcxMlwiLFxuICAgICAgICBcIk1wbWFuVGFibGV0XCI6IFwiTVAxMSBPQ1RBfE1QMTAgT0NUQXxNUFFDMTExNHxNUFFDMTAwNHxNUFFDOTk0fE1QUUM5NzR8TVBRQzk3M3xNUFFDODA0fE1QUUM3ODR8TVBRQzc4MHxcXFxcYk1QRzdcXFxcYnxNUERDRzc1fE1QRENHNzF8TVBEQzEwMDZ8TVAxMDFEQ3xNUERDOTAwMHxNUERDOTA1fE1QREM3MDZIRHxNUERDNzA2fE1QREM3MDV8TVBEQzExMHxNUERDMTAwfE1QREM5OXxNUERDOTd8TVBEQzg4fE1QREM4fE1QREM3N3xNUDcwOXxNSUQ3MDF8TUlENzExfE1JRDE3MHxNUERDNzAzfE1QUUMxMDEwXCIsXG4gICAgICAgIFwiQ2Vsa29uVGFibGV0XCI6IFwiQ1Q2OTV8Q1Q4ODh8Q1RbXFxcXHNdPzkxMHxDVDcgVGFifENUOSBUYWJ8Q1QzIFRhYnxDVDIgVGFifENUMSBUYWJ8QzgyMHxDNzIwfFxcXFxiQ1QtMVxcXFxiXCIsXG4gICAgICAgIFwiV29sZGVyVGFibGV0XCI6IFwibWlUYWIgXFxcXGIoRElBTU9ORHxTUEFDRXxCUk9PS0xZTnxORU98RkxZfE1BTkhBVFRBTnxGVU5LfEVWT0xVVElPTnxTS1l8R09DQVJ8SVJPTnxHRU5JVVN8UE9QfE1JTlR8RVBTSUxPTnxCUk9BRFdBWXxKVU1QfEhPUHxMRUdFTkR8TkVXIEFHRXxMSU5FfEFEVkFOQ0V8RkVFTHxGT0xMT1d8TElLRXxMSU5LfExJVkV8VEhJTkt8RlJFRURPTXxDSElDQUdPfENMRVZFTEFORHxCQUxUSU1PUkUtR0h8SU9XQXxCT1NUT058U0VBVFRMRXxQSE9FTklYfERBTExBU3xJTiAxMDF8TWFzdGVyQ2hlZilcXFxcYlwiLFxuICAgICAgICBcIk1lZGlhY29tVGFibGV0XCI6IFwiTS1NUEkxMEMzR3xNLVNQMTBFR3xNLVNQMTBFR1B8TS1TUDEwSFhBSHxNLVNQN0hYQUh8TS1TUDEwSFhCSHxNLVNQOEhYQUh8TS1TUDhNWEFcIixcbiAgICAgICAgXCJNaVRhYmxldFwiOiBcIlxcXFxiTUkgUEFEXFxcXGJ8XFxcXGJITSBOT1RFIDFXXFxcXGJcIixcbiAgICAgICAgXCJOaWJpcnVUYWJsZXRcIjogXCJOaWJpcnUgTTF8TmliaXJ1IEp1cGl0ZXIgT25lXCIsXG4gICAgICAgIFwiTmV4b1RhYmxldFwiOiBcIk5FWE8gTk9WQXxORVhPIDEwfE5FWE8gQVZJT3xORVhPIEZSRUV8TkVYTyBHT3xORVhPIEVWT3xORVhPIDNHfE5FWE8gU01BUlR8TkVYTyBLSURET3xORVhPIE1PQklcIixcbiAgICAgICAgXCJMZWFkZXJUYWJsZXRcIjogXCJUQkxUMTBRfFRCTFQxMEl8VEJMLTEwV0RLQnxUQkwtMTBXREtCTzIwMTN8VEJMLVcyMzBWMnxUQkwtVzQ1MHxUQkwtVzUwMHxTVjU3MnxUQkxUN0l8VEJBLUFDNy04R3xUQkxUNzl8VEJMLThXMTZ8VEJMLTEwVzMyfFRCTC0xMFdLQnxUQkwtVzEwMFwiLFxuICAgICAgICBcIlViaXNsYXRlVGFibGV0XCI6IFwiVWJpU2xhdGVbXFxcXHNdPzdDXCIsXG4gICAgICAgIFwiUG9ja2V0Qm9va1RhYmxldFwiOiBcIlBvY2tldGJvb2tcIixcbiAgICAgICAgXCJLb2Nhc29UYWJsZXRcIjogXCJcXFxcYihUQi0xMjA3KVxcXFxiXCIsXG4gICAgICAgIFwiSGlzZW5zZVRhYmxldFwiOiBcIlxcXFxiKEY1MjgxfEUyMzcxKVxcXFxiXCIsXG4gICAgICAgIFwiSHVkbFwiOiBcIkh1ZGwgSFQ3UzN8SHVkbCAyXCIsXG4gICAgICAgIFwiVGVsc3RyYVRhYmxldFwiOiBcIlQtSHViMlwiLFxuICAgICAgICBcIkdlbmVyaWNUYWJsZXRcIjogXCJBbmRyb2lkLipcXFxcYjk3RFxcXFxifFRhYmxldCg/IS4qUEMpfEJOVFYyNTBBfE1JRC1XQ0RNQXxMb2dpY1BEIFpvb20yfFxcXFxiQTdFQlxcXFxifENhdE5vdmE4fEExXzA3fENUNzA0fENUMTAwMnxcXFxcYk03MjFcXFxcYnxyazMwc2RrfFxcXFxiRVZPVEFCXFxcXGJ8TTc1OEF8RVQ5MDR8QUxVTUlVTTEwfFNtYXJ0ZnJlbiBUYWJ8RW5kZWF2b3VyIDEwMTB8VGFibGV0LVBDLTR8VGFnaSBUYWJ8XFxcXGJNNnByb1xcXFxifENUMTAyMFd8YXJjIDEwSER8XFxcXGJUUDc1MFxcXFxifFxcXFxiUVRBUVozXFxcXGJ8V1ZUMTAxfFRNMTA4OHxLVDEwN1wiXG4gICAgfSxcbiAgICBcIm9zc1wiOiB7XG4gICAgICAgIFwiQW5kcm9pZE9TXCI6IFwiQW5kcm9pZFwiLFxuICAgICAgICBcIkJsYWNrQmVycnlPU1wiOiBcImJsYWNrYmVycnl8XFxcXGJCQjEwXFxcXGJ8cmltIHRhYmxldCBvc1wiLFxuICAgICAgICBcIlBhbG1PU1wiOiBcIlBhbG1PU3xhdmFudGdvfGJsYXplcnxlbGFpbmV8aGlwdG9wfHBhbG18cGx1Y2tlcnx4aWlub1wiLFxuICAgICAgICBcIlN5bWJpYW5PU1wiOiBcIlN5bWJpYW58U3ltYk9TfFNlcmllczYwfFNlcmllczQwfFNZQi1bMC05XSt8XFxcXGJTNjBcXFxcYlwiLFxuICAgICAgICBcIldpbmRvd3NNb2JpbGVPU1wiOiBcIldpbmRvd3MgQ0UuKihQUEN8U21hcnRwaG9uZXxNb2JpbGV8WzAtOV17M314WzAtOV17M30pfFdpbmRvd3MgTW9iaWxlfFdpbmRvd3MgUGhvbmUgWzAtOS5dK3xXQ0U7XCIsXG4gICAgICAgIFwiV2luZG93c1Bob25lT1NcIjogXCJXaW5kb3dzIFBob25lIDEwLjB8V2luZG93cyBQaG9uZSA4LjF8V2luZG93cyBQaG9uZSA4LjB8V2luZG93cyBQaG9uZSBPU3xYQkxXUDd8WnVuZVdQN3xXaW5kb3dzIE5UIDYuWzIzXTsgQVJNO1wiLFxuICAgICAgICBcImlPU1wiOiBcIlxcXFxiaVBob25lLipNb2JpbGV8XFxcXGJpUG9kfFxcXFxiaVBhZHxBcHBsZUNvcmVNZWRpYVwiLFxuICAgICAgICBcImlQYWRPU1wiOiBcIkNQVSBPUyAxM1wiLFxuICAgICAgICBcIk1lZUdvT1NcIjogXCJNZWVHb1wiLFxuICAgICAgICBcIk1hZW1vT1NcIjogXCJNYWVtb1wiLFxuICAgICAgICBcIkphdmFPU1wiOiBcIkoyTUVcXC98XFxcXGJNSURQXFxcXGJ8XFxcXGJDTERDXFxcXGJcIixcbiAgICAgICAgXCJ3ZWJPU1wiOiBcIndlYk9TfGhwd09TXCIsXG4gICAgICAgIFwiYmFkYU9TXCI6IFwiXFxcXGJCYWRhXFxcXGJcIixcbiAgICAgICAgXCJCUkVXT1NcIjogXCJCUkVXXCJcbiAgICB9LFxuICAgIFwidWFzXCI6IHtcbiAgICAgICAgXCJDaHJvbWVcIjogXCJcXFxcYkNyTW9cXFxcYnxDcmlPU3xBbmRyb2lkLipDaHJvbWVcXC9bLjAtOV0qIChNb2JpbGUpP1wiLFxuICAgICAgICBcIkRvbGZpblwiOiBcIlxcXFxiRG9sZmluXFxcXGJcIixcbiAgICAgICAgXCJPcGVyYVwiOiBcIk9wZXJhLipNaW5pfE9wZXJhLipNb2JpfEFuZHJvaWQuKk9wZXJhfE1vYmlsZS4qT1BSXFwvWzAtOS5dKyR8Q29hc3RcXC9bMC05Ll0rXCIsXG4gICAgICAgIFwiU2t5ZmlyZVwiOiBcIlNreWZpcmVcIixcbiAgICAgICAgXCJFZGdlXCI6IFwiTW9iaWxlIFNhZmFyaVxcL1suMC05XSogRWRnZVwiLFxuICAgICAgICBcIklFXCI6IFwiSUVNb2JpbGV8TVNJRU1vYmlsZVwiLFxuICAgICAgICBcIkZpcmVmb3hcIjogXCJmZW5uZWN8ZmlyZWZveC4qbWFlbW98KE1vYmlsZXxUYWJsZXQpLipGaXJlZm94fEZpcmVmb3guKk1vYmlsZXxGeGlPU1wiLFxuICAgICAgICBcIkJvbHRcIjogXCJib2x0XCIsXG4gICAgICAgIFwiVGVhU2hhcmtcIjogXCJ0ZWFzaGFya1wiLFxuICAgICAgICBcIkJsYXplclwiOiBcIkJsYXplclwiLFxuICAgICAgICBcIlNhZmFyaVwiOiBcIlZlcnNpb24uKk1vYmlsZS4qU2FmYXJpfFNhZmFyaS4qTW9iaWxlfE1vYmlsZVNhZmFyaVwiLFxuICAgICAgICBcIldlQ2hhdFwiOiBcIlxcXFxiTWljcm9NZXNzZW5nZXJcXFxcYlwiLFxuICAgICAgICBcIlVDQnJvd3NlclwiOiBcIlVDLipCcm93c2VyfFVDV0VCXCIsXG4gICAgICAgIFwiYmFpZHVib3hhcHBcIjogXCJiYWlkdWJveGFwcFwiLFxuICAgICAgICBcImJhaWR1YnJvd3NlclwiOiBcImJhaWR1YnJvd3NlclwiLFxuICAgICAgICBcIkRpaWdvQnJvd3NlclwiOiBcIkRpaWdvQnJvd3NlclwiLFxuICAgICAgICBcIk1lcmN1cnlcIjogXCJcXFxcYk1lcmN1cnlcXFxcYlwiLFxuICAgICAgICBcIk9iaWdvQnJvd3NlclwiOiBcIk9iaWdvXCIsXG4gICAgICAgIFwiTmV0RnJvbnRcIjogXCJORi1Ccm93c2VyXCIsXG4gICAgICAgIFwiR2VuZXJpY0Jyb3dzZXJcIjogXCJOb2tpYUJyb3dzZXJ8T3ZpQnJvd3NlcnxPbmVCcm93c2VyfFR3b25reUJlYW1Ccm93c2VyfFNFTUMuKkJyb3dzZXJ8Rmx5Rmxvd3xNaW5pbW98TmV0RnJvbnR8Tm92YXJyYS1WaXNpb258TVFRQnJvd3NlcnxNaWNyb01lc3NlbmdlclwiLFxuICAgICAgICBcIlBhbGVNb29uXCI6IFwiQW5kcm9pZC4qUGFsZU1vb258TW9iaWxlLipQYWxlTW9vblwiXG4gICAgfSxcbiAgICBcInByb3BzXCI6IHtcbiAgICAgICAgXCJNb2JpbGVcIjogXCJNb2JpbGVcXC9bVkVSXVwiLFxuICAgICAgICBcIkJ1aWxkXCI6IFwiQnVpbGRcXC9bVkVSXVwiLFxuICAgICAgICBcIlZlcnNpb25cIjogXCJWZXJzaW9uXFwvW1ZFUl1cIixcbiAgICAgICAgXCJWZW5kb3JJRFwiOiBcIlZlbmRvcklEXFwvW1ZFUl1cIixcbiAgICAgICAgXCJpUGFkXCI6IFwiaVBhZC4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiaVBob25lXCI6IFwiaVBob25lLipDUFVbYS16IF0rW1ZFUl1cIixcbiAgICAgICAgXCJpUG9kXCI6IFwiaVBvZC4qQ1BVW2EteiBdK1tWRVJdXCIsXG4gICAgICAgIFwiS2luZGxlXCI6IFwiS2luZGxlXFwvW1ZFUl1cIixcbiAgICAgICAgXCJDaHJvbWVcIjogW1xuICAgICAgICAgICAgXCJDaHJvbWVcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJDcmlPU1xcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIkNyTW9cXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiQ29hc3RcIjogW1xuICAgICAgICAgICAgXCJDb2FzdFxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJEb2xmaW5cIjogXCJEb2xmaW5cXC9bVkVSXVwiLFxuICAgICAgICBcIkZpcmVmb3hcIjogW1xuICAgICAgICAgICAgXCJGaXJlZm94XFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiRnhpT1NcXC9bVkVSXVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiRmVubmVjXCI6IFwiRmVubmVjXFwvW1ZFUl1cIixcbiAgICAgICAgXCJFZGdlXCI6IFwiRWRnZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiSUVcIjogW1xuICAgICAgICAgICAgXCJJRU1vYmlsZVxcL1tWRVJdO1wiLFxuICAgICAgICAgICAgXCJJRU1vYmlsZSBbVkVSXVwiLFxuICAgICAgICAgICAgXCJNU0lFIFtWRVJdO1wiLFxuICAgICAgICAgICAgXCJUcmlkZW50XFwvWzAtOS5dKzsuKnJ2OltWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJOZXRGcm9udFwiOiBcIk5ldEZyb250XFwvW1ZFUl1cIixcbiAgICAgICAgXCJOb2tpYUJyb3dzZXJcIjogXCJOb2tpYUJyb3dzZXJcXC9bVkVSXVwiLFxuICAgICAgICBcIk9wZXJhXCI6IFtcbiAgICAgICAgICAgIFwiIE9QUlxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIk9wZXJhIE1pbmlcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJWZXJzaW9uXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIk9wZXJhIE1pbmlcIjogXCJPcGVyYSBNaW5pXFwvW1ZFUl1cIixcbiAgICAgICAgXCJPcGVyYSBNb2JpXCI6IFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiVUNCcm93c2VyXCI6IFtcbiAgICAgICAgICAgIFwiVUNXRUJbVkVSXVwiLFxuICAgICAgICAgICAgXCJVQy4qQnJvd3NlclxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJNUVFCcm93c2VyXCI6IFwiTVFRQnJvd3NlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiTWljcm9NZXNzZW5nZXJcIjogXCJNaWNyb01lc3NlbmdlclxcL1tWRVJdXCIsXG4gICAgICAgIFwiYmFpZHVib3hhcHBcIjogXCJiYWlkdWJveGFwcFxcL1tWRVJdXCIsXG4gICAgICAgIFwiYmFpZHVicm93c2VyXCI6IFwiYmFpZHVicm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJTYW1zdW5nQnJvd3NlclwiOiBcIlNhbXN1bmdCcm93c2VyXFwvW1ZFUl1cIixcbiAgICAgICAgXCJJcm9uXCI6IFwiSXJvblxcL1tWRVJdXCIsXG4gICAgICAgIFwiU2FmYXJpXCI6IFtcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCIsXG4gICAgICAgICAgICBcIlNhZmFyaVxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJTa3lmaXJlXCI6IFwiU2t5ZmlyZVxcL1tWRVJdXCIsXG4gICAgICAgIFwiVGl6ZW5cIjogXCJUaXplblxcL1tWRVJdXCIsXG4gICAgICAgIFwiV2Via2l0XCI6IFwid2Via2l0WyBcXC9dW1ZFUl1cIixcbiAgICAgICAgXCJQYWxlTW9vblwiOiBcIlBhbGVNb29uXFwvW1ZFUl1cIixcbiAgICAgICAgXCJHZWNrb1wiOiBcIkdlY2tvXFwvW1ZFUl1cIixcbiAgICAgICAgXCJUcmlkZW50XCI6IFwiVHJpZGVudFxcL1tWRVJdXCIsXG4gICAgICAgIFwiUHJlc3RvXCI6IFwiUHJlc3RvXFwvW1ZFUl1cIixcbiAgICAgICAgXCJHb2FubmFcIjogXCJHb2FubmFcXC9bVkVSXVwiLFxuICAgICAgICBcImlPU1wiOiBcIiBcXFxcYmk/T1NcXFxcYiBbVkVSXVsgO117MX1cIixcbiAgICAgICAgXCJBbmRyb2lkXCI6IFwiQW5kcm9pZCBbVkVSXVwiLFxuICAgICAgICBcIkJsYWNrQmVycnlcIjogW1xuICAgICAgICAgICAgXCJCbGFja0JlcnJ5W1xcXFx3XStcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJCbGFja0JlcnJ5LipWZXJzaW9uXFwvW1ZFUl1cIixcbiAgICAgICAgICAgIFwiVmVyc2lvblxcL1tWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJCUkVXXCI6IFwiQlJFVyBbVkVSXVwiLFxuICAgICAgICBcIkphdmFcIjogXCJKYXZhXFwvW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIFBob25lIE9TXCI6IFtcbiAgICAgICAgICAgIFwiV2luZG93cyBQaG9uZSBPUyBbVkVSXVwiLFxuICAgICAgICAgICAgXCJXaW5kb3dzIFBob25lIFtWRVJdXCJcbiAgICAgICAgXSxcbiAgICAgICAgXCJXaW5kb3dzIFBob25lXCI6IFwiV2luZG93cyBQaG9uZSBbVkVSXVwiLFxuICAgICAgICBcIldpbmRvd3MgQ0VcIjogXCJXaW5kb3dzIENFXFwvW1ZFUl1cIixcbiAgICAgICAgXCJXaW5kb3dzIE5UXCI6IFwiV2luZG93cyBOVCBbVkVSXVwiLFxuICAgICAgICBcIlN5bWJpYW5cIjogW1xuICAgICAgICAgICAgXCJTeW1iaWFuT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJTeW1iaWFuXFwvW1ZFUl1cIlxuICAgICAgICBdLFxuICAgICAgICBcIndlYk9TXCI6IFtcbiAgICAgICAgICAgIFwid2ViT1NcXC9bVkVSXVwiLFxuICAgICAgICAgICAgXCJocHdPU1xcL1tWRVJdO1wiXG4gICAgICAgIF1cbiAgICB9LFxuICAgIFwidXRpbHNcIjoge1xuICAgICAgICBcIkJvdFwiOiBcIkdvb2dsZWJvdHxmYWNlYm9va2V4dGVybmFsaGl0fEdvb2dsZS1BTVBIVE1MfHN+YW1wLXZhbGlkYXRvcnxBZHNCb3QtR29vZ2xlfEdvb2dsZSBLZXl3b3JkIFN1Z2dlc3Rpb258RmFjZWJvdHxZYW5kZXhCb3R8WWFuZGV4TW9iaWxlQm90fGJpbmdib3R8aWFfYXJjaGl2ZXJ8QWhyZWZzQm90fEV6b29tc3xHU0xGYm90fFdCU2VhcmNoQm90fFR3aXR0ZXJib3R8VHdlZXRtZW1lQm90fFR3aWtsZXxQYXBlckxpQm90fFdvdGJveHxVbndpbmRGZXRjaG9yfEV4YWJvdHxNSjEyYm90fFlhbmRleEltYWdlc3xUdXJuaXRpbkJvdHxQaW5nZG9tfGNvbnRlbnRraW5nYXBwXCIsXG4gICAgICAgIFwiTW9iaWxlQm90XCI6IFwiR29vZ2xlYm90LU1vYmlsZXxBZHNCb3QtR29vZ2xlLU1vYmlsZXxZYWhvb1NlZWtlclxcL00xQTEtUjJEMlwiLFxuICAgICAgICBcIkRlc2t0b3BNb2RlXCI6IFwiV1BEZXNrdG9wXCIsXG4gICAgICAgIFwiVFZcIjogXCJTb255RFRWfEhiYlRWXCIsXG4gICAgICAgIFwiV2ViS2l0XCI6IFwiKHdlYmtpdClbIFxcL10oW1xcXFx3Ll0rKVwiLFxuICAgICAgICBcIkNvbnNvbGVcIjogXCJcXFxcYihOaW50ZW5kb3xOaW50ZW5kbyBXaWlVfE5pbnRlbmRvIDNEU3xOaW50ZW5kbyBTd2l0Y2h8UExBWVNUQVRJT058WGJveClcXFxcYlwiLFxuICAgICAgICBcIldhdGNoXCI6IFwiU00tVjcwMFwiXG4gICAgfVxufTtcblxuICAgIC8vIGZvbGxvd2luZyBwYXR0ZXJucyBjb21lIGZyb20gaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cbiAgICBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzID0ge1xuICAgICAgICBmdWxsUGF0dGVybjogLyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLFxuICAgICAgICBzaG9ydFBhdHRlcm46IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLFxuICAgICAgICB0YWJsZXRQYXR0ZXJuOiAvYW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaVxuICAgIH07XG5cbiAgICB2YXIgaGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICAgIGlzQXJyYXk7XG5cbiAgICBpbXBsLkZBTExCQUNLX1BIT05FID0gJ1Vua25vd25QaG9uZSc7XG4gICAgaW1wbC5GQUxMQkFDS19UQUJMRVQgPSAnVW5rbm93blRhYmxldCc7XG4gICAgaW1wbC5GQUxMQkFDS19NT0JJTEUgPSAnVW5rbm93bk1vYmlsZSc7XG5cbiAgICBpc0FycmF5ID0gKCdpc0FycmF5JyBpbiBBcnJheSkgP1xuICAgICAgICBBcnJheS5pc0FycmF5IDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nOyB9O1xuXG4gICAgZnVuY3Rpb24gZXF1YWxJQyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBhICE9IG51bGwgJiYgYiAhPSBudWxsICYmIGEudG9Mb3dlckNhc2UoKSA9PT0gYi50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zSUMoYXJyYXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZUxDLCBpLCBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIGlmICghbGVuIHx8ICF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlTEMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZUxDID09PSBhcnJheVtpXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG9iamVjdCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gbmV3IFJlZ0V4cChvYmplY3Rba2V5XSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXBhcmVVc2VyQWdlbnQodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiAodXNlckFnZW50IHx8ICcnKS5zdWJzdHIoMCwgNTAwKTsgLy8gbWl0aWdhdGUgdnVsbmVyYWJsZSB0byBSZURvU1xuICAgIH1cblxuICAgIChmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIga2V5LCB2YWx1ZXMsIHZhbHVlLCBpLCBsZW4sIHZlclBvcywgbW9iaWxlRGV0ZWN0UnVsZXMgPSBpbXBsLm1vYmlsZURldGVjdFJ1bGVzO1xuICAgICAgICBmb3IgKGtleSBpbiBtb2JpbGVEZXRlY3RSdWxlcy5wcm9wcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChtb2JpbGVEZXRlY3RSdWxlcy5wcm9wcywga2V5KSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcyA9IG1vYmlsZURldGVjdFJ1bGVzLnByb3BzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW3ZhbHVlc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2ZXJQb3MgPSB2YWx1ZS5pbmRleE9mKCdbVkVSXScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmVyUG9zID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZlclBvcykgKyAnKFtcXFxcdy5fXFxcXCtdKyknICsgdmFsdWUuc3Vic3RyaW5nKHZlclBvcyArIDUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IG5ldyBSZWdFeHAodmFsdWUsICdpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1vYmlsZURldGVjdFJ1bGVzLnByb3BzW2tleV0gPSB2YWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMub3NzKTtcbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMucGhvbmVzKTtcbiAgICAgICAgY29udmVydFByb3BzVG9SZWdFeHAobW9iaWxlRGV0ZWN0UnVsZXMudGFibGV0cyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnVhcyk7XG4gICAgICAgIGNvbnZlcnRQcm9wc1RvUmVnRXhwKG1vYmlsZURldGVjdFJ1bGVzLnV0aWxzKTtcblxuICAgICAgICAvLyBjb3B5IHNvbWUgcGF0dGVybnMgdG8gb3NzMCB3aGljaCBhcmUgdGVzdGVkIGZpcnN0IChzZWUgaXNzdWUjMTUpXG4gICAgICAgIG1vYmlsZURldGVjdFJ1bGVzLm9zczAgPSB7XG4gICAgICAgICAgICBXaW5kb3dzUGhvbmVPUzogbW9iaWxlRGV0ZWN0UnVsZXMub3NzLldpbmRvd3NQaG9uZU9TLFxuICAgICAgICAgICAgV2luZG93c01vYmlsZU9TOiBtb2JpbGVEZXRlY3RSdWxlcy5vc3MuV2luZG93c01vYmlsZU9TXG4gICAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRlc3QgdXNlckFnZW50IHN0cmluZyBhZ2FpbnN0IGEgc2V0IG9mIHJ1bGVzIGFuZCBmaW5kIHRoZSBmaXJzdCBtYXRjaGVkIGtleS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcnVsZXMgKGtleSBpcyBTdHJpbmcsIHZhbHVlIGlzIFJlZ0V4cClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXNlckFnZW50IHRoZSBuYXZpZ2F0b3IudXNlckFnZW50IChvciBIVFRQLUhlYWRlciAnVXNlci1BZ2VudCcpLlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gdGhlIG1hdGNoZWQga2V5IGlmIGZvdW5kLCBvdGhlcndpc2UgPHR0Pm51bGw8L3R0PlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5maW5kTWF0Y2ggPSBmdW5jdGlvbihydWxlcywgdXNlckFnZW50KSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBydWxlcykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AuY2FsbChydWxlcywga2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChydWxlc1trZXldLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGVzdCB1c2VyQWdlbnQgc3RyaW5nIGFnYWluc3QgYSBzZXQgb2YgcnVsZXMgYW5kIHJldHVybiBhbiBhcnJheSBvZiBtYXRjaGVkIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJ1bGVzIChrZXkgaXMgU3RyaW5nLCB2YWx1ZSBpcyBSZWdFeHApXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudCB0aGUgbmF2aWdhdG9yLnVzZXJBZ2VudCAob3IgSFRUUC1IZWFkZXIgJ1VzZXItQWdlbnQnKS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGFuIGFycmF5IG9mIG1hdGNoZWQga2V5cywgbWF5IGJlIGVtcHR5IHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2gsIGJ1dCBub3QgPHR0Pm51bGw8L3R0PlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5maW5kTWF0Y2hlcyA9IGZ1bmN0aW9uKHJ1bGVzLCB1c2VyQWdlbnQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wLmNhbGwocnVsZXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAocnVsZXNba2V5XS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGdpdmVuIHByb3BlcnR5IGluIHRoZSBVc2VyLUFnZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyQWdlbnRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHZlcnNpb24gb3IgPHR0Pm51bGw8L3R0PiBpZiB2ZXJzaW9uIG5vdCBmb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW1wbC5nZXRWZXJzaW9uU3RyID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSwgdXNlckFnZW50KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGltcGwubW9iaWxlRGV0ZWN0UnVsZXMucHJvcHMsIHBhdHRlcm5zLCBpLCBsZW4sIG1hdGNoO1xuICAgICAgICBpZiAoaGFzT3duUHJvcC5jYWxsKHByb3BzLCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBwYXR0ZXJucyA9IHByb3BzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBsZW4gPSBwYXR0ZXJucy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHBhdHRlcm5zW2ldLmV4ZWModXNlckFnZW50KTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZlcnNpb24gb2YgdGhlIGdpdmVuIHByb3BlcnR5IGluIHRoZSBVc2VyLUFnZW50LlxuICAgICAqIFdpbGwgcmV0dXJuIGEgZmxvYXQgbnVtYmVyLiAoZWcuIDJfMCB3aWxsIHJldHVybiAyLjAsIDQuMy4xIHdpbGwgcmV0dXJuIDQuMzEpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJBZ2VudFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gdmVyc2lvbiBvciA8dHQ+TmFOPC90dD4gaWYgdmVyc2lvbiBub3QgZm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCkge1xuICAgICAgICB2YXIgdmVyc2lvbiA9IGltcGwuZ2V0VmVyc2lvblN0cihwcm9wZXJ0eU5hbWUsIHVzZXJBZ2VudCk7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uID8gaW1wbC5wcmVwYXJlVmVyc2lvbk5vKHZlcnNpb24pIDogTmFOO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHRoZSB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2ZXJzaW9uXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB0aGUgdmVyc2lvbiBudW1iZXIgYXMgYSBmbG9hdGluZyBudW1iZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGltcGwucHJlcGFyZVZlcnNpb25ObyA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICAgIHZhciBudW1iZXJzO1xuXG4gICAgICAgIG51bWJlcnMgPSB2ZXJzaW9uLnNwbGl0KC9bYS16Ll8gXFwvXFwtXS9pKTtcbiAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbnVtYmVyc1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2ZXJzaW9uID0gbnVtYmVyc1swXSArICcuJztcbiAgICAgICAgICAgIG51bWJlcnMuc2hpZnQoKTtcbiAgICAgICAgICAgIHZlcnNpb24gKz0gbnVtYmVycy5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyKHZlcnNpb24pO1xuICAgIH07XG5cbiAgICBpbXBsLmlzTW9iaWxlRmFsbGJhY2sgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzLmZ1bGxQYXR0ZXJuLnRlc3QodXNlckFnZW50KSB8fFxuICAgICAgICAgICAgaW1wbC5kZXRlY3RNb2JpbGVCcm93c2Vycy5zaG9ydFBhdHRlcm4udGVzdCh1c2VyQWdlbnQuc3Vic3RyKDAsNCkpO1xuICAgIH07XG5cbiAgICBpbXBsLmlzVGFibGV0RmFsbGJhY2sgPSBmdW5jdGlvbiAodXNlckFnZW50KSB7XG4gICAgICAgIHJldHVybiBpbXBsLmRldGVjdE1vYmlsZUJyb3dzZXJzLnRhYmxldFBhdHRlcm4udGVzdCh1c2VyQWdlbnQpO1xuICAgIH07XG5cbiAgICBpbXBsLnByZXBhcmVEZXRlY3Rpb25DYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSwgdXNlckFnZW50LCBtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgIGlmIChjYWNoZS5tb2JpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwaG9uZSwgdGFibGV0LCBwaG9uZVNpemVkO1xuXG4gICAgICAgIC8vIGZpcnN0IGNoZWNrIGZvciBzdHJvbmdlciB0YWJsZXQgcnVsZXMsIHRoZW4gcGhvbmUgKHNlZSBpc3N1ZSM1KVxuICAgICAgICB0YWJsZXQgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnRhYmxldHMsIHVzZXJBZ2VudCk7XG4gICAgICAgIGlmICh0YWJsZXQpIHtcbiAgICAgICAgICAgIGNhY2hlLm1vYmlsZSA9IGNhY2hlLnRhYmxldCA9IHRhYmxldDtcbiAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gdW5hbWJpZ3VvdXNseSBpZGVudGlmaWVkIGFzIHRhYmxldFxuICAgICAgICB9XG5cbiAgICAgICAgcGhvbmUgPSBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnBob25lcywgdXNlckFnZW50KTtcbiAgICAgICAgaWYgKHBob25lKSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS5waG9uZSA9IHBob25lO1xuICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gdW5hbWJpZ3VvdXNseSBpZGVudGlmaWVkIGFzIHBob25lXG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdXIgcnVsZXMgaGF2ZW4ndCBmb3VuZCBhIG1hdGNoIC0+IHRyeSBtb3JlIGdlbmVyYWwgZmFsbGJhY2sgcnVsZXNcbiAgICAgICAgaWYgKGltcGwuaXNNb2JpbGVGYWxsYmFjayh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBwaG9uZVNpemVkID0gTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZChtYXhQaG9uZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChwaG9uZVNpemVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBpbXBsLkZBTExCQUNLX01PQklMRTtcbiAgICAgICAgICAgICAgICBjYWNoZS50YWJsZXQgPSBjYWNoZS5waG9uZSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBob25lU2l6ZWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS5waG9uZSA9IGltcGwuRkFMTEJBQ0tfUEhPTkU7XG4gICAgICAgICAgICAgICAgY2FjaGUudGFibGV0ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gaW1wbC5GQUxMQkFDS19UQUJMRVQ7XG4gICAgICAgICAgICAgICAgY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGltcGwuaXNUYWJsZXRGYWxsYmFjayh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBjYWNoZS5tb2JpbGUgPSBjYWNoZS50YWJsZXQgPSBpbXBsLkZBTExCQUNLX1RBQkxFVDtcbiAgICAgICAgICAgIGNhY2hlLnBob25lID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vdCBtb2JpbGUgYXQgYWxsIVxuICAgICAgICAgICAgY2FjaGUubW9iaWxlID0gY2FjaGUudGFibGV0ID0gY2FjaGUucGhvbmUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHQgaXMgYSByZWZlcmVuY2UgdG8gYSBNb2JpbGVEZXRlY3QgaW5zdGFuY2VcbiAgICBpbXBsLm1vYmlsZUdyYWRlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgLy8gaW1wbCBub3RlOlxuICAgICAgICAvLyBUbyBrZWVwIGluIHN5bmMgdy8gTW9iaWxlX0RldGVjdC5waHAgZWFzaWx5LCB0aGUgZm9sbG93aW5nIGNvZGUgaXMgdGlnaHRseSBhbGlnbmVkIHRvIHRoZSBQSFAgdmVyc2lvbi5cbiAgICAgICAgLy8gV2hlbiBjaGFuZ2VzIGFyZSBtYWRlIGluIE1vYmlsZV9EZXRlY3QucGhwLCBjb3B5IHRoaXMgbWV0aG9kIGFuZCByZXBsYWNlOlxuICAgICAgICAvLyAgICAgJHRoaXMtPiAvIHQuXG4gICAgICAgIC8vICAgICBzZWxmOjpNT0JJTEVfR1JBREVfKC4pIC8gJyQxJ1xuICAgICAgICAvLyAgICAgLCBzZWxmOjpWRVJTSU9OX1RZUEVfRkxPQVQgLyAobm90aGluZylcbiAgICAgICAgLy8gICAgIGlzSU9TKCkgLyBvcygnaU9TJylcbiAgICAgICAgLy8gICAgIFtyZWddIC8gKG5vdGhpbmcpICAgPC0tIGpzZGVsaXZyIGNvbXBsYWluaW5nIGFib3V0IHVuZXNjYXBlZCB1bmljb2RlIGNoYXJhY3RlciBVKzAwQUVcbiAgICAgICAgdmFyICRpc01vYmlsZSA9IHQubW9iaWxlKCkgIT09IG51bGw7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gQXBwbGUgaU9TIDMuMi01LjEgLSBUZXN0ZWQgb24gdGhlIG9yaWdpbmFsIGlQYWQgKDQuMyAvIDUuMCksIGlQYWQgMiAoNC4zKSwgaVBhZCAzICg1LjEpLCBvcmlnaW5hbCBpUGhvbmUgKDMuMSksIGlQaG9uZSAzICgzLjIpLCAzR1MgKDQuMyksIDQgKDQuMyAvIDUuMCksIGFuZCA0UyAoNS4xKVxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGFkJyk+PTQuMyB8fFxuICAgICAgICAgICAgdC5vcygnaU9TJykgJiYgdC52ZXJzaW9uKCdpUGhvbmUnKT49My4xIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQb2QnKT49My4xIHx8XG5cbiAgICAgICAgICAgIC8vIEFuZHJvaWQgMi4xLTIuMyAtIFRlc3RlZCBvbiB0aGUgSFRDIEluY3JlZGlibGUgKDIuMiksIG9yaWdpbmFsIERyb2lkICgyLjIpLCBIVEMgQXJpYSAoMi4xKSwgR29vZ2xlIE5leHVzIFMgKDIuMykuIEZ1bmN0aW9uYWwgb24gMS41ICYgMS42IGJ1dCBwZXJmb3JtYW5jZSBtYXkgYmUgc2x1Z2dpc2gsIHRlc3RlZCBvbiBHb29nbGUgRzEgKDEuNSlcbiAgICAgICAgICAgIC8vIEFuZHJvaWQgMy4xIChIb25leWNvbWIpICAtIFRlc3RlZCBvbiB0aGUgU2Ftc3VuZyBHYWxheHkgVGFiIDEwLjEgYW5kIE1vdG9yb2xhIFhPT01cbiAgICAgICAgICAgIC8vIEFuZHJvaWQgNC4wIChJQ1MpICAtIFRlc3RlZCBvbiBhIEdhbGF4eSBOZXh1cy4gTm90ZTogdHJhbnNpdGlvbiBwZXJmb3JtYW5jZSBjYW4gYmUgcG9vciBvbiB1cGdyYWRlZCBkZXZpY2VzXG4gICAgICAgICAgICAvLyBBbmRyb2lkIDQuMSAoSmVsbHkgQmVhbikgIC0gVGVzdGVkIG9uIGEgR2FsYXh5IE5leHVzIGFuZCBHYWxheHkgN1xuICAgICAgICAgICAgKCB0LnZlcnNpb24oJ0FuZHJvaWQnKT4yLjEgJiYgdC5pcygnV2Via2l0JykgKSB8fFxuXG4gICAgICAgICAgICAvLyBXaW5kb3dzIFBob25lIDctNy41IC0gVGVzdGVkIG9uIHRoZSBIVEMgU3Vycm91bmQgKDcuMCkgSFRDIFRyb3BoeSAoNy41KSwgTEctRTkwMCAoNy41KSwgTm9raWEgTHVtaWEgODAwXG4gICAgICAgICAgICB0LnZlcnNpb24oJ1dpbmRvd3MgUGhvbmUgT1MnKT49Ny4wIHx8XG5cbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNyAtIFRlc3RlZCBvbiBCbGFja0JlcnJ5IFRvcmNoIDk4MTBcbiAgICAgICAgICAgIC8vIEJsYWNrYmVycnkgNi4wIC0gVGVzdGVkIG9uIHRoZSBUb3JjaCA5ODAwIGFuZCBTdHlsZSA5NjcwXG4gICAgICAgICAgICB0LmlzKCdCbGFja0JlcnJ5JykgJiYgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk+PTYuMCB8fFxuICAgICAgICAgICAgLy8gQmxhY2tiZXJyeSBQbGF5Ym9vayAoMS4wLTIuMCkgLSBUZXN0ZWQgb24gUGxheUJvb2tcbiAgICAgICAgICAgIHQubWF0Y2goJ1BsYXlib29rLipUYWJsZXQnKSB8fFxuXG4gICAgICAgICAgICAvLyBQYWxtIFdlYk9TICgxLjQtMi4wKSAtIFRlc3RlZCBvbiB0aGUgUGFsbSBQaXhpICgxLjQpLCBQcmUgKDEuNCksIFByZSAyICgyLjApXG4gICAgICAgICAgICAoIHQudmVyc2lvbignd2ViT1MnKT49MS40ICYmIHQubWF0Y2goJ1BhbG18UHJlfFBpeGknKSApIHx8XG4gICAgICAgICAgICAvLyBQYWxtIFdlYk9TIDMuMCAgLSBUZXN0ZWQgb24gSFAgVG91Y2hQYWRcbiAgICAgICAgICAgIHQubWF0Y2goJ2hwLipUb3VjaFBhZCcpIHx8XG5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggTW9iaWxlICgxMiBCZXRhKSAtIFRlc3RlZCBvbiBBbmRyb2lkIDIuMyBkZXZpY2VcbiAgICAgICAgICAgICggdC5pcygnRmlyZWZveCcpICYmIHQudmVyc2lvbignRmlyZWZveCcpPj0xMiApIHx8XG5cbiAgICAgICAgICAgIC8vIENocm9tZSBmb3IgQW5kcm9pZCAtIFRlc3RlZCBvbiBBbmRyb2lkIDQuMCwgNC4xIGRldmljZVxuICAgICAgICAgICAgKCB0LmlzKCdDaHJvbWUnKSAmJiB0LmlzKCdBbmRyb2lkT1MnKSAmJiB0LnZlcnNpb24oJ0FuZHJvaWQnKT49NC4wICkgfHxcblxuICAgICAgICAgICAgLy8gU2t5ZmlyZSA0LjEgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoIHQuaXMoJ1NreWZpcmUnKSAmJiB0LnZlcnNpb24oJ1NreWZpcmUnKT49NC4xICYmIHQuaXMoJ0FuZHJvaWRPUycpICYmIHQudmVyc2lvbignQW5kcm9pZCcpPj0yLjMgKSB8fFxuXG4gICAgICAgICAgICAvLyBPcGVyYSBNb2JpbGUgMTEuNS0xMjogVGVzdGVkIG9uIEFuZHJvaWQgMi4zXG4gICAgICAgICAgICAoIHQuaXMoJ09wZXJhJykgJiYgdC52ZXJzaW9uKCdPcGVyYSBNb2JpJyk+MTEgJiYgdC5pcygnQW5kcm9pZE9TJykgKSB8fFxuXG4gICAgICAgICAgICAvLyBNZWVnbyAxLjIgLSBUZXN0ZWQgb24gTm9raWEgOTUwIGFuZCBOOVxuICAgICAgICAgICAgdC5pcygnTWVlR29PUycpIHx8XG5cbiAgICAgICAgICAgIC8vIFRpemVuIChwcmUtcmVsZWFzZSkgLSBUZXN0ZWQgb24gZWFybHkgaGFyZHdhcmVcbiAgICAgICAgICAgIHQuaXMoJ1RpemVuJykgfHxcblxuICAgICAgICAgICAgLy8gU2Ftc3VuZyBCYWRhIDIuMCAtIFRlc3RlZCBvbiBhIFNhbXN1bmcgV2F2ZSAzLCBEb2xwaGluIGJyb3dzZXJcbiAgICAgICAgICAgIC8vIEB0b2RvOiBtb3JlIHRlc3RzIGhlcmUhXG4gICAgICAgICAgICB0LmlzKCdEb2xmaW4nKSAmJiB0LnZlcnNpb24oJ0JhZGEnKT49Mi4wIHx8XG5cbiAgICAgICAgICAgIC8vIFVDIEJyb3dzZXIgLSBUZXN0ZWQgb24gQW5kcm9pZCAyLjMgZGV2aWNlXG4gICAgICAgICAgICAoICh0LmlzKCdVQyBCcm93c2VyJykgfHwgdC5pcygnRG9sZmluJykpICYmIHQudmVyc2lvbignQW5kcm9pZCcpPj0yLjMgKSB8fFxuXG4gICAgICAgICAgICAvLyBLaW5kbGUgMyBhbmQgRmlyZSAgLSBUZXN0ZWQgb24gdGhlIGJ1aWx0LWluIFdlYktpdCBicm93c2VyIGZvciBlYWNoXG4gICAgICAgICAgICAoIHQubWF0Y2goJ0tpbmRsZSBGaXJlJykgfHxcbiAgICAgICAgICAgICAgICB0LmlzKCdLaW5kbGUnKSAmJiB0LnZlcnNpb24oJ0tpbmRsZScpPj0zLjAgKSB8fFxuXG4gICAgICAgICAgICAvLyBOb29rIENvbG9yIDEuNC4xIC0gVGVzdGVkIG9uIG9yaWdpbmFsIE5vb2sgQ29sb3IsIG5vdCBOb29rIFRhYmxldFxuICAgICAgICAgICAgdC5pcygnQW5kcm9pZE9TJykgJiYgdC5pcygnTm9va1RhYmxldCcpIHx8XG5cbiAgICAgICAgICAgIC8vIENocm9tZSBEZXNrdG9wIDExLTIxIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICB0LnZlcnNpb24oJ0Nocm9tZScpPj0xMSAmJiAhJGlzTW9iaWxlIHx8XG5cbiAgICAgICAgICAgIC8vIFNhZmFyaSBEZXNrdG9wIDQtNSAtIFRlc3RlZCBvbiBPUyBYIDEwLjcgYW5kIFdpbmRvd3MgN1xuICAgICAgICAgICAgdC52ZXJzaW9uKCdTYWZhcmknKT49NS4wICYmICEkaXNNb2JpbGUgfHxcblxuICAgICAgICAgICAgLy8gRmlyZWZveCBEZXNrdG9wIDQtMTMgLSBUZXN0ZWQgb24gT1MgWCAxMC43IGFuZCBXaW5kb3dzIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignRmlyZWZveCcpPj00LjAgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBJbnRlcm5ldCBFeHBsb3JlciA3LTkgLSBUZXN0ZWQgb24gV2luZG93cyBYUCwgVmlzdGEgYW5kIDdcbiAgICAgICAgICAgIHQudmVyc2lvbignTVNJRScpPj03LjAgJiYgISRpc01vYmlsZSB8fFxuXG4gICAgICAgICAgICAvLyBPcGVyYSBEZXNrdG9wIDEwLTEyIC0gVGVzdGVkIG9uIE9TIFggMTAuNyBhbmQgV2luZG93cyA3XG4gICAgICAgICAgICAvLyBAcmVmZXJlbmNlOiBodHRwOi8vbXkub3BlcmEuY29tL2NvbW11bml0eS9vcGVud2ViL2lkb3BlcmEvXG4gICAgICAgICAgICB0LnZlcnNpb24oJ09wZXJhJyk+PTEwICYmICEkaXNNb2JpbGVcblxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgIHJldHVybiAnQSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQYWQnKTw0LjMgfHxcbiAgICAgICAgICAgIHQub3MoJ2lPUycpICYmIHQudmVyc2lvbignaVBob25lJyk8My4xIHx8XG4gICAgICAgICAgICB0Lm9zKCdpT1MnKSAmJiB0LnZlcnNpb24oJ2lQb2QnKTwzLjEgfHxcblxuICAgICAgICAgICAgLy8gQmxhY2tiZXJyeSA1LjA6IFRlc3RlZCBvbiB0aGUgU3Rvcm0gMiA5NTUwLCBCb2xkIDk3NzBcbiAgICAgICAgICAgIHQuaXMoJ0JsYWNrYmVycnknKSAmJiB0LnZlcnNpb24oJ0JsYWNrQmVycnknKT49NSAmJiB0LnZlcnNpb24oJ0JsYWNrQmVycnknKTw2IHx8XG5cbiAgICAgICAgICAgIC8vT3BlcmEgTWluaSAoNS4wLTYuNSkgLSBUZXN0ZWQgb24gaU9TIDMuMi80LjMgYW5kIEFuZHJvaWQgMi4zXG4gICAgICAgICAgICAoIHQudmVyc2lvbignT3BlcmEgTWluaScpPj01LjAgJiYgdC52ZXJzaW9uKCdPcGVyYSBNaW5pJyk8PTYuNSAmJlxuICAgICAgICAgICAgICAgICh0LnZlcnNpb24oJ0FuZHJvaWQnKT49Mi4zIHx8IHQuaXMoJ2lPUycpKSApIHx8XG5cbiAgICAgICAgICAgIC8vIE5va2lhIFN5bWJpYW5eMyAtIFRlc3RlZCBvbiBOb2tpYSBOOCAoU3ltYmlhbl4zKSwgQzcgKFN5bWJpYW5eMyksIGFsc28gd29ya3Mgb24gTjk3IChTeW1iaWFuXjEpXG4gICAgICAgICAgICB0Lm1hdGNoKCdOb2tpYU44fE5va2lhQzd8Tjk3LipTZXJpZXM2MHxTeW1iaWFuLzMnKSB8fFxuXG4gICAgICAgICAgICAvLyBAdG9kbzogcmVwb3J0IHRoaXMgKHRlc3RlZCBvbiBOb2tpYSBONzEpXG4gICAgICAgICAgICB0LnZlcnNpb24oJ09wZXJhIE1vYmknKT49MTEgJiYgdC5pcygnU3ltYmlhbk9TJylcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gJ0InO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAvLyBCbGFja2JlcnJ5IDQueCAtIFRlc3RlZCBvbiB0aGUgQ3VydmUgODMzMFxuICAgICAgICAgICAgdC52ZXJzaW9uKCdCbGFja0JlcnJ5Jyk8NS4wIHx8XG4gICAgICAgICAgICAvLyBXaW5kb3dzIE1vYmlsZSAtIFRlc3RlZCBvbiB0aGUgSFRDIExlbyAoV2luTW8gNS4yKVxuICAgICAgICAgICAgdC5tYXRjaCgnTVNJRU1vYmlsZXxXaW5kb3dzIENFLipNb2JpbGUnKSB8fCB0LnZlcnNpb24oJ1dpbmRvd3MgTW9iaWxlJyk8PTUuMlxuXG4gICAgICAgICAgICApe1xuICAgICAgICAgICAgcmV0dXJuICdDJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQWxsIG9sZGVyIHNtYXJ0cGhvbmUgcGxhdGZvcm1zIGFuZCBmZWF0dXJlcGhvbmVzIC0gQW55IGRldmljZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBtZWRpYSBxdWVyaWVzXG4gICAgICAgIC8vd2lsbCByZWNlaXZlIHRoZSBiYXNpYywgQyBncmFkZSBleHBlcmllbmNlLlxuICAgICAgICByZXR1cm4gJ0MnO1xuICAgIH07XG5cbiAgICBpbXBsLmRldGVjdE9TID0gZnVuY3Rpb24gKHVhKSB7XG4gICAgICAgIHJldHVybiBpbXBsLmZpbmRNYXRjaChpbXBsLm1vYmlsZURldGVjdFJ1bGVzLm9zczAsIHVhKSB8fFxuICAgICAgICAgICAgaW1wbC5maW5kTWF0Y2goaW1wbC5tb2JpbGVEZXRlY3RSdWxlcy5vc3MsIHVhKTtcbiAgICB9O1xuXG4gICAgaW1wbC5nZXREZXZpY2VTbWFsbGVyU2lkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ud2lkdGggPCB3aW5kb3cuc2NyZWVuLmhlaWdodCA/XG4gICAgICAgICAgICB3aW5kb3cuc2NyZWVuLndpZHRoIDpcbiAgICAgICAgICAgIHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgTW9iaWxlRGV0ZWN0IG9iamVjdC5cbiAgICAgKiA8YnI+XG4gICAgICogU3VjaCBhbiBvYmplY3Qgd2lsbCBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBnaXZlbiB1c2VyLWFnZW50IHN0cmluZyBhbmQgY2FjaGUgbW9zdCBvZiB0aGUgZGV0ZWN0IHF1ZXJpZXMuPGJyPlxuICAgICAqIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjZDllZGY3OyBib3JkZXI6IDFweCBzb2xpZCAjYmNlOGYxOyBjb2xvcjogIzNhODdhZDsgcGFkZGluZzogMTRweDsgYm9yZGVyLXJhZGl1czogMnB4OyBtYXJnaW4tdG9wOiAyMHB4XCI+XG4gICAgICogICAgIDxzdHJvbmc+RmluZCBpbmZvcm1hdGlvbiBob3cgdG8gZG93bmxvYWQgYW5kIGluc3RhbGw6PC9zdHJvbmc+XG4gICAgICogICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMvXCI+Z2l0aHViLmNvbS9oZ29lYmwvbW9iaWxlLWRldGVjdC5qcy88L2E+XG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8cHJlPlxuICAgICAqICAgICB2YXIgbWQgPSBuZXcgTW9iaWxlRGV0ZWN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgKiAgICAgaWYgKG1kLm1vYmlsZSgpKSB7XG4gICAgICogICAgICAgICBsb2NhdGlvbi5ocmVmID0gKG1kLm1vYmlsZUdyYWRlKCkgPT09ICdBJykgPyAnL21vYmlsZS8nIDogJy9seW54Lyc7XG4gICAgICogICAgIH1cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgdHlwaWNhbGx5IHRha2VuIGZyb20gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgb3IgaHR0cF9oZWFkZXJbJ1VzZXItQWdlbnQnXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UGhvbmVXaWR0aD02MDBdIDxzdHJvbmc+b25seSBmb3IgYnJvd3NlcnM8L3N0cm9uZz4gc3BlY2lmeSBhIHZhbHVlIGZvciB0aGUgbWF4aW11bVxuICAgICAqICAgICAgICB3aWR0aCBvZiBzbWFsbGVzdCBkZXZpY2Ugc2lkZSAoaW4gbG9naWNhbCBcIkNTU1wiIHBpeGVscykgdW50aWwgYSBkZXZpY2UgZGV0ZWN0ZWQgYXMgbW9iaWxlIHdpbGwgYmUgaGFuZGxlZFxuICAgICAqICAgICAgICBhcyBwaG9uZS5cbiAgICAgKiAgICAgICAgVGhpcyBpcyBvbmx5IHVzZWQgaW4gY2FzZXMgd2hlcmUgdGhlIGRldmljZSBjYW5ub3QgYmUgY2xhc3NpZmllZCBhcyBwaG9uZSBvciB0YWJsZXQuPGJyPlxuICAgICAqICAgICAgICBTZWUgPGEgaHJlZj1cImh0dHA6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvcHJhY3RpY2VzL3NjcmVlbnNfc3VwcG9ydC5odG1sXCI+RGVjbGFyaW5nIFRhYmxldCBMYXlvdXRzXG4gICAgICogICAgICAgIGZvciBBbmRyb2lkPC9hPi48YnI+XG4gICAgICogICAgICAgIElmIHlvdSBwcm92aWRlIGEgdmFsdWUgPCAwLCB0aGVuIHRoaXMgXCJmdXp6eVwiIGNoZWNrIGlzIGRpc2FibGVkLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBnbG9iYWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNb2JpbGVEZXRlY3QodXNlckFnZW50LCBtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgIHRoaXMudWEgPSBwcmVwYXJlVXNlckFnZW50KHVzZXJBZ2VudCk7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIC8vNjAwZHAgaXMgdHlwaWNhbCA3XCIgdGFibGV0IG1pbmltdW0gd2lkdGhcbiAgICAgICAgdGhpcy5tYXhQaG9uZVdpZHRoID0gbWF4UGhvbmVXaWR0aCB8fCA2MDA7XG4gICAgfVxuXG4gICAgTW9iaWxlRGV0ZWN0LnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IE1vYmlsZURldGVjdCxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgZGV0ZWN0ZWQgcGhvbmUgb3IgdGFibGV0IHR5cGUgb3IgPHR0Pm51bGw8L3R0PiBpZiBpdCBpcyBub3QgYSBtb2JpbGUgZGV2aWNlLlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIEZvciBhIGxpc3Qgb2YgcG9zc2libGUgcmV0dXJuIHZhbHVlcyBzZWUge0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0gYW5kIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blBob25lPC9jb2RlPiwgPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT4gb3JcbiAgICAgICAgICogPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaXMgcmV0dXJuZWQuPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgaW4gYnJvd3NlciwgdGhlIGRlY2lzaW9uIHdoZXRoZXIgcGhvbmUgb3IgdGFibGV0IGlzIG1hZGUgYmFzZWQgb24gPGNvZGU+c2NyZWVuLndpZHRoL2hlaWdodDwvY29kZT4uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBzZXJ2ZXItc2lkZSAobm9kZS5qcyksIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT5cbiAgICAgICAgICogYW5kIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+LCBzbyB5b3Ugd2lsbCBnZXQgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaGVyZS48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIHBob25lIGZhbWlseSBvciB0YWJsZXQgZmFtaWx5LCBlLmcuIFwiTmV4dXNcIi5cbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNtb2JpbGVcbiAgICAgICAgICovXG4gICAgICAgIG1vYmlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW1wbC5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUodGhpcy5fY2FjaGUsIHRoaXMudWEsIHRoaXMubWF4UGhvbmVXaWR0aCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubW9iaWxlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCBwaG9uZSB0eXBlL2ZhbWlseSBzdHJpbmcgb3IgPHR0Pm51bGw8L3R0Pi5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgcmV0dXJuZWQgdGFibGV0IChmYW1pbHkgb3IgcHJvZHVjZXIpIGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+aVBob25lLCBCbGFja0JlcnJ5LCBIVEMsIE5leHVzLCBEZWxsLCBNb3Rvcm9sYSwgU2Ftc3VuZywgTEcsIFNvbnksIEFzdXMsXG4gICAgICAgICAqIE5va2lhTHVtaWEsIE1pY3JvbWF4LCBQYWxtLCBWZXJ0dSwgUGFudGVjaCwgRmx5LCBXaWtvLCBpTW9iaWxlLCBTaW1WYWxsZXksXG4gICAgICAgICAqIFdvbGZnYW5nLCBBbGNhdGVsLCBOaW50ZW5kbywgQW1vaSwgSU5RLCBPbmVQbHVzLCBHZW5lcmljUGhvbmU8L3R0Pjxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJZiB0aGUgZGV2aWNlIGlzIG5vdCBkZXRlY3RlZCBieSB0aGUgcmVndWxhciBleHByZXNzaW9ucyBmcm9tIE1vYmlsZS1EZXRlY3QsIGEgdGVzdCBpcyBtYWRlIGFnYWluc3RcbiAgICAgICAgICogdGhlIHBhdHRlcm5zIG9mIDxhIGhyZWY9XCJodHRwOi8vZGV0ZWN0bW9iaWxlYnJvd3NlcnMuY29tL1wiPmRldGVjdG1vYmlsZWJyb3dzZXJzLmNvbTwvYT4uIElmIHRoaXMgdGVzdFxuICAgICAgICAgKiBpcyBwb3NpdGl2ZSwgYSB2YWx1ZSBvZiA8Y29kZT5Vbmtub3duUGhvbmU8L2NvZGU+IG9yIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IGlzIHJldHVybmVkLjxicj5cbiAgICAgICAgICogV2hlbiB1c2VkIGluIGJyb3dzZXIsIHRoZSBkZWNpc2lvbiB3aGV0aGVyIHBob25lIG9yIHRhYmxldCBpcyBtYWRlIGJhc2VkIG9uIDxjb2RlPnNjcmVlbi53aWR0aC9oZWlnaHQ8L2NvZGU+Ljxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgc2VydmVyLXNpZGUgKG5vZGUuanMpLCB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDxjb2RlPlVua25vd25UYWJsZXQ8L2NvZGU+XG4gICAgICAgICAqIGFuZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiwgc28geW91IHdpbGwgZ2V0IDxjb2RlPm51bGw8L2NvZGU+IGhlcmUsIHdoaWxlIHtAbGluayBNb2JpbGVEZXRlY3QjbW9iaWxlfVxuICAgICAgICAgKiB3aWxsIHJldHVybiA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPi48YnI+XG4gICAgICAgICAqIEJlIGF3YXJlIHRoYXQgc2luY2UgdjEuMC4wIGluIHRoaXMgc3BlY2lhbCBjYXNlIHlvdSB3aWxsIGdldCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiBvbmx5IGZvcjpcbiAgICAgICAgICoge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9LCBub3QgZm9yIHtAbGluayBNb2JpbGVEZXRlY3QjcGhvbmV9IGFuZCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3RhYmxldH0uXG4gICAgICAgICAqIEluIHZlcnNpb25zIGJlZm9yZSB2MS4wLjAgYWxsIDMgbWV0aG9kcyByZXR1cm5lZCA8Y29kZT5Vbmtub3duTW9iaWxlPC9jb2RlPiB3aGljaCB3YXMgdGVkaW91cyB0byB1c2UuXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyB5b3Ugd2lsbCB1c2UgdGhlIHJldHVybiB2YWx1ZSBqdXN0IGFzIGEgYm9vbGVhbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBvZiB0aGUgcGhvbmUgZmFtaWx5IG9yIHByb2R1Y2VyLCBlLmcuIFwiaVBob25lXCJcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNwaG9uZVxuICAgICAgICAgKi9cbiAgICAgICAgcGhvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLnBob25lO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCB0YWJsZXQgdHlwZS9mYW1pbHkgc3RyaW5nIG9yIDx0dD5udWxsPC90dD4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogVGhlIHJldHVybmVkIHRhYmxldCAoZmFtaWx5IG9yIHByb2R1Y2VyKSBpcyBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PmlQYWQsIE5leHVzVGFibGV0LCBHb29nbGVUYWJsZXQsIFNhbXN1bmdUYWJsZXQsIEtpbmRsZSwgU3VyZmFjZVRhYmxldCxcbiAgICAgICAgICogSFBUYWJsZXQsIEFzdXNUYWJsZXQsIEJsYWNrQmVycnlUYWJsZXQsIEhUQ3RhYmxldCwgTW90b3JvbGFUYWJsZXQsIE5vb2tUYWJsZXQsXG4gICAgICAgICAqIEFjZXJUYWJsZXQsIFRvc2hpYmFUYWJsZXQsIExHVGFibGV0LCBGdWppdHN1VGFibGV0LCBQcmVzdGlnaW9UYWJsZXQsXG4gICAgICAgICAqIExlbm92b1RhYmxldCwgRGVsbFRhYmxldCwgWWFydmlrVGFibGV0LCBNZWRpb25UYWJsZXQsIEFybm92YVRhYmxldCxcbiAgICAgICAgICogSW50ZW5zb1RhYmxldCwgSVJVVGFibGV0LCBNZWdhZm9uVGFibGV0LCBFYm9kYVRhYmxldCwgQWxsVmlld1RhYmxldCxcbiAgICAgICAgICogQXJjaG9zVGFibGV0LCBBaW5vbFRhYmxldCwgTm9raWFMdW1pYVRhYmxldCwgU29ueVRhYmxldCwgUGhpbGlwc1RhYmxldCxcbiAgICAgICAgICogQ3ViZVRhYmxldCwgQ29ieVRhYmxldCwgTUlEVGFibGV0LCBNU0lUYWJsZXQsIFNNaVRUYWJsZXQsIFJvY2tDaGlwVGFibGV0LFxuICAgICAgICAgKiBGbHlUYWJsZXQsIGJxVGFibGV0LCBIdWF3ZWlUYWJsZXQsIE5lY1RhYmxldCwgUGFudGVjaFRhYmxldCwgQnJvbmNob1RhYmxldCxcbiAgICAgICAgICogVmVyc3VzVGFibGV0LCBaeW5jVGFibGV0LCBQb3NpdGl2b1RhYmxldCwgTmFiaVRhYmxldCwgS29ib1RhYmxldCwgRGFuZXdUYWJsZXQsXG4gICAgICAgICAqIFRleGV0VGFibGV0LCBQbGF5c3RhdGlvblRhYmxldCwgVHJla3N0b3JUYWJsZXQsIFB5bGVBdWRpb1RhYmxldCwgQWR2YW5UYWJsZXQsXG4gICAgICAgICAqIERhbnlUZWNoVGFibGV0LCBHYWxhcGFkVGFibGV0LCBNaWNyb21heFRhYmxldCwgS2FyYm9ublRhYmxldCwgQWxsRmluZVRhYmxldCxcbiAgICAgICAgICogUFJPU0NBTlRhYmxldCwgWU9ORVNUYWJsZXQsIENoYW5nSmlhVGFibGV0LCBHVVRhYmxldCwgUG9pbnRPZlZpZXdUYWJsZXQsXG4gICAgICAgICAqIE92ZXJtYXhUYWJsZXQsIEhDTFRhYmxldCwgRFBTVGFibGV0LCBWaXN0dXJlVGFibGV0LCBDcmVzdGFUYWJsZXQsXG4gICAgICAgICAqIE1lZGlhdGVrVGFibGV0LCBDb25jb3JkZVRhYmxldCwgR29DbGV2ZXJUYWJsZXQsIE1vZGVjb21UYWJsZXQsIFZvbmlub1RhYmxldCxcbiAgICAgICAgICogRUNTVGFibGV0LCBTdG9yZXhUYWJsZXQsIFZvZGFmb25lVGFibGV0LCBFc3NlbnRpZWxCVGFibGV0LCBSb3NzTW9vclRhYmxldCxcbiAgICAgICAgICogaU1vYmlsZVRhYmxldCwgVG9saW5vVGFibGV0LCBBdWRpb1NvbmljVGFibGV0LCBBTVBFVGFibGV0LCBTa2tUYWJsZXQsXG4gICAgICAgICAqIFRlY25vVGFibGV0LCBKWERUYWJsZXQsIGlKb3lUYWJsZXQsIEZYMlRhYmxldCwgWG9yb1RhYmxldCwgVmlld3NvbmljVGFibGV0LFxuICAgICAgICAgKiBWZXJpem9uVGFibGV0LCBPZHlzVGFibGV0LCBDYXB0aXZhVGFibGV0LCBJY29uYml0VGFibGV0LCBUZWNsYXN0VGFibGV0LFxuICAgICAgICAgKiBPbmRhVGFibGV0LCBKYXl0ZWNoVGFibGV0LCBCbGF1cHVua3RUYWJsZXQsIERpZ21hVGFibGV0LCBFdm9saW9UYWJsZXQsXG4gICAgICAgICAqIExhdmFUYWJsZXQsIEFvY1RhYmxldCwgTXBtYW5UYWJsZXQsIENlbGtvblRhYmxldCwgV29sZGVyVGFibGV0LCBNZWRpYWNvbVRhYmxldCxcbiAgICAgICAgICogTWlUYWJsZXQsIE5pYmlydVRhYmxldCwgTmV4b1RhYmxldCwgTGVhZGVyVGFibGV0LCBVYmlzbGF0ZVRhYmxldCxcbiAgICAgICAgICogUG9ja2V0Qm9va1RhYmxldCwgS29jYXNvVGFibGV0LCBIaXNlbnNlVGFibGV0LCBIdWRsLCBUZWxzdHJhVGFibGV0LFxuICAgICAgICAgKiBHZW5lcmljVGFibGV0PC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSWYgdGhlIGRldmljZSBpcyBub3QgZGV0ZWN0ZWQgYnkgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZnJvbSBNb2JpbGUtRGV0ZWN0LCBhIHRlc3QgaXMgbWFkZSBhZ2FpbnN0XG4gICAgICAgICAqIHRoZSBwYXR0ZXJucyBvZiA8YSBocmVmPVwiaHR0cDovL2RldGVjdG1vYmlsZWJyb3dzZXJzLmNvbS9cIj5kZXRlY3Rtb2JpbGVicm93c2Vycy5jb208L2E+LiBJZiB0aGlzIHRlc3RcbiAgICAgICAgICogaXMgcG9zaXRpdmUsIGEgdmFsdWUgb2YgPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT4gb3IgPGNvZGU+VW5rbm93bk1vYmlsZTwvY29kZT4gaXMgcmV0dXJuZWQuPGJyPlxuICAgICAgICAgKiBXaGVuIHVzZWQgaW4gYnJvd3NlciwgdGhlIGRlY2lzaW9uIHdoZXRoZXIgcGhvbmUgb3IgdGFibGV0IGlzIG1hZGUgYmFzZWQgb24gPGNvZGU+c2NyZWVuLndpZHRoL2hlaWdodDwvY29kZT4uPGJyPlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFdoZW4gdXNlZCBzZXJ2ZXItc2lkZSAobm9kZS5qcyksIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gPGNvZGU+VW5rbm93blRhYmxldDwvY29kZT5cbiAgICAgICAgICogYW5kIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+LCBzbyB5b3Ugd2lsbCBnZXQgPGNvZGU+bnVsbDwvY29kZT4gaGVyZSwgd2hpbGUge0BsaW5rIE1vYmlsZURldGVjdCNtb2JpbGV9XG4gICAgICAgICAqIHdpbGwgcmV0dXJuIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+Ljxicj5cbiAgICAgICAgICogQmUgYXdhcmUgdGhhdCBzaW5jZSB2MS4wLjAgaW4gdGhpcyBzcGVjaWFsIGNhc2UgeW91IHdpbGwgZ2V0IDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IG9ubHkgZm9yOlxuICAgICAgICAgKiB7QGxpbmsgTW9iaWxlRGV0ZWN0I21vYmlsZX0sIG5vdCBmb3Ige0BsaW5rIE1vYmlsZURldGVjdCNwaG9uZX0gYW5kIHtAbGluayBNb2JpbGVEZXRlY3QjdGFibGV0fS5cbiAgICAgICAgICogSW4gdmVyc2lvbnMgYmVmb3JlIHYxLjAuMCBhbGwgMyBtZXRob2RzIHJldHVybmVkIDxjb2RlPlVua25vd25Nb2JpbGU8L2NvZGU+IHdoaWNoIHdhcyB0ZWRpb3VzIHRvIHVzZS5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJbiBtb3N0IGNhc2VzIHlvdSB3aWxsIHVzZSB0aGUgcmV0dXJuIHZhbHVlIGp1c3QgYXMgYSBib29sZWFuLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUga2V5IG9mIHRoZSB0YWJsZXQgZmFtaWx5IG9yIHByb2R1Y2VyLCBlLmcuIFwiU2Ftc3VuZ1RhYmxldFwiXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdGFibGV0XG4gICAgICAgICAqL1xuICAgICAgICB0YWJsZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGltcGwucHJlcGFyZURldGVjdGlvbkNhY2hlKHRoaXMuX2NhY2hlLCB0aGlzLnVhLCB0aGlzLm1heFBob25lV2lkdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLnRhYmxldDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgKGZpcnN0KSBkZXRlY3RlZCB1c2VyLWFnZW50IHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSByZXR1cm5lZCB1c2VyLWFnZW50IGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+Q2hyb21lLCBEb2xmaW4sIE9wZXJhLCBTa3lmaXJlLCBFZGdlLCBJRSwgRmlyZWZveCwgQm9sdCwgVGVhU2hhcmssIEJsYXplcixcbiAgICAgICAgICogU2FmYXJpLCBXZUNoYXQsIFVDQnJvd3NlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlciwgRGlpZ29Ccm93c2VyLCBNZXJjdXJ5LFxuICAgICAgICAgKiBPYmlnb0Jyb3dzZXIsIE5ldEZyb250LCBHZW5lcmljQnJvd3NlciwgUGFsZU1vb248L3R0Pjxicj5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBJbiBtb3N0IGNhc2VzIGNhbGxpbmcge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnR9IHdpbGwgYmUgc3VmZmljaWVudC4gQnV0IHRoZXJlIGFyZSByYXJlXG4gICAgICAgICAqIGNhc2VzIHdoZXJlIGEgbW9iaWxlIGRldmljZSBwcmV0ZW5kcyB0byBiZSBtb3JlIHRoYW4gb25lIHBhcnRpY3VsYXIgYnJvd3Nlci4gWW91IGNhbiBnZXQgdGhlXG4gICAgICAgICAqIGxpc3Qgb2YgYWxsIG1hdGNoZXMgd2l0aCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3VzZXJBZ2VudHN9IG9yIGNoZWNrIGZvciBhIHBhcnRpY3VsYXIgdmFsdWUgYnlcbiAgICAgICAgICogcHJvdmlkaW5nIG9uZSBvZiB0aGUgZGVmaW5lZCBrZXlzIGFzIGZpcnN0IGFyZ3VtZW50IHRvIHtAbGluayBNb2JpbGVEZXRlY3QjaXN9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUga2V5IGZvciB0aGUgZGV0ZWN0ZWQgdXNlci1hZ2VudCBvciA8dHQ+bnVsbDwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdXNlckFnZW50XG4gICAgICAgICAqL1xuICAgICAgICB1c2VyQWdlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZS51c2VyQWdlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnVzZXJBZ2VudCA9IGltcGwuZmluZE1hdGNoKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMudWFzLCB0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYWxsIGRldGVjdGVkIHVzZXItYWdlbnQgc3RyaW5ncy5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBUaGUgYXJyYXkgaXMgZW1wdHkgb3IgY29udGFpbnMgb25lIG9yIG1vcmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0PkNocm9tZSwgRG9sZmluLCBPcGVyYSwgU2t5ZmlyZSwgRWRnZSwgSUUsIEZpcmVmb3gsIEJvbHQsIFRlYVNoYXJrLCBCbGF6ZXIsXG4gICAgICAgICAqIFNhZmFyaSwgV2VDaGF0LCBVQ0Jyb3dzZXIsIGJhaWR1Ym94YXBwLCBiYWlkdWJyb3dzZXIsIERpaWdvQnJvd3NlciwgTWVyY3VyeSxcbiAgICAgICAgICogT2JpZ29Ccm93c2VyLCBOZXRGcm9udCwgR2VuZXJpY0Jyb3dzZXIsIFBhbGVNb29uPC90dD48YnI+XG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogSW4gbW9zdCBjYXNlcyBjYWxsaW5nIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSB3aWxsIGJlIHN1ZmZpY2llbnQuIEJ1dCB0aGVyZSBhcmUgcmFyZVxuICAgICAgICAgKiBjYXNlcyB3aGVyZSBhIG1vYmlsZSBkZXZpY2UgcHJldGVuZHMgdG8gYmUgbW9yZSB0aGFuIG9uZSBwYXJ0aWN1bGFyIGJyb3dzZXIuIFlvdSBjYW4gZ2V0IHRoZVxuICAgICAgICAgKiBsaXN0IG9mIGFsbCBtYXRjaGVzIHdpdGgge0BsaW5rIE1vYmlsZURldGVjdCN1c2VyQWdlbnRzfSBvciBjaGVjayBmb3IgYSBwYXJ0aWN1bGFyIHZhbHVlIGJ5XG4gICAgICAgICAqIHByb3ZpZGluZyBvbmUgb2YgdGhlIGRlZmluZWQga2V5cyBhcyBmaXJzdCBhcmd1bWVudCB0byB7QGxpbmsgTW9iaWxlRGV0ZWN0I2lzfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge0FycmF5fSB0aGUgYXJyYXkgb2YgZGV0ZWN0ZWQgdXNlci1hZ2VudCBrZXlzIG9yIDx0dD5bXTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjdXNlckFnZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlckFnZW50czogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlLnVzZXJBZ2VudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLnVzZXJBZ2VudHMgPSBpbXBsLmZpbmRNYXRjaGVzKGltcGwubW9iaWxlRGV0ZWN0UnVsZXMudWFzLCB0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnRzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkZXRlY3RlZCBvcGVyYXRpbmcgc3lzdGVtIHN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+LlxuICAgICAgICAgKiA8YnI+XG4gICAgICAgICAqIFRoZSBvcGVyYXRpbmcgc3lzdGVtIGlzIG9uZSBvZiBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+QW5kcm9pZE9TLCBCbGFja0JlcnJ5T1MsIFBhbG1PUywgU3ltYmlhbk9TLCBXaW5kb3dzTW9iaWxlT1MsIFdpbmRvd3NQaG9uZU9TLFxuICAgICAgICAgKiBpT1MsIGlQYWRPUywgTWVlR29PUywgTWFlbW9PUywgSmF2YU9TLCB3ZWJPUywgYmFkYU9TLCBCUkVXT1M8L3R0Pjxicj5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGtleSBmb3IgdGhlIGRldGVjdGVkIG9wZXJhdGluZyBzeXN0ZW0uXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3Qjb3NcbiAgICAgICAgICovXG4gICAgICAgIG9zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUub3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLm9zID0gaW1wbC5kZXRlY3RPUyh0aGlzLnVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5vcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJzaW9uIChhcyBOdW1iZXIpIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKiBXaWxsIHJldHVybiBhIGZsb2F0IG51bWJlci4gKGVnLiAyXzAgd2lsbCByZXR1cm4gMi4wLCA0LjMuMSB3aWxsIHJldHVybiA0LjMxKVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGEga2V5IGRlZmluaW5nIGEgdGhpbmcgd2hpY2ggaGFzIGEgdmVyc2lvbi48YnI+XG4gICAgICAgICAqICAgICAgICBZb3UgY2FuIHVzZSBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0Pk1vYmlsZSwgQnVpbGQsIFZlcnNpb24sIFZlbmRvcklELCBpUGFkLCBpUGhvbmUsIGlQb2QsIEtpbmRsZSwgQ2hyb21lLCBDb2FzdCxcbiAgICAgICAgICogRG9sZmluLCBGaXJlZm94LCBGZW5uZWMsIEVkZ2UsIElFLCBOZXRGcm9udCwgTm9raWFCcm93c2VyLCBPcGVyYSwgT3BlcmEgTWluaSxcbiAgICAgICAgICogT3BlcmEgTW9iaSwgVUNCcm93c2VyLCBNUVFCcm93c2VyLCBNaWNyb01lc3NlbmdlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlcixcbiAgICAgICAgICogU2Ftc3VuZ0Jyb3dzZXIsIElyb24sIFNhZmFyaSwgU2t5ZmlyZSwgVGl6ZW4sIFdlYmtpdCwgUGFsZU1vb24sIEdlY2tvLCBUcmlkZW50LFxuICAgICAgICAgKiBQcmVzdG8sIEdvYW5uYSwgaU9TLCBBbmRyb2lkLCBCbGFja0JlcnJ5LCBCUkVXLCBKYXZhLCBXaW5kb3dzIFBob25lIE9TLCBXaW5kb3dzXG4gICAgICAgICAqIFBob25lLCBXaW5kb3dzIENFLCBXaW5kb3dzIE5ULCBTeW1iaWFuLCB3ZWJPUzwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgdmVyc2lvbiBhcyBmbG9hdCBvciA8dHQ+TmFOPC90dD4gaWYgVXNlci1BZ2VudCBkb2Vzbid0IGNvbnRhaW4gdGhpcyB2ZXJzaW9uLlxuICAgICAgICAgKiAgICAgICAgICBCZSBjYXJlZnVsIHdoZW4gY29tcGFyaW5nIHRoaXMgdmFsdWUgd2l0aCAnPT0nIG9wZXJhdG9yIVxuICAgICAgICAgKiBAZnVuY3Rpb24gTW9iaWxlRGV0ZWN0I3ZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIHZlcnNpb246IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbXBsLmdldFZlcnNpb24oa2V5LCB0aGlzLnVhKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSB2ZXJzaW9uIChhcyBTdHJpbmcpIG9mIHRoZSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgVXNlci1BZ2VudC5cbiAgICAgICAgICogPGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGEga2V5IGRlZmluaW5nIGEgdGhpbmcgd2hpY2ggaGFzIGEgdmVyc2lvbi48YnI+XG4gICAgICAgICAqICAgICAgICBZb3UgY2FuIHVzZSBvbmUgb2YgZm9sbG93aW5nIGtleXM6PGJyPlxuICAgICAgICAgKiA8YnI+PHR0Pk1vYmlsZSwgQnVpbGQsIFZlcnNpb24sIFZlbmRvcklELCBpUGFkLCBpUGhvbmUsIGlQb2QsIEtpbmRsZSwgQ2hyb21lLCBDb2FzdCxcbiAgICAgICAgICogRG9sZmluLCBGaXJlZm94LCBGZW5uZWMsIEVkZ2UsIElFLCBOZXRGcm9udCwgTm9raWFCcm93c2VyLCBPcGVyYSwgT3BlcmEgTWluaSxcbiAgICAgICAgICogT3BlcmEgTW9iaSwgVUNCcm93c2VyLCBNUVFCcm93c2VyLCBNaWNyb01lc3NlbmdlciwgYmFpZHVib3hhcHAsIGJhaWR1YnJvd3NlcixcbiAgICAgICAgICogU2Ftc3VuZ0Jyb3dzZXIsIElyb24sIFNhZmFyaSwgU2t5ZmlyZSwgVGl6ZW4sIFdlYmtpdCwgUGFsZU1vb24sIEdlY2tvLCBUcmlkZW50LFxuICAgICAgICAgKiBQcmVzdG8sIEdvYW5uYSwgaU9TLCBBbmRyb2lkLCBCbGFja0JlcnJ5LCBCUkVXLCBKYXZhLCBXaW5kb3dzIFBob25lIE9TLCBXaW5kb3dzXG4gICAgICAgICAqIFBob25lLCBXaW5kb3dzIENFLCBXaW5kb3dzIE5ULCBTeW1iaWFuLCB3ZWJPUzwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgXCJyYXdcIiB2ZXJzaW9uIGFzIFN0cmluZyBvciA8dHQ+bnVsbDwvdHQ+IGlmIFVzZXItQWdlbnQgZG9lc24ndCBjb250YWluIHRoaXMgdmVyc2lvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCN2ZXJzaW9uU3RyXG4gICAgICAgICAqL1xuICAgICAgICB2ZXJzaW9uU3RyOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gaW1wbC5nZXRWZXJzaW9uU3RyKGtleSwgdGhpcy51YSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdsb2JhbCB0ZXN0IGtleSBhZ2FpbnN0IHVzZXJBZ2VudCwgb3MsIHBob25lLCB0YWJsZXQgYW5kIHNvbWUgb3RoZXIgcHJvcGVydGllcyBvZiB1c2VyQWdlbnQgc3RyaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IHRoZSBrZXkgKGNhc2UtaW5zZW5zaXRpdmUpIG9mIGEgdXNlckFnZW50LCBhbiBvcGVyYXRpbmcgc3lzdGVtLCBwaG9uZSBvclxuICAgICAgICAgKiAgICAgICAgdGFibGV0IGZhbWlseS48YnI+XG4gICAgICAgICAqICAgICAgICBGb3IgYSBjb21wbGV0ZSBsaXN0IG9mIHBvc3NpYmxlIHZhbHVlcywgc2VlIHtAbGluayBNb2JpbGVEZXRlY3QjdXNlckFnZW50fSxcbiAgICAgICAgICogICAgICAgIHtAbGluayBNb2JpbGVEZXRlY3Qjb3N9LCB7QGxpbmsgTW9iaWxlRGV0ZWN0I3Bob25lfSwge0BsaW5rIE1vYmlsZURldGVjdCN0YWJsZXR9Ljxicj5cbiAgICAgICAgICogICAgICAgIEFkZGl0aW9uYWxseSB5b3UgaGF2ZSBmb2xsb3dpbmcga2V5czo8YnI+XG4gICAgICAgICAqIDxicj48dHQ+Qm90LCBNb2JpbGVCb3QsIERlc2t0b3BNb2RlLCBUViwgV2ViS2l0LCBDb25zb2xlLCBXYXRjaDwvdHQ+PGJyPlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gPHR0PnRydWU8L3R0PiB3aGVuIHRoZSBnaXZlbiBrZXkgaXMgb25lIG9mIHRoZSBkZWZpbmVkIGtleXMgb2YgdXNlckFnZW50LCBvcywgcGhvbmUsXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICB0YWJsZXQgb3Igb25lIG9mIHRoZSBsaXN0ZWQgYWRkaXRpb25hbCBrZXlzLCBvdGhlcndpc2UgPHR0PmZhbHNlPC90dD5cbiAgICAgICAgICogQGZ1bmN0aW9uIE1vYmlsZURldGVjdCNpc1xuICAgICAgICAgKi9cbiAgICAgICAgaXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluc0lDKHRoaXMudXNlckFnZW50cygpLCBrZXkpIHx8XG4gICAgICAgICAgICAgICAgICAgZXF1YWxJQyhrZXksIHRoaXMub3MoKSkgfHxcbiAgICAgICAgICAgICAgICAgICBlcXVhbElDKGtleSwgdGhpcy5waG9uZSgpKSB8fFxuICAgICAgICAgICAgICAgICAgIGVxdWFsSUMoa2V5LCB0aGlzLnRhYmxldCgpKSB8fFxuICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zSUMoaW1wbC5maW5kTWF0Y2hlcyhpbXBsLm1vYmlsZURldGVjdFJ1bGVzLnV0aWxzLCB0aGlzLnVhKSwga2V5KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRG8gYSBxdWljayB0ZXN0IGFnYWluc3QgbmF2aWdhdG9yOjp1c2VyQWdlbnQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cH0gcGF0dGVybiB0aGUgcGF0dGVybiwgZWl0aGVyIGFzIFN0cmluZyBvciBSZWdFeHBcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAoYSBzdHJpbmcgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBjYXNlLWluc2Vuc2l0aXZlIFJlZ0V4cCkuXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSA8dHQ+dHJ1ZTwvdHQ+IHdoZW4gdGhlIHBhdHRlcm4gbWF0Y2hlcywgb3RoZXJ3aXNlIDx0dD5mYWxzZTwvdHQ+XG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbWF0Y2hcbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoOiBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgICAgICAgaWYgKCEocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0aGlzLnVhKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIG1vYmlsZSBkZXZpY2UgY2FuIGJlIGNvbnNpZGVyZWQgYXMgcGhvbmUgcmVnYXJkaW5nIDxjb2RlPnNjcmVlbi53aWR0aDwvY29kZT4uXG4gICAgICAgICAqIDxicj5cbiAgICAgICAgICogT2J2aW91c2x5IHRoaXMgbWV0aG9kIG1ha2VzIHNlbnNlIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgKG5vdCBmb3IgTm9kZS5qcykhXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UGhvbmVXaWR0aF0gdGhlIG1heGltdW0gbG9naWNhbCBwaXhlbHMgKGFrYS4gQ1NTLXBpeGVscykgdG8gYmUgY29uc2lkZXJlZCBhcyBwaG9uZS48YnI+XG4gICAgICAgICAqICAgICAgICBUaGUgYXJndW1lbnQgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBwcmVzZW50IG9yIGZhbHN5LCB0aGUgdmFsdWUgb2YgdGhlIGNvbnN0cnVjdG9yIGlzIHRha2VuLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9IDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gaWYgc2NyZWVuIHNpemUgd2Fzbid0IGRldGVjdGFibGUsIGVsc2UgPGNvZGU+dHJ1ZTwvY29kZT5cbiAgICAgICAgICogICAgICAgICAgd2hlbiBzY3JlZW4ud2lkdGggaXMgbGVzcyBvciBlcXVhbCB0byBtYXhQaG9uZVdpZHRoLCBvdGhlcndpc2UgPGNvZGU+ZmFsc2U8L2NvZGU+Ljxicj5cbiAgICAgICAgICogICAgICAgICAgV2lsbCBhbHdheXMgcmV0dXJuIDxjb2RlPnVuZGVmaW5lZDwvY29kZT4gc2VydmVyLXNpZGUuXG4gICAgICAgICAqL1xuICAgICAgICBpc1Bob25lU2l6ZWQ6IGZ1bmN0aW9uIChtYXhQaG9uZVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gTW9iaWxlRGV0ZWN0LmlzUGhvbmVTaXplZChtYXhQaG9uZVdpZHRoIHx8IHRoaXMubWF4UGhvbmVXaWR0aCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIG1vYmlsZSBncmFkZSAoJ0EnLCAnQicsICdDJykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IG9uZSBvZiB0aGUgbW9iaWxlIGdyYWRlcyAoJ0EnLCAnQicsICdDJykuXG4gICAgICAgICAqIEBmdW5jdGlvbiBNb2JpbGVEZXRlY3QjbW9iaWxlR3JhZGVcbiAgICAgICAgICovXG4gICAgICAgIG1vYmlsZUdyYWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGUuZ3JhZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLmdyYWRlID0gaW1wbC5tb2JpbGVHcmFkZSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5ncmFkZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBlbnZpcm9ubWVudC1kZXBlbmRlbnRcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnNjcmVlbikge1xuICAgICAgICBNb2JpbGVEZXRlY3QuaXNQaG9uZVNpemVkID0gZnVuY3Rpb24gKG1heFBob25lV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXhQaG9uZVdpZHRoIDwgMCA/IHVuZGVmaW5lZCA6IGltcGwuZ2V0RGV2aWNlU21hbGxlclNpZGUoKSA8PSBtYXhQaG9uZVdpZHRoO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIE1vYmlsZURldGVjdC5pc1Bob25lU2l6ZWQgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBzaG91bGQgbm90IGJlIHJlcGxhY2VkIGJ5IGEgY29tcGxldGVseSBuZXcgb2JqZWN0IC0ganVzdCBvdmVyd3JpdGUgZXhpc3RpbmcgbWV0aG9kc1xuICAgIE1vYmlsZURldGVjdC5faW1wbCA9IGltcGw7XG4gICAgXG4gICAgTW9iaWxlRGV0ZWN0LnZlcnNpb24gPSAnMS40LjQgMjAxOS0wOS0yMSc7XG5cbiAgICByZXR1cm4gTW9iaWxlRGV0ZWN0O1xufSk7IC8vIGVuZCBvZiBjYWxsIG9mIGRlZmluZSgpXG59KSgoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZhY3RvcnkpIHsgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7IH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZmFjdG9yeSkgeyB3aW5kb3cuTW9iaWxlRGV0ZWN0ID0gZmFjdG9yeSgpOyB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBsZWFzZSBmaWxlIGEgYnVnIGlmIHlvdSBnZXQgdGhpcyBlcnJvciFcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGVudmlyb25tZW50Jyk7XG4gICAgfVxufSkoKSk7IiwiLyohXG4gKiBAZmlsZU92ZXJ2aWV3IFRvdWNoU3dpcGUgLSBqUXVlcnkgUGx1Z2luXG4gKiBAdmVyc2lvbiAxLjYuMThcbiAqXG4gKiBAYXV0aG9yIE1hdHQgQnJ5c29uIGh0dHA6Ly93d3cuZ2l0aHViLmNvbS9tYXR0YnJ5c29uXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpblxuICogQHNlZSBodHRwOi8vbGFicy5yYW1waW50ZXJhY3RpdmUuY28udWsvdG91Y2hTd2lwZS9cbiAqIEBzZWUgaHR0cDovL3BsdWdpbnMuanF1ZXJ5LmNvbS9wcm9qZWN0L3RvdWNoU3dpcGVcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNSBNYXR0IEJyeXNvblxuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuXG4gKlxuICovXG5cbi8qXG4gKlxuICogQ2hhbmdlbG9nXG4gKiAkRGF0ZTogMjAxMC0xMi0xMiAoV2VkLCAxMiBEZWMgMjAxMCkgJFxuICogJHZlcnNpb246IDEuMC4wXG4gKiAkdmVyc2lvbjogMS4wLjEgLSByZW1vdmVkIG11bHRpYnl0ZSBjb21tZW50c1xuICpcbiAqICREYXRlOiAyMDExLTIxLTAyIChNb24sIDIxIEZlYiAyMDExKSAkXG4gKiAkdmVyc2lvbjogMS4xLjAgXHQtIGFkZGVkIGFsbG93UGFnZVNjcm9sbCBwcm9wZXJ0eSB0byBhbGxvdyBzd2lwaW5nIGFuZCBzY3JvbGxpbmcgb2YgcGFnZVxuICpcdFx0XHRcdFx0LSBjaGFuZ2VkIGhhbmRsZXIgc2lnbmF0dXJlcyBzbyBvbmUgaGFuZGxlciBjYW4gYmUgdXNlZCBmb3IgbXVsdGlwbGUgZXZlbnRzXG4gKiAkRGF0ZTogMjAxMS0yMy0wMiAoV2VkLCAyMyBGZWIgMjAxMSkgJFxuICogJHZlcnNpb246IDEuMi4wIFx0LSBhZGRlZCBjbGljayBoYW5kbGVyLiBUaGlzIGlzIGZpcmVkIGlmIHRoZSB1c2VyIHNpbXBseSBjbGlja3MgYW5kIGRvZXMgbm90IHN3aXBlLiBUaGUgZXZlbnQgb2JqZWN0IGFuZCBjbGljayB0YXJnZXQgYXJlIHBhc3NlZCB0byBoYW5kbGVyLlxuICpcdFx0XHRcdFx0LSBJZiB5b3UgdXNlIHRoZSBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvanF1ZXJ5LXVpLWZvci1pcGFkLWFuZC1pcGhvbmUvIHBsdWdpbiwgeW91IGNhbiBhbHNvIGFzc2lnbiBqUXVlcnkgbW91c2UgZXZlbnRzIHRvIGNoaWxkcmVuIG9mIGEgdG91Y2hTd2lwZSBvYmplY3QuXG4gKiAkdmVyc2lvbjogMS4yLjEgXHQtIHJlbW92ZWQgY29uc29sZSBsb2chXG4gKlxuICogJHZlcnNpb246IDEuMi4yIFx0LSBGaXhlZCBidWcgd2hlcmUgc2NvcGUgd2FzIG5vdCBwcmVzZXJ2ZWQgaW4gY2FsbGJhY2sgbWV0aG9kcy5cbiAqXG4gKiAkRGF0ZTogMjAxMS0yOC0wNCAoVGh1cnMsIDI4IEFwcmlsIDIwMTEpICRcbiAqICR2ZXJzaW9uOiAxLjIuNCBcdC0gQ2hhbmdlZCBsaWNlbmNlIHRlcm1zIHRvIGJlIE1JVCBvciBHUEwgaW5saW5lIHdpdGggalF1ZXJ5LiBBZGRlZCBjaGVjayBmb3Igc3VwcG9ydCBvZiB0b3VjaCBldmVudHMgdG8gc3RvcCBub24gY29tcGF0aWJsZSBicm93c2VycyBlcnJvcmluZy5cbiAqXG4gKiAkRGF0ZTogMjAxMS0yNy0wOSAoVHVlcywgMjcgU2VwdGVtYmVyIDIwMTEpICRcbiAqICR2ZXJzaW9uOiAxLjIuNSBcdC0gQWRkZWQgc3VwcG9ydCBmb3IgdGVzdGluZyBzd2lwZXMgd2l0aCBtb3VzZSBvbiBkZXNrdG9wIGJyb3dzZXIgKHRoYW5rcyB0byBodHRwczovL2dpdGh1Yi5jb20vam9lbGh5KVxuICpcbiAqICREYXRlOiAyMDEyLTE0LTA1IChNb24sIDE0IE1heSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4yLjYgXHQtIEFkZGVkIHRpbWVUaHJlc2hvbGQgYmV0d2VlbiBzdGFydCBhbmQgZW5kIHRvdWNoLCBzbyB1c2VyIGNhbiBpZ25vcmUgc2xvdyBzd2lwZXMgKHRoYW5rcyB0byBNYXJrIENoYXNlKS4gRGVmYXVsdCBpcyBudWxsLCBhbGwgc3dpcGVzIGFyZSBkZXRlY3RlZFxuICpcbiAqICREYXRlOiAyMDEyLTA1LTA2IChUdWVzLCAwNSBKdW5lIDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjIuNyBcdC0gQ2hhbmdlZCB0aW1lIHRocmVzaG9sZCB0byBoYXZlIG51bGwgZGVmYXVsdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEFkZGVkIGR1cmF0aW9uIHBhcmFtIHBhc3NlZCBiYWNrIGluIGV2ZW50cywgYW5kIHJlZmFjdG9yZWQgaG93IHRpbWUgaXMgaGFuZGxlZC5cbiAqXG4gKiAkRGF0ZTogMjAxMi0wNS0wNiAoVHVlcywgMDUgSnVuZSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4yLjggXHQtIEFkZGVkIHRoZSBwb3NzaWJpbGl0eSB0byByZXR1cm4gYSB2YWx1ZSBsaWtlIG51bGwgb3IgZmFsc2UgaW4gdGhlIHRyaWdnZXIgY2FsbGJhY2suIEluIHRoYXQgd2F5IHdlIGNhbiBjb250cm9sIHdoZW4gdGhlIHRvdWNoIHN0YXJ0L21vdmUgc2hvdWxkIHRha2UgZWZmZWN0IG9yIG5vdCAoc2ltcGx5IGJ5IHJldHVybmluZyBpbiBzb21lIGNhc2VzIHJldHVybiBudWxsOyBvciByZXR1cm4gZmFsc2U7KSBUaGlzIGVmZmVjdHMgdGhlIG9udG91Y2hzdGFydC9vbnRvdWNobW92ZSBldmVudC5cbiAqXG4gKiAkRGF0ZTogMjAxMi0wNi0wNiAoV2VkLCAwNiBKdW5lIDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjMuMCBcdC0gUmVmYWN0b3JlZCB3aG9sZSBwbHVnaW4gdG8gYWxsb3cgZm9yIG1ldGhvZHMgdG8gYmUgZXhlY3V0ZWQsIGFzIHdlbGwgYXMgZXhwb3NlZCBkZWZhdWx0cyBmb3IgdXNlciBvdmVycmlkZS4gQWRkZWQgJ2VuYWJsZScsICdkaXNhYmxlJywgYW5kICdkZXN0cm95JyBtZXRob2RzXG4gKlxuICogJERhdGU6IDIwMTItMDUtMDYgKEZyaSwgMDUgSnVuZSAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS4zLjEgXHQtIEJ1ZyBmaXhlcyAgLSBiaW5kKCkgd2l0aCBmYWxzZSBhcyBsYXN0IGFyZ3VtZW50IGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4galF1ZXJ5IDEuNiwgYWxzbywgaWYgeW91IGp1c3QgY2xpY2ssIHRoZSBkdXJhdGlvbiBpcyBub3cgcmV0dXJuZWQgY29ycmVjdGx5LlxuICpcbiAqICREYXRlOiAyMDEyLTI5LTA3IChTdW4sIDI5IEp1bHkgMjAxMikgJFxuICogJHZlcnNpb246IDEuMy4yXHQtIEFkZGVkIGZhbGxiYWNrVG9Nb3VzZUV2ZW50cyBvcHRpb24gdG8gTk9UIGNhcHR1cmUgbW91c2UgZXZlbnRzIG9uIG5vbiB0b3VjaCBkZXZpY2VzLlxuICogXHRcdFx0LSBBZGRlZCBcImFsbFwiIGZpbmdlcnMgdmFsdWUgdG8gdGhlIGZpbmdlcnMgcHJvcGVydHksIHNvIGFueSBjb21iaW5hdGlvbiBvZiBmaW5nZXJzIHRyaWdnZXJzIHRoZSBzd2lwZSwgYWxsb3dpbmcgZXZlbnQgaGFuZGxlcnMgdG8gY2hlY2sgdGhlIGZpbmdlciBjb3VudFxuICpcbiAqICREYXRlOiAyMDEyLTA5LTA4IChUaHVycywgOSBBdWcgMjAxMikgJFxuICogJHZlcnNpb246IDEuMy4zXHQtIENvZGUgdGlkeSBwcmVwIGZvciBtaW4gdmVyc2lvblxuICpcbiAqICREYXRlOiAyMDEyLTA0LTEwICh3ZWQsIDQgT2N0IDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjQuMFx0LSBBZGRlZCBwaW5jaCBzdXBwb3J0LCBwaW5jaEluIGFuZCBwaW5jaE91dFxuICpcbiAqICREYXRlOiAyMDEyLTExLTEwIChUaHVycywgMTEgT2N0IDIwMTIpICRcbiAqICR2ZXJzaW9uOiAxLjUuMFx0LSBBZGRlZCBleGNsdWRlZEVsZW1lbnRzLCBhIGpxdWVyeSBzZWxlY3RvciB0aGF0IHNwZWNpZmllcyBjaGlsZCBlbGVtZW50cyB0aGF0IGRvIE5PVCB0cmlnZ2VyIHN3aXBlcy4gQnkgZGVmYXVsdCwgdGhpcyBpcyAubm9Td2lwZVxuICpcbiAqICREYXRlOiAyMDEyLTIyLTEwIChNb24sIDIyIE9jdCAyMDEyKSAkXG4gKiAkdmVyc2lvbjogMS41LjFcdC0gRml4ZWQgYnVnIHdpdGggalF1ZXJ5IDEuOCBhbmQgdHJhaWxpbmcgY29tbWEgaW4gZXhjbHVkZWRFbGVtZW50c1xuICpcdFx0XHRcdFx0LSBGaXhlZCBidWcgd2l0aCBJRSBhbmQgZXZlbnRQcmV2ZW50RGVmYXVsdCgpXG4gKiAkRGF0ZTogMjAxMy0wMS0xMiAoRnJpLCAxMiBKYW4gMjAxMykgJFxuICogJHZlcnNpb246IDEuNi4wXHQtIEZpeGVkIGJ1Z3Mgd2l0aCBwaW5jaGluZywgbWFpbmx5IHdoZW4gYm90aCBwaW5jaCBhbmQgc3dpcGUgZW5hYmxlZCwgYXMgd2VsbCBhcyBhZGRpbmcgdGltZSB0aHJlc2hvbGQgZm9yIG11bHRpZmluZ2VyIGdlc3R1cmVzLCBzbyByZWxlYXNpbmcgb25lIGZpbmdlciBiZW9mcmUgdGhlIG90aGVyIGRvZXNudCB0cmlnZ2VyIGFzIHNpbmdsZSBmaW5nZXIgZ2VzdHVyZS5cbiAqXHRcdFx0XHRcdC0gbWFkZSB0aGUgZGVtbyBzaXRlIGFsbCBzdGF0aWMgbG9jYWwgSFRNTCBwYWdlcyBzbyB0aGV5IGNhbiBiZSBydW4gbG9jYWxseSBieSBhIGRldmVsb3BlclxuICpcdFx0XHRcdFx0LSBhZGRlZCBqc0RvYyBjb21tZW50cyBhbmQgYWRkZWQgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIHBsdWdpblxuICpcdFx0XHRcdFx0LSBjb2RlIHRpZHlcbiAqXHRcdFx0XHRcdC0gYWRkZWQgdHJpZ2dlck9uVG91Y2hMZWF2ZSBwcm9wZXJ0eSB0aGF0IHdpbGwgZW5kIHRoZSBldmVudCB3aGVuIHRoZSB1c2VyIHN3aXBlcyBvZmYgdGhlIGVsZW1lbnQuXG4gKiAkRGF0ZTogMjAxMy0wMy0yMyAoU2F0LCAyMyBNYXIgMjAxMykgJFxuICogJHZlcnNpb246IDEuNi4xXHQtIEFkZGVkIHN1cHBvcnQgZm9yIGllOCB0b3VjaCBldmVudHNcbiAqICR2ZXJzaW9uOiAxLjYuMlx0LSBBZGRlZCBzdXBwb3J0IGZvciBldmVudHMgYmluZGluZyB3aXRoIG9uIC8gb2ZmIC8gYmluZCBpbiBqUSBmb3IgYWxsIGNhbGxiYWNrIG5hbWVzLlxuICogICAgICAgICAgICAgICAgICAgLSBEZXByZWNhdGVkIHRoZSAnY2xpY2snIGhhbmRsZXIgaW4gZmF2b3VyIG9mIHRhcC5cbiAqICAgICAgICAgICAgICAgICAgIC0gYWRkZWQgY2FuY2VsVGhyZXNob2xkIHByb3BlcnR5XG4gKiAgICAgICAgICAgICAgICAgICAtIGFkZGVkIG9wdGlvbiBtZXRob2QgdG8gdXBkYXRlIGluaXQgb3B0aW9ucyBhdCBydW50aW1lXG4gKiAkdmVyc2lvbiAxLjYuMyAgICAtIGFkZGVkIGRvdWJsZXRhcCwgbG9uZ3RhcCBldmVudHMgYW5kIGxvbmdUYXBUaHJlc2hvbGQsIGRvdWJsZVRhcFRocmVzaG9sZCBwcm9wZXJ0eVxuICpcbiAqICREYXRlOiAyMDEzLTA0LTA0IChUaHVycywgMDQgQXByaWwgMjAxMykgJFxuICogJHZlcnNpb24gMS42LjQgICAgLSBGaXhlZCBidWcgd2l0aCBjYW5jZWxUaHJlc2hvbGQgaW50cm9kdWNlZCBpbiAxLjYuMywgd2hlcmUgc3dpcGUgc3RhdHVzIG5vIGxvbmdlciBmaXJlZCBzdGFydCBldmVudCwgYW5kIHN0b3BwZWQgb25jZSBzd2lwaW5nIGJhY2suXG4gKlxuICogJERhdGU6IDIwMTMtMDgtMjQgKFNhdCwgMjQgQXVnIDIwMTMpICRcbiAqICR2ZXJzaW9uIDEuNi41ICAgIC0gTWVyZ2VkIGEgZmV3IHB1bGwgcmVxdWVzdHMgZml4aW5nIHZhcmlvdXMgYnVncywgYWRkZWQgQU1EIHN1cHBvcnQuXG4gKlxuICogJERhdGU6IDIwMTQtMDYtMDQgKFdlZCwgMDQgSnVuZSAyMDE0KSAkXG4gKiAkdmVyc2lvbiAxLjYuNiBcdC0gTWVyZ2Ugb2YgcHVsbCByZXF1ZXN0cy5cbiAqICAgIFx0XHRcdFx0LSBJRTEwIHRvdWNoIHN1cHBvcnRcbiAqICAgIFx0XHRcdFx0LSBPbmx5IHByZXZlbnQgZGVmYXVsdCBldmVudCBoYW5kbGluZyBvbiB2YWxpZCBzd2lwZVxuICogICAgXHRcdFx0XHQtIFNlcGFyYXRlIGxpY2Vuc2UvY2hhbmdlbG9nIGNvbW1lbnRcbiAqICAgIFx0XHRcdFx0LSBEZXRlY3QgaWYgdGhlIHN3aXBlIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgdGhlIHRvdWNoIGV2ZW50LlxuICogICAgXHRcdFx0XHQtIFBhc3MgZmluZ2VyZGF0YSB0byBldmVudCBoYW5kbGVycy5cbiAqICAgIFx0XHRcdFx0LSBBZGQgJ2hvbGQnIGdlc3R1cmVcbiAqICAgIFx0XHRcdFx0LSBCZSBtb3JlIHRvbGVyYW50IGFib3V0IHRoZSB0YXAgZGlzdGFuY2VcbiAqICAgIFx0XHRcdFx0LSBUeXBvcyBhbmQgbWlub3IgZml4ZXNcbiAqXG4gKiAkRGF0ZTogMjAxNS0yMi0wMSAoVGh1cnMsIDIyIEphbiAyMDE1KSAkXG4gKiAkdmVyc2lvbiAxLjYuNyAgICAtIEFkZGVkIHBhdGNoIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdHRicnlzb24vVG91Y2hTd2lwZS1KcXVlcnktUGx1Z2luL2lzc3Vlcy8yMDYgdG8gZml4IG1lbW9yeSBsZWFrXG4gKlxuICogJERhdGU6IDIwMTUtMi0yIChNb24sIDIgRmViIDIwMTUpICRcbiAqICR2ZXJzaW9uIDEuNi44ICAgIC0gQWRkZWQgcHJldmVudERlZmF1bHRFdmVudHMgb3B0aW9uIHRvIHByb3h5IGV2ZW50cyByZWdhcmRsZXNzLlxuICpcdFx0XHRcdFx0LSBGaXhlZCBpc3N1ZSB3aXRoIHN3aXBlIGFuZCBwaW5jaCBub3QgdHJpZ2dlcmluZyBhdCB0aGUgc2FtZSB0aW1lXG4gKlxuICogJERhdGU6IDIwMTUtOS02IChUdWVzLCA5IEp1bmUgMjAxNSkgJFxuICogJHZlcnNpb24gMS42LjkgICAgLSBBZGRlZCBQUiBmcm9tIGpkYWx0b24vaHlicmlkIHRvIGZpeCBwb2ludGVyIGV2ZW50c1xuICpcdFx0XHRcdFx0LSBBZGRlZCBzY3JvbGxpbmcgZGVtb1xuICpcdFx0XHRcdFx0LSBBZGRlZCB2ZXJzaW9uIHByb3BlcnR5IHRvIHBsdWdpblxuICpcbiAqICREYXRlOiAyMDE1LTEtMTAgKFdlZCwgMSBPY3RvYmVyIDIwMTUpICRcbiAqICR2ZXJzaW9uIDEuNi4xMCAgICAtIEFkZGVkIFBSIGZyb20gYmVhdHNwYWNlIHRvIGZpeCB0YXAgZXZlbnRzXG4gKiAkdmVyc2lvbiAxLjYuMTEgICAgLSBBZGRlZCBQUnMgZnJvbSBpbmRyaS1pbmRyaSAoIERvYyB0aWR5dXApLCBra2lyc2NoZSAoIEJvd2VyIHRpZHkgdXAgKSwgVXppVGVjaCAocHJldmVudERlZmF1bHRFdmVudHMgZml4ZXMgKVxuICpcdFx0XHRcdFx0IC0gQWxsb3dlZCBzZXR0aW5nIG11bHRpcGxlIG9wdGlvbnMgdmlhIC5zd2lwZShcIm9wdGlvbnNcIiwgb3B0aW9uc19oYXNoKSBhbmQgbW9yZSBzaW1wbHkgLnN3aXBlKG9wdGlvbnNfaGFzaCkgb3IgZXhpc2l0bmcgaW5zdGFuY2VzXG4gKiAkdmVyc2lvbiAxLjYuMTIgICAgLSBGaXhlZCBidWcgd2l0aCBtdWx0aSBmaW5nZXIgcmVsZWFzZXMgYWJvdmUgMiBub3QgdHJpZ2dlcmluZyBldmVudHNcbiAqXG4gKiAkRGF0ZTogMjAxNS0xMi0xOCAoRnJpLCAxOCBEZWNlbWJlciAyMDE1KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTMgICAgLSBBZGRlZCBQUnNcbiAqICAgICAgICAgICAgICAgICAgICAtIEZpeGVkICMyNjcgYWxsb3dQYWdlU2Nyb2xsIG5vdCB3b3JraW5nIGNvcnJlY3RseVxuICogJHZlcnNpb24gMS42LjE0ICAgIC0gRml4ZWQgIzIyMCAvICMyNDggZG91YmxldGFwIG5vdCBmaXJpbmcgd2l0aCBzd2lwZXMsICMyMjMgY29tbW9uSlMgY29tcGF0aWJsZVxuICogJHZlcnNpb24gMS42LjE1ICAgIC0gTW9yZSBidWcgZml4ZXNcbiAqXG4gKiAkRGF0ZTogMjAxNi0wNC0yOSAoRnJpLCAyOSBBcHJpbCAyMDE2KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTYgICAgLSBTd2lwZXMgd2l0aCAwIGRpc3RhbmNlIG5vdyBhbGxvdyBkZWZhdWx0IGV2ZW50cyB0byB0cmlnZ2VyLiAgU28gdGFwcGluZyBhbnkgZm9ybSBlbGVtZW50cyBvciBBIHRhZ3Mgd2lsbCBhbGxvdyBkZWZhdWx0IGludGVyYWN0aW9uLCBidXQgc3dpcGluZyB3aWxsIHRyaWdnZXIgYSBzd2lwZS5cbiAqICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmVkIHRoZSBhLCBpbnB1dCwgc2VsZWN0IGV0YyBmcm9tIHRoZSBleGNsdWRlZCBDaGlsZHJlbiBsaXN0IGFzIHRoZSAwIGRpc3RhbmNlIHRhcCBzb2x2ZXMgdGhhdCBpc3N1ZS5cbiAqICREYXRlOiAyMDE2LTA1LTE5ICAoRnJpLCAyOSBBcHJpbCAyMDE2KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTcgICAgIC0gRml4ZWQgY29udGV4dCBpc3N1ZSB3aGVuIGNhbGxpbmcgaW5zdGFuY2UgbWV0aG9kcyB2aWEgJChcInNlbGVjdG9yXCIpLnN3aXBlKFwibWV0aG9kXCIpO1xuICogJHZlcnNpb24gMS42LjE4ICAgICAtIG5vdyBob25vcnMgZmFsbGJhY2tUb01vdXNlRXZlbnRzPWZhbHNlIGZvciBNUyBQb2ludGVyIGV2ZW50cyB3aGVuIGEgTW91c2UgaXMgdXNlZC5cbiAqIFxuICogJERhdGU6IDIwMTgtMDktMTcgIChNb24sIDE3IFNlcHRlbWJlciAyMDE4KSAkXG4gKiAkdmVyc2lvbiAxLjYuMTkgICAgIC0gcmVwbGFjZWQgalF1ZXJ5IGJpbmQgd2l0aCBvbiwgcmVwbGFjZWQgZGVwcmVjYXRlZCBgbmF2aWdhdG9yLnBvaW50ZXJFdmVudHNgIHdpdGggYHdpbmRvdy5Qb2ludGVyRXZlbnRzYFxuXG4gKi9cblxuLyoqXG4gKiBTZWUgKGh0dHA6Ly9qcXVlcnkuY29tLykuXG4gKiBAbmFtZSAkXG4gKiBAY2xhc3NcbiAqIFNlZSB0aGUgalF1ZXJ5IExpYnJhcnkgIChodHRwOi8vanF1ZXJ5LmNvbS8pIGZvciBmdWxsIGRldGFpbHMuICBUaGlzIGp1c3RcbiAqIGRvY3VtZW50cyB0aGUgZnVuY3Rpb24gYW5kIGNsYXNzZXMgdGhhdCBhcmUgYWRkZWQgdG8galF1ZXJ5IGJ5IHRoaXMgcGx1Zy1pbi5cbiAqL1xuXG4vKipcbiAqIFNlZSAoaHR0cDovL2pxdWVyeS5jb20vKVxuICogQG5hbWUgZm5cbiAqIEBjbGFzc1xuICogU2VlIHRoZSBqUXVlcnkgTGlicmFyeSAgKGh0dHA6Ly9qcXVlcnkuY29tLykgZm9yIGZ1bGwgZGV0YWlscy4gIFRoaXMganVzdFxuICogZG9jdW1lbnRzIHRoZSBmdW5jdGlvbiBhbmQgY2xhc3NlcyB0aGF0IGFyZSBhZGRlZCB0byBqUXVlcnkgYnkgdGhpcyBwbHVnLWluLlxuICogQG1lbWJlck9mICRcbiAqL1xuXG5cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgJiYgZGVmaW5lLmFtZC5qUXVlcnkpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgLy8gQ29tbW9uSlMgTW9kdWxlXG4gICAgZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMuXG4gICAgZmFjdG9yeShqUXVlcnkpO1xuICB9XG59KGZ1bmN0aW9uKCQpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgLy9Db25zdGFudHNcbiAgdmFyIFZFUlNJT04gPSBcIjEuNi4xOFwiLFxuICAgIExFRlQgPSBcImxlZnRcIixcbiAgICBSSUdIVCA9IFwicmlnaHRcIixcbiAgICBVUCA9IFwidXBcIixcbiAgICBET1dOID0gXCJkb3duXCIsXG4gICAgSU4gPSBcImluXCIsXG4gICAgT1VUID0gXCJvdXRcIixcblxuICAgIE5PTkUgPSBcIm5vbmVcIixcbiAgICBBVVRPID0gXCJhdXRvXCIsXG5cbiAgICBTV0lQRSA9IFwic3dpcGVcIixcbiAgICBQSU5DSCA9IFwicGluY2hcIixcbiAgICBUQVAgPSBcInRhcFwiLFxuICAgIERPVUJMRV9UQVAgPSBcImRvdWJsZXRhcFwiLFxuICAgIExPTkdfVEFQID0gXCJsb25ndGFwXCIsXG4gICAgSE9MRCA9IFwiaG9sZFwiLFxuXG4gICAgSE9SSVpPTlRBTCA9IFwiaG9yaXpvbnRhbFwiLFxuICAgIFZFUlRJQ0FMID0gXCJ2ZXJ0aWNhbFwiLFxuXG4gICAgQUxMX0ZJTkdFUlMgPSBcImFsbFwiLFxuXG4gICAgRE9VQkxFX1RBUF9USFJFU0hPTEQgPSAxMCxcblxuICAgIFBIQVNFX1NUQVJUID0gXCJzdGFydFwiLFxuICAgIFBIQVNFX01PVkUgPSBcIm1vdmVcIixcbiAgICBQSEFTRV9FTkQgPSBcImVuZFwiLFxuICAgIFBIQVNFX0NBTkNFTCA9IFwiY2FuY2VsXCIsXG5cbiAgICBTVVBQT1JUU19UT1VDSCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyxcblxuICAgIFNVUFBPUlRTX1BPSU5URVJfSUUxMCA9IHdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCAmJiAhd2luZG93LlBvaW50ZXJFdmVudCAmJiAhU1VQUE9SVFNfVE9VQ0gsXG5cbiAgICBTVVBQT1JUU19QT0lOVEVSID0gKHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSAmJiAhU1VQUE9SVFNfVE9VQ0gsXG5cbiAgICBQTFVHSU5fTlMgPSAnVG91Y2hTd2lwZSc7XG5cblxuXG4gIC8qKlxuICAqIFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24sIGFuZCBhdmFpbGFibGUgb3B0aW9ucyB0byBjb25maWd1cmUgdG91Y2ggc3dpcGUgd2l0aC5cbiAgKiBZb3UgY2FuIHNldCB0aGUgZGVmYXVsdCB2YWx1ZXMgYnkgdXBkYXRpbmcgYW55IG9mIHRoZSBwcm9wZXJ0aWVzIHByaW9yIHRvIGluc3RhbnRpYXRpb24uXG4gICogQG5hbWUgJC5mbi5zd2lwZS5kZWZhdWx0c1xuICAqIEBuYW1lc3BhY2VcbiAgKiBAcHJvcGVydHkge2ludH0gW2ZpbmdlcnM9MV0gVGhlIG51bWJlciBvZiBmaW5nZXJzIHRvIGRldGVjdCBpbiBhIHN3aXBlLiBBbnkgc3dpcGVzIHRoYXQgZG8gbm90IG1lZXQgdGhpcyByZXF1aXJlbWVudCB3aWxsIE5PVCB0cmlnZ2VyIHN3aXBlIGhhbmRsZXJzLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbdGhyZXNob2xkPTc1XSBUaGUgbnVtYmVyIG9mIHBpeGVscyB0aGF0IHRoZSB1c2VyIG11c3QgbW92ZSB0aGVpciBmaW5nZXIgYnkgYmVmb3JlIGl0IGlzIGNvbnNpZGVyZWQgYSBzd2lwZS5cbiAgKiBAcHJvcGVydHkge2ludH0gW2NhbmNlbFRocmVzaG9sZD1udWxsXSBUaGUgbnVtYmVyIG9mIHBpeGVscyB0aGF0IHRoZSB1c2VyIG11c3QgbW92ZSB0aGVpciBmaW5nZXIgYmFjayBmcm9tIHRoZSBvcmlnaW5hbCBzd2lwZSBkaXJlY3Rpb24gdG8gY2FuY2VsIHRoZSBnZXN0dXJlLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbcGluY2hUaHJlc2hvbGQ9MjBdIFRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgdGhlIHVzZXIgbXVzdCBwaW5jaCB0aGVpciBmaW5nZXIgYnkgYmVmb3JlIGl0IGlzIGNvbnNpZGVyZWQgYSBwaW5jaC5cbiAgKiBAcHJvcGVydHkge2ludH0gW21heFRpbWVUaHJlc2hvbGQ9bnVsbF0gVGltZSwgaW4gbWlsbGlzZWNvbmRzLCBiZXR3ZWVuIHRvdWNoU3RhcnQgYW5kIHRvdWNoRW5kIG11c3QgTk9UIGV4Y2VlZCBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkIGEgc3dpcGUuXG4gICogQHByb3BlcnR5IHtpbnR9IFtmaW5nZXJSZWxlYXNlVGhyZXNob2xkPTI1MF0gVGltZSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiByZWxlYXNpbmcgbXVsdGlwbGUgZmluZ2Vycy4gIElmIDIgZmluZ2VycyBhcmUgZG93biwgYW5kIGFyZSByZWxlYXNlZCBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBpZiB0aGV5IGFyZSB3aXRoaW4gdGhpcyB0aHJlc2hvbGQsIGl0IGNvdW50cyBhcyBhIHNpbXVsdGFuZW91cyByZWxlYXNlLlxuICAqIEBwcm9wZXJ0eSB7aW50fSBbbG9uZ1RhcFRocmVzaG9sZD01MDBdIFRpbWUgaW4gbWlsbGlzZWNvbmRzIGJldHdlZW4gdGFwIGFuZCByZWxlYXNlIGZvciBhIGxvbmcgdGFwXG4gICogQHByb3BlcnR5IHtpbnR9IFtkb3VibGVUYXBUaHJlc2hvbGQ9MjAwXSBUaW1lIGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIDIgdGFwcyB0byBjb3VudCBhcyBhIGRvdWJsZSB0YXBcbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGU9bnVsbF0gQSBoYW5kbGVyIHRvIGNhdGNoIGFsbCBzd2lwZXMuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpzd2lwZX1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGVMZWZ0PW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJsZWZ0XCIgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVMZWZ0fVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtzd2lwZVJpZ2h0PW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJyaWdodFwiIHN3aXBlcy4gU2VlIHtAbGluayAkLmZuLnN3aXBlI2V2ZW50OnN3aXBlUmlnaHR9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3N3aXBlVXA9bnVsbF0gQSBoYW5kbGVyIHRoYXQgaXMgdHJpZ2dlcmVkIGZvciBcInVwXCIgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVVcH1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbc3dpcGVEb3duPW51bGxdIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJkb3duXCIgc3dpcGVzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6c3dpcGVEb3dufVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtzd2lwZVN0YXR1cz1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBldmVyeSBwaGFzZSBvZiB0aGUgc3dpcGUuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpzd2lwZVN0YXR1c31cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbcGluY2hJbj1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBwaW5jaCBpbiBldmVudHMuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpwaW5jaElufVxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtwaW5jaE91dD1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIGZvciBwaW5jaCBvdXQgZXZlbnRzLiBTZWUge0BsaW5rICQuZm4uc3dpcGUjZXZlbnQ6cGluY2hPdXR9XG4gICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW3BpbmNoU3RhdHVzPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIGV2ZXJ5IHBoYXNlIG9mIGEgcGluY2guIFNlZSB7QGxpbmsgJC5mbi5zd2lwZSNldmVudDpwaW5jaFN0YXR1c31cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbdGFwPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIganVzdCB0YXBzIG9uIHRoZSBpdGVtLCByYXRoZXIgdGhhbiBzd2lwZXMgaXQuIElmIHRoZXkgZG8gbm90IG1vdmUsIHRhcCBpcyB0cmlnZ2VyZWQsIGlmIHRoZXkgZG8gbW92ZSwgaXQgaXMgbm90LlxuICAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtkb3VibGVUYXA9bnVsbF0gQSBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBkb3VibGUgdGFwcyBvbiB0aGUgaXRlbS4gVGhlIGRlbGF5IGJldHdlZW4gdGFwcyBjYW4gYmUgc2V0IHdpdGggdGhlIGRvdWJsZVRhcFRocmVzaG9sZCBwcm9wZXJ0eS4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRlZmF1bHRzI2RvdWJsZVRhcFRocmVzaG9sZH1cbiAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbbG9uZ1RhcD1udWxsXSBBIGhhbmRsZXIgdHJpZ2dlcmVkIHdoZW4gYSB1c2VyIGxvbmcgdGFwcyBvbiB0aGUgaXRlbS4gVGhlIGRlbGF5IGJldHdlZW4gc3RhcnQgYW5kIGVuZCBjYW4gYmUgc2V0IHdpdGggdGhlIGxvbmdUYXBUaHJlc2hvbGQgcHJvcGVydHkuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNsb25nVGFwVGhyZXNob2xkfVxuICAqIEBwcm9wZXJ0eSAoZnVuY3Rpb24pIFtob2xkPW51bGxdIEEgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgcmVhY2hlcyBsb25nVGFwVGhyZXNob2xkIG9uIHRoZSBpdGVtLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZH1cbiAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFt0cmlnZ2VyT25Ub3VjaEVuZD10cnVlXSBJZiB0cnVlLCB0aGUgc3dpcGUgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgdG91Y2ggZW5kIGV2ZW50IGlzIHJlY2VpdmVkICh1c2VyIHJlbGVhc2VzIGZpbmdlcikuICBJZiBmYWxzZSwgaXQgd2lsbCBiZSB0cmlnZ2VyZWQgb24gcmVhY2hpbmcgdGhlIHRocmVzaG9sZCwgYW5kIHRoZW4gY2FuY2VsIHRoZSB0b3VjaCBldmVudCBhdXRvbWF0aWNhbGx5LlxuICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3RyaWdnZXJPblRvdWNoTGVhdmU9ZmFsc2VdIElmIHRydWUsIHRoZW4gd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhlIHN3aXBlIG9iamVjdCwgdGhlIHN3aXBlIHdpbGwgZW5kIGFuZCB0cmlnZ2VyIGFwcHJvcHJpYXRlIGhhbmRsZXJzLlxuICAqIEBwcm9wZXJ0eSB7c3RyaW5nfHVuZGVmaW5lZH0gW2FsbG93UGFnZVNjcm9sbD0nYXV0byddIEhvdyB0aGUgYnJvd3NlciBoYW5kbGVzIHBhZ2Ugc2Nyb2xscyB3aGVuIHRoZSB1c2VyIGlzIHN3aXBpbmcgb24gYSB0b3VjaFN3aXBlIG9iamVjdC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLnBhZ2VTY3JvbGx9LiAgPGJyLz48YnIvPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cImF1dG9cIjwvY29kZT4gOiBhbGwgdW5kZWZpbmVkIHN3aXBlcyB3aWxsIGNhdXNlIHRoZSBwYWdlIHRvIHNjcm9sbCBpbiB0aGF0IGRpcmVjdGlvbi4gPGJyLz5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGU+XCJub25lXCI8L2NvZGU+IDogdGhlIHBhZ2Ugd2lsbCBub3Qgc2Nyb2xsIHdoZW4gdXNlciBzd2lwZXMuIDxici8+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlwiaG9yaXpvbnRhbFwiPC9jb2RlPiA6IHdpbGwgZm9yY2UgcGFnZSB0byBzY3JvbGwgb24gaG9yaXpvbnRhbCBzd2lwZXMuIDxici8+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlwidmVydGljYWxcIjwvY29kZT4gOiB3aWxsIGZvcmNlIHBhZ2UgdG8gc2Nyb2xsIG9uIHZlcnRpY2FsIHN3aXBlcy4gPGJyLz5cbiAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtmYWxsYmFja1RvTW91c2VFdmVudHM9dHJ1ZV0gSWYgdHJ1ZSBtb3VzZSBldmVudHMgYXJlIHVzZWQgd2hlbiBydW4gb24gYSBub24gdG91Y2ggZGV2aWNlLCBmYWxzZSB3aWxsIHN0b3Agc3dpcGVzIGJlaW5nIHRyaWdnZXJlZCBieSBtb3VzZSBldmVudHMgb24gbm9uIHRvdWNoIGRldmljZXMuXG4gICogQHByb3BlcnR5IHtzdHJpbmd9IFtleGNsdWRlZEVsZW1lbnRzPVwiLm5vU3dpcGVcIl0gQSBqcXVlcnkgc2VsZWN0b3IgdGhhdCBzcGVjaWZpZXMgY2hpbGQgZWxlbWVudHMgdGhhdCBkbyBOT1QgdHJpZ2dlciBzd2lwZXMuIEJ5IGRlZmF1bHQgdGhpcyBleGNsdWRlcyBlbGVtZW50cyB3aXRoIHRoZSBjbGFzcyAubm9Td2lwZSAuXG4gICogQHByb3BlcnR5IHtib29sZWFufSBbcHJldmVudERlZmF1bHRFdmVudHM9dHJ1ZV0gYnkgZGVmYXVsdCBkZWZhdWx0IGV2ZW50cyBhcmUgY2FuY2VsbGVkLCBzbyB0aGUgcGFnZSBkb2Vzbid0IG1vdmUuICBZb3UgY2FuIGRpc2FibGUgdGhpcyBzbyBib3RoIG5hdGl2ZSBldmVudHMgZmlyZSBhcyB3ZWxsIGFzIHlvdXIgaGFuZGxlcnMuXG5cbiAgKi9cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGZpbmdlcnM6IDEsXG4gICAgdGhyZXNob2xkOiA3NSxcbiAgICBjYW5jZWxUaHJlc2hvbGQ6IG51bGwsXG4gICAgcGluY2hUaHJlc2hvbGQ6IDIwLFxuICAgIG1heFRpbWVUaHJlc2hvbGQ6IG51bGwsXG4gICAgZmluZ2VyUmVsZWFzZVRocmVzaG9sZDogMjUwLFxuICAgIGxvbmdUYXBUaHJlc2hvbGQ6IDUwMCxcbiAgICBkb3VibGVUYXBUaHJlc2hvbGQ6IDIwMCxcbiAgICBzd2lwZTogbnVsbCxcbiAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgc3dpcGVSaWdodDogbnVsbCxcbiAgICBzd2lwZVVwOiBudWxsLFxuICAgIHN3aXBlRG93bjogbnVsbCxcbiAgICBzd2lwZVN0YXR1czogbnVsbCxcbiAgICBwaW5jaEluOiBudWxsLFxuICAgIHBpbmNoT3V0OiBudWxsLFxuICAgIHBpbmNoU3RhdHVzOiBudWxsLFxuICAgIGNsaWNrOiBudWxsLCAvL0RlcHJlY2F0ZWQgc2luY2UgMS42LjJcbiAgICB0YXA6IG51bGwsXG4gICAgZG91YmxlVGFwOiBudWxsLFxuICAgIGxvbmdUYXA6IG51bGwsXG4gICAgaG9sZDogbnVsbCxcbiAgICB0cmlnZ2VyT25Ub3VjaEVuZDogdHJ1ZSxcbiAgICB0cmlnZ2VyT25Ub3VjaExlYXZlOiBmYWxzZSxcbiAgICBhbGxvd1BhZ2VTY3JvbGw6IFwiYXV0b1wiLFxuICAgIGZhbGxiYWNrVG9Nb3VzZUV2ZW50czogdHJ1ZSxcbiAgICBleGNsdWRlZEVsZW1lbnRzOiBcIi5ub1N3aXBlXCIsXG4gICAgcHJldmVudERlZmF1bHRFdmVudHM6IHRydWVcbiAgfTtcblxuXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgVG91Y2hTd2lwZSBiZWhhdmlvdXIgdG8gb25lIG9yIG1vcmUgalF1ZXJ5IG9iamVjdHMuXG4gICAqIFRoZSBUb3VjaFN3aXBlIHBsdWdpbiBjYW4gYmUgaW5zdGFudGlhdGVkIHZpYSB0aGlzIG1ldGhvZCwgb3IgbWV0aG9kcyB3aXRoaW5cbiAgICogVG91Y2hTd2lwZSBjYW4gYmUgZXhlY3V0ZWQgdmlhIHRoaXMgbWV0aG9kIGFzIHBlciBqUXVlcnkgcGx1Z2luIGFyY2hpdGVjdHVyZS5cbiAgICogQW4gZXhpc3RpbmcgcGx1Z2luIGNhbiBoYXZlIGl0cyBvcHRpb25zIGNoYW5nZWQgc2ltcGx5IGJ5IHJlIGNhbGxpbmcgLnN3aXBlKG9wdGlvbnMpXG4gICAqIEBzZWUgVG91Y2hTd2lwZVxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtNaXhlZH0gbWV0aG9kIElmIHRoZSBjdXJyZW50IERPTU5vZGUgaXMgYSBUb3VjaFN3aXBlIG9iamVjdCwgYW5kIDxjb2RlPm1ldGhvZDwvY29kZT4gaXMgYSBUb3VjaFN3aXBlIG1ldGhvZCwgdGhlblxuICAgKiB0aGUgPGNvZGU+bWV0aG9kPC9jb2RlPiBpcyBleGVjdXRlZCwgYW5kIGFueSBmb2xsb3dpbmcgYXJndW1lbnRzIGFyZSBwYXNzZWQgdG8gdGhlIFRvdWNoU3dpcGUgbWV0aG9kLlxuICAgKiBJZiA8Y29kZT5tZXRob2Q8L2NvZGU+IGlzIGFuIG9iamVjdCwgdGhlbiB0aGUgVG91Y2hTd2lwZSBjbGFzcyBpcyBpbnN0YW50aWF0ZWQgb24gdGhlIGN1cnJlbnQgRE9NTm9kZSwgcGFzc2luZyB0aGVcbiAgICogY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIG9iamVjdC4gU2VlIFRvdWNoU3dpcGVcbiAgICpcbiAgICovXG4gICQuZm4uc3dpcGUgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpLFxuICAgICAgcGx1Z2luID0gJHRoaXMuZGF0YShQTFVHSU5fTlMpO1xuXG4gICAgLy9DaGVjayBpZiB3ZSBhcmUgYWxyZWFkeSBpbnN0YW50aWF0ZWQgYW5kIHRyeWluZyB0byBleGVjdXRlIGEgbWV0aG9kXG4gICAgaWYgKHBsdWdpbiAmJiB0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHBsdWdpblttZXRob2RdKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW5bbWV0aG9kXS5hcHBseShwbHVnaW4sIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJC5lcnJvcignTWV0aG9kICcgKyBtZXRob2QgKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zd2lwZScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vRWxzZSB1cGRhdGUgZXhpc3RpbmcgcGx1Z2luIHdpdGggbmV3IG9wdGlvbnMgaGFzaFxuICAgIGVsc2UgaWYgKHBsdWdpbiAmJiB0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0Jykge1xuICAgICAgcGx1Z2luWydvcHRpb24nXS5hcHBseShwbHVnaW4sIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy9FbHNlIG5vdCBpbnN0YW50aWF0ZWQgYW5kIHRyeWluZyB0byBwYXNzIGluaXQgb2JqZWN0IChvciBub3RoaW5nKVxuICAgIGVsc2UgaWYgKCFwbHVnaW4gJiYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QpKSB7XG4gICAgICByZXR1cm4gaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiAkdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHBsdWdpblxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gICQuZm4uc3dpcGUudmVyc2lvbiA9IFZFUlNJT047XG5cblxuXG4gIC8vRXhwb3NlIG91ciBkZWZhdWx0cyBzbyBhIHVzZXIgY291bGQgb3ZlcnJpZGUgdGhlIHBsdWdpbiBkZWZhdWx0c1xuICAkLmZuLnN3aXBlLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cbiAgLyoqXG4gICAqIFRoZSBwaGFzZXMgdGhhdCBhIHRvdWNoIGV2ZW50IGdvZXMgdGhyb3VnaC4gIFRoZSA8Y29kZT5waGFzZTwvY29kZT4gaXMgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmVhZCBvbmx5LCBhdHRlbXB0aW5nIHRvIGNoYW5nZSB0aGVtIHdpbGwgbm90IGFsdGVyIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICogQG5hbWVzcGFjZVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX1NUQVJUIENvbnN0YW50IGluZGljYXRpbmcgdGhlIHN0YXJ0IHBoYXNlIG9mIHRoZSB0b3VjaCBldmVudC4gVmFsdWUgaXMgPGNvZGU+XCJzdGFydFwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX01PVkUgQ29uc3RhbnQgaW5kaWNhdGluZyB0aGUgbW92ZSBwaGFzZSBvZiB0aGUgdG91Y2ggZXZlbnQuIFZhbHVlIGlzIDxjb2RlPlwibW92ZVwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX0VORCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBlbmQgcGhhc2Ugb2YgdGhlIHRvdWNoIGV2ZW50LiBWYWx1ZSBpcyA8Y29kZT5cImVuZFwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFBIQVNFX0NBTkNFTCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBjYW5jZWwgcGhhc2Ugb2YgdGhlIHRvdWNoIGV2ZW50LiBWYWx1ZSBpcyA8Y29kZT5cImNhbmNlbFwiPC9jb2RlPi5cbiAgICovXG4gICQuZm4uc3dpcGUucGhhc2VzID0ge1xuICAgIFBIQVNFX1NUQVJUOiBQSEFTRV9TVEFSVCxcbiAgICBQSEFTRV9NT1ZFOiBQSEFTRV9NT1ZFLFxuICAgIFBIQVNFX0VORDogUEhBU0VfRU5ELFxuICAgIFBIQVNFX0NBTkNFTDogUEhBU0VfQ0FOQ0VMXG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rpb24gY29uc3RhbnRzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIFRoZXNlIHByb3BlcnRpZXMgYXJlIHJlYWQgb25seSwgYXR0ZW1wdGluZyB0byBjaGFuZ2UgdGhlbSB3aWxsIG5vdCBhbHRlciB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHJlYWRvbmx5XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBMRUZUIENvbnN0YW50IGluZGljYXRpbmcgdGhlIGxlZnQgZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cImxlZnRcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSSUdIVCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSByaWdodCBkaXJlY3Rpb24uIFZhbHVlIGlzIDxjb2RlPlwicmlnaHRcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBVUCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSB1cCBkaXJlY3Rpb24uIFZhbHVlIGlzIDxjb2RlPlwidXBcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBET1dOIENvbnN0YW50IGluZGljYXRpbmcgdGhlIGRvd24gZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cImNhbmNlbFwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IElOIENvbnN0YW50IGluZGljYXRpbmcgdGhlIGluIGRpcmVjdGlvbi4gVmFsdWUgaXMgPGNvZGU+XCJpblwiPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IE9VVCBDb25zdGFudCBpbmRpY2F0aW5nIHRoZSBvdXQgZGlyZWN0aW9uLiBWYWx1ZSBpcyA8Y29kZT5cIm91dFwiPC9jb2RlPi5cbiAgICovXG4gICQuZm4uc3dpcGUuZGlyZWN0aW9ucyA9IHtcbiAgICBMRUZUOiBMRUZULFxuICAgIFJJR0hUOiBSSUdIVCxcbiAgICBVUDogVVAsXG4gICAgRE9XTjogRE9XTixcbiAgICBJTjogSU4sXG4gICAgT1VUOiBPVVRcbiAgfTtcblxuICAvKipcbiAgICogVGhlIHBhZ2Ugc2Nyb2xsIGNvbnN0YW50cyB0aGF0IGNhbiBiZSB1c2VkIHRvIHNldCB0aGUgdmFsdWUgb2YgPGNvZGU+YWxsb3dQYWdlU2Nyb2xsPC9jb2RlPiBvcHRpb25cbiAgICogVGhlc2UgcHJvcGVydGllcyBhcmUgcmVhZCBvbmx5XG4gICAqIEBuYW1lc3BhY2VcbiAgICogQHJlYWRvbmx5XG4gICAqIEBzZWUgJC5mbi5zd2lwZS5kZWZhdWx0cyNhbGxvd1BhZ2VTY3JvbGxcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IE5PTkUgQ29uc3RhbnQgaW5kaWNhdGluZyBubyBwYWdlIHNjcm9sbGluZyBpcyBhbGxvd2VkLiBWYWx1ZSBpcyA8Y29kZT5cIm5vbmVcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBIT1JJWk9OVEFMIENvbnN0YW50IGluZGljYXRpbmcgaG9yaXpvbnRhbCBwYWdlIHNjcm9sbGluZyBpcyBhbGxvd2VkLiBWYWx1ZSBpcyA8Y29kZT5cImhvcml6b250YWxcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBWRVJUSUNBTCBDb25zdGFudCBpbmRpY2F0aW5nIHZlcnRpY2FsIHBhZ2Ugc2Nyb2xsaW5nIGlzIGFsbG93ZWQuIFZhbHVlIGlzIDxjb2RlPlwidmVydGljYWxcIjwvY29kZT4uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBBVVRPIENvbnN0YW50IGluZGljYXRpbmcgZWl0aGVyIGhvcml6b250YWwgb3IgdmVydGljYWwgd2lsbCBiZSBhbGxvd2VkLCBkZXBlbmRpbmcgb24gdGhlIHN3aXBlIGhhbmRsZXJzIHJlZ2lzdGVyZWQuIFZhbHVlIGlzIDxjb2RlPlwiYXV0b1wiPC9jb2RlPi5cbiAgICovXG4gICQuZm4uc3dpcGUucGFnZVNjcm9sbCA9IHtcbiAgICBOT05FOiBOT05FLFxuICAgIEhPUklaT05UQUw6IEhPUklaT05UQUwsXG4gICAgVkVSVElDQUw6IFZFUlRJQ0FMLFxuICAgIEFVVE86IEFVVE9cbiAgfTtcblxuICAvKipcbiAgICogQ29uc3RhbnRzIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZCBpbiBhIHN3aXBlLiAgVGhlc2UgYXJlIHVzZWQgdG8gc2V0IGJvdGggdGhlIHZhbHVlIG9mIDxjb2RlPmZpbmdlcnM8L2NvZGU+IGluIHRoZVxuICAgKiBvcHRpb25zIG9iamVjdCwgYXMgd2VsbCBhcyB0aGUgdmFsdWUgb2YgdGhlIDxjb2RlPmZpbmdlcnM8L2NvZGU+IGV2ZW50IHByb3BlcnR5LlxuICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGFyZSByZWFkIG9ubHksIGF0dGVtcHRpbmcgdG8gY2hhbmdlIHRoZW0gd2lsbCBub3QgYWx0ZXIgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgKiBAbmFtZXNwYWNlXG4gICAqIEByZWFkb25seVxuICAgKiBAc2VlICQuZm4uc3dpcGUuZGVmYXVsdHMjZmluZ2Vyc1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gT05FIENvbnN0YW50IGluZGljYXRpbmcgMSBmaW5nZXIgaXMgdG8gYmUgZGV0ZWN0ZWQgLyB3YXMgZGV0ZWN0ZWQuIFZhbHVlIGlzIDxjb2RlPjE8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gVFdPIENvbnN0YW50IGluZGljYXRpbmcgMiBmaW5nZXJzIGFyZSB0byBiZSBkZXRlY3RlZCAvIHdlcmUgZGV0ZWN0ZWQuIFZhbHVlIGlzIDxjb2RlPjI8L2NvZGU+LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gVEhSRUUgQ29uc3RhbnQgaW5kaWNhdGluZyAzIGZpbmdlciBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBWYWx1ZSBpcyA8Y29kZT4zPC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IEZPVVIgQ29uc3RhbnQgaW5kaWNhdGluZyA0IGZpbmdlciBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBOb3QgYWxsIGRldmljZXMgc3VwcG9ydCB0aGlzLiBWYWx1ZSBpcyA8Y29kZT40PC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IEZJVkUgQ29uc3RhbnQgaW5kaWNhdGluZyA1IGZpbmdlciBhcmUgdG8gYmUgZGV0ZWN0ZWQgLyB3ZXJlIGRldGVjdGVkLiBOb3QgYWxsIGRldmljZXMgc3VwcG9ydCB0aGlzLiBWYWx1ZSBpcyA8Y29kZT41PC9jb2RlPi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IEFMTCBDb25zdGFudCBpbmRpY2F0aW5nIGFueSBjb21iaW5hdGlvbiBvZiBmaW5nZXIgYXJlIHRvIGJlIGRldGVjdGVkLiAgVmFsdWUgaXMgPGNvZGU+XCJhbGxcIjwvY29kZT4uXG4gICAqL1xuICAkLmZuLnN3aXBlLmZpbmdlcnMgPSB7XG4gICAgT05FOiAxLFxuICAgIFRXTzogMixcbiAgICBUSFJFRTogMyxcbiAgICBGT1VSOiA0LFxuICAgIEZJVkU6IDUsXG4gICAgQUxMOiBBTExfRklOR0VSU1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIHRoZSBwbHVnaW4gZm9yIGVhY2ggRE9NIGVsZW1lbnQgbWF0Y2hlZFxuICAgKiBUaGlzIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1haW4gVG91Y2hTd2lwZSBjbGFzcyBmb3IgZWFjaCBET00gZWxlbWVudCwgYW5kIHRoZW5cbiAgICogc2F2ZXMgYSByZWZlcmVuY2UgdG8gdGhhdCBpbnN0YW5jZSBpbiB0aGUgZWxlbWVudHMgZGF0YSBwcm9wZXJ0eS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcbiAgICAvL1ByZXAgYW5kIGV4dGVuZCB0aGUgb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIChvcHRpb25zLmFsbG93UGFnZVNjcm9sbCA9PT0gdW5kZWZpbmVkICYmIChvcHRpb25zLnN3aXBlICE9PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5zd2lwZVN0YXR1cyAhPT0gdW5kZWZpbmVkKSkpIHtcbiAgICAgIG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsID0gTk9ORTtcbiAgICB9XG5cbiAgICAvL0NoZWNrIGZvciBkZXByZWNhdGVkIG9wdGlvbnNcbiAgICAvL0Vuc3VyZSB0aGF0IGFueSBvbGQgY2xpY2sgaGFuZGxlcnMgYXJlIGFzc2lnbmVkIHRvIHRoZSBuZXcgdGFwLCB1bmxlc3Mgd2UgaGF2ZSBhIHRhcFxuICAgIGlmIChvcHRpb25zLmNsaWNrICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy50YXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9ucy50YXAgPSBvcHRpb25zLmNsaWNrO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIC8vcGFzcyBlbXB0eSBvYmplY3Qgc28gd2UgZG9udCBtb2RpZnkgdGhlIGRlZmF1bHRzXG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnN3aXBlLmRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vRm9yIGVhY2ggZWxlbWVudCBpbnN0YW50aWF0ZSB0aGUgcGx1Z2luXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgIC8vQ2hlY2sgd2UgaGF2ZW50IGFscmVhZHkgaW5pdGlhbGlzZWQgdGhlIHBsdWdpblxuICAgICAgdmFyIHBsdWdpbiA9ICR0aGlzLmRhdGEoUExVR0lOX05TKTtcblxuICAgICAgaWYgKCFwbHVnaW4pIHtcbiAgICAgICAgcGx1Z2luID0gbmV3IFRvdWNoU3dpcGUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICR0aGlzLmRhdGEoUExVR0lOX05TLCBwbHVnaW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1haW4gVG91Y2hTd2lwZSBQbHVnaW4gQ2xhc3MuXG4gICAqIERvIG5vdCB1c2UgdGhpcyB0byBjb25zdHJ1Y3QgeW91ciBUb3VjaFN3aXBlIG9iamVjdCwgdXNlIHRoZSBqUXVlcnkgcGx1Z2luIG1ldGhvZCAkLmZuLnN3aXBlKCk7IHtAbGluayAkLmZuLnN3aXBlfVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbmFtZSBUb3VjaFN3aXBlXG4gICAqIEBwYXJhbSB7RE9NTm9kZX0gZWxlbWVudCBUaGUgSFRNTCBET00gb2JqZWN0IHRvIGFwcGx5IHRvIHBsdWdpbiB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyB0byBjb25maWd1cmUgdGhlIHBsdWdpbiB3aXRoLiAgQGxpbmsgeyQuZm4uc3dpcGUuZGVmYXVsdHN9XG4gICAqIEBzZWUgJC5maC5zd2lwZS5kZWZhdWx0c1xuICAgKiBAc2VlICQuZmguc3dpcGVcbiAgICogQGNsYXNzXG4gICAqL1xuICBmdW5jdGlvbiBUb3VjaFN3aXBlKGVsZW1lbnQsIG9wdGlvbnMpIHtcblxuICAgIC8vdGFrZSBhIGxvY2FsL2luc3RhY25lIGxldmVsIGNvcHkgb2YgdGhlIG9wdGlvbnMgLSBzaG91bGQgbWFrZSBpdCB0aGlzLm9wdGlvbnMgcmVhbGx5Li4uXG4gICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgdXNlVG91Y2hFdmVudHMgPSAoU1VQUE9SVFNfVE9VQ0ggfHwgU1VQUE9SVFNfUE9JTlRFUiB8fCAhb3B0aW9ucy5mYWxsYmFja1RvTW91c2VFdmVudHMpLFxuICAgICAgU1RBUlRfRVYgPSB1c2VUb3VjaEV2ZW50cyA/IChTVVBQT1JUU19QT0lOVEVSID8gKFNVUFBPUlRTX1BPSU5URVJfSUUxMCA/ICdNU1BvaW50ZXJEb3duJyA6ICdwb2ludGVyZG93bicpIDogJ3RvdWNoc3RhcnQnKSA6ICdtb3VzZWRvd24nLFxuICAgICAgTU9WRV9FViA9IHVzZVRvdWNoRXZlbnRzID8gKFNVUFBPUlRTX1BPSU5URVIgPyAoU1VQUE9SVFNfUE9JTlRFUl9JRTEwID8gJ01TUG9pbnRlck1vdmUnIDogJ3BvaW50ZXJtb3ZlJykgOiAndG91Y2htb3ZlJykgOiAnbW91c2Vtb3ZlJyxcbiAgICAgIEVORF9FViA9IHVzZVRvdWNoRXZlbnRzID8gKFNVUFBPUlRTX1BPSU5URVIgPyAoU1VQUE9SVFNfUE9JTlRFUl9JRTEwID8gJ01TUG9pbnRlclVwJyA6ICdwb2ludGVydXAnKSA6ICd0b3VjaGVuZCcpIDogJ21vdXNldXAnLFxuICAgICAgTEVBVkVfRVYgPSB1c2VUb3VjaEV2ZW50cyA/IChTVVBQT1JUU19QT0lOVEVSID8gJ21vdXNlbGVhdmUnIDogbnVsbCkgOiAnbW91c2VsZWF2ZScsIC8vd2UgbWFudWFsbHkgZGV0ZWN0IGxlYXZlIG9uIHRvdWNoIGRldmljZXMsIHNvIG51bGwgZXZlbnQgaGVyZVxuICAgICAgQ0FOQ0VMX0VWID0gKFNVUFBPUlRTX1BPSU5URVIgPyAoU1VQUE9SVFNfUE9JTlRFUl9JRTEwID8gJ01TUG9pbnRlckNhbmNlbCcgOiAncG9pbnRlcmNhbmNlbCcpIDogJ3RvdWNoY2FuY2VsJyk7XG5cblxuXG4gICAgLy90b3VjaCBwcm9wZXJ0aWVzXG4gICAgdmFyIGRpc3RhbmNlID0gMCxcbiAgICAgIGRpcmVjdGlvbiA9IG51bGwsXG4gICAgICBjdXJyZW50RGlyZWN0aW9uID0gbnVsbCxcbiAgICAgIGR1cmF0aW9uID0gMCxcbiAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gMCxcbiAgICAgIGVuZFRvdWNoZXNEaXN0YW5jZSA9IDAsXG4gICAgICBwaW5jaFpvb20gPSAxLFxuICAgICAgcGluY2hEaXN0YW5jZSA9IDAsXG4gICAgICBwaW5jaERpcmVjdGlvbiA9IDAsXG4gICAgICBtYXhpbXVtc01hcCA9IG51bGw7XG5cblxuXG4gICAgLy9qUXVlcnkgd3JhcHBlZCBlbGVtZW50IGZvciB0aGlzIGluc3RhbmNlXG4gICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcblxuICAgIC8vQ3VycmVudCBwaGFzZSBvZiB0aCB0b3VjaCBjeWNsZVxuICAgIHZhciBwaGFzZSA9IFwic3RhcnRcIjtcblxuICAgIC8vIHRoZSBjdXJyZW50IG51bWJlciBvZiBmaW5nZXJzIGJlaW5nIHVzZWQuXG4gICAgdmFyIGZpbmdlckNvdW50ID0gMDtcblxuICAgIC8vdHJhY2sgbW91c2UgcG9pbnRzIC8gZGVsdGFcbiAgICB2YXIgZmluZ2VyRGF0YSA9IHt9O1xuXG4gICAgLy90cmFjayB0aW1lc1xuICAgIHZhciBzdGFydFRpbWUgPSAwLFxuICAgICAgZW5kVGltZSA9IDAsXG4gICAgICBwcmV2aW91c1RvdWNoRW5kVGltZSA9IDAsXG4gICAgICBmaW5nZXJDb3VudEF0UmVsZWFzZSA9IDAsXG4gICAgICBkb3VibGVUYXBTdGFydFRpbWUgPSAwO1xuXG4gICAgLy9UaW1lb3V0c1xuICAgIHZhciBzaW5nbGVUYXBUaW1lb3V0ID0gbnVsbCxcbiAgICAgIGhvbGRUaW1lb3V0ID0gbnVsbDtcblxuICAgIC8vIEFkZCBnZXN0dXJlcyB0byBhbGwgc3dpcGFibGUgYXJlYXMgaWYgc3VwcG9ydGVkXG4gICAgdHJ5IHtcbiAgICAgICRlbGVtZW50Lm9uKFNUQVJUX0VWLCB0b3VjaFN0YXJ0KTtcbiAgICAgICRlbGVtZW50Lm9uKENBTkNFTF9FViwgdG91Y2hDYW5jZWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICQuZXJyb3IoJ2V2ZW50cyBub3Qgc3VwcG9ydGVkICcgKyBTVEFSVF9FViArICcsJyArIENBTkNFTF9FViArICcgb24galF1ZXJ5LnN3aXBlJyk7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvL1B1YmxpYyBtZXRob2RzXG4gICAgLy9cblxuICAgIC8qKlxuICAgICAqIHJlLWVuYWJsZXMgdGhlIHN3aXBlIHBsdWdpbiB3aXRoIHRoZSBwcmV2aW91cyBjb25maWd1cmF0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJC5mbi5zd2lwZSNlbmFibGVcbiAgICAgKiBAcmV0dXJuIHtET01Ob2RlfSBUaGUgRG9tIGVsZW1lbnQgdGhhdCB3YXMgcmVnaXN0ZXJlZCB3aXRoIFRvdWNoU3dpcGVcbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJlbmFibGVcIik7XG4gICAgICovXG4gICAgdGhpcy5lbmFibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vSW5jYXNlIHdlIGFyZSBhbHJlYWR5IGVuYWJsZWQsIGNsZWFuIHVwLi4uXG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICAgICRlbGVtZW50Lm9uKFNUQVJUX0VWLCB0b3VjaFN0YXJ0KTtcbiAgICAgICRlbGVtZW50Lm9uKENBTkNFTF9FViwgdG91Y2hDYW5jZWwpO1xuICAgICAgcmV0dXJuICRlbGVtZW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBkaXNhYmxlcyB0aGUgc3dpcGUgcGx1Z2luXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJC5mbi5zd2lwZSNkaXNhYmxlXG4gICAgICogQHJldHVybiB7RE9NTm9kZX0gVGhlIERvbSBlbGVtZW50IHRoYXQgaXMgbm93IHJlZ2lzdGVyZWQgd2l0aCBUb3VjaFN3aXBlXG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwiZGlzYWJsZVwiKTtcbiAgICAgKi9cbiAgICB0aGlzLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgcmV0dXJuICRlbGVtZW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBzd2lwZSBwbHVnaW4gY29tcGxldGVseS4gVG8gdXNlIGFueSBzd2lwZSBtZXRob2RzLCB5b3UgbXVzdCByZSBpbml0aWFsaXNlIHRoZSBwbHVnaW4uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJC5mbi5zd2lwZSNkZXN0cm95XG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwiZGVzdHJveVwiKTtcbiAgICAgKi9cbiAgICB0aGlzLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgJGVsZW1lbnQuZGF0YShQTFVHSU5fTlMsIG51bGwpO1xuICAgICAgJGVsZW1lbnQgPSBudWxsO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEFsbG93cyBydW4gdGltZSB1cGRhdGluZyBvZiB0aGUgc3dpcGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lICQuZm4uc3dpcGUjb3B0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFRoZSBvcHRpb24gcHJvcGVydHkgdG8gZ2V0IG9yIHNldCwgb3IgYSBoYXMgb2YgbXVsdGlwbGUgb3B0aW9ucyB0byBzZXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gc2V0IHRoZSBwcm9wZXJ0eSB0b1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gSWYgb25seSBhIHByb3BlcnR5IG5hbWUgaXMgcGFzc2VkLCB0aGVuIHRoYXQgcHJvcGVydHkgdmFsdWUgaXMgcmV0dXJuZWQuIElmIG5vdGhpbmcgaXMgcGFzc2VkIHRoZSBjdXJyZW50IG9wdGlvbnMgaGFzaCBpcyByZXR1cm5lZC5cbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJvcHRpb25cIiwgXCJ0aHJlc2hvbGRcIik7IC8vIHJldHVybiB0aGUgdGhyZXNob2xkXG4gICAgICogQGV4YW1wbGUgJChcIiNlbGVtZW50XCIpLnN3aXBlKFwib3B0aW9uXCIsIFwidGhyZXNob2xkXCIsIDEwMCk7IC8vIHNldCB0aGUgdGhyZXNob2xkIGFmdGVyIGluaXRcbiAgICAgKiBAZXhhbXBsZSAkKFwiI2VsZW1lbnRcIikuc3dpcGUoXCJvcHRpb25cIiwge3RocmVzaG9sZDoxMDAsIGZpbmdlcnM6M30gKTsgLy8gc2V0IG11bHRpcGxlIHByb3BlcnRpZXMgYWZ0ZXIgaW5pdFxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZSh7dGhyZXNob2xkOjEwMCwgZmluZ2VyczozfSApOyAvLyBzZXQgbXVsdGlwbGUgcHJvcGVydGllcyBhZnRlciBpbml0IC0gdGhlIFwib3B0aW9uXCIgbWV0aG9kIGlzIG9wdGlvbmFsIVxuICAgICAqIEBleGFtcGxlICQoXCIjZWxlbWVudFwiKS5zd2lwZShcIm9wdGlvblwiKTsgLy8gUmV0dXJuIHRoZSBjdXJyZW50IG9wdGlvbnMgaGFzaFxuICAgICAqIEBzZWUgJC5mbi5zd2lwZS5kZWZhdWx0c1xuICAgICAqXG4gICAgICovXG4gICAgdGhpcy5vcHRpb24gPSBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpIHtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKG9wdGlvbnMsIHByb3BlcnR5KTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9uc1twcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQuZXJyb3IoJ09wdGlvbiAnICsgcHJvcGVydHkgKyAnIGRvZXMgbm90IGV4aXN0IG9uIGpRdWVyeS5zd2lwZS5vcHRpb25zJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuXG5cbiAgICAvL1xuICAgIC8vIFByaXZhdGUgbWV0aG9kc1xuICAgIC8vXG5cbiAgICAvL1xuICAgIC8vIEVWRU5UU1xuICAgIC8vXG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBmb3IgYSB0b3VjaCBzdGFydCBldmVudC5cbiAgICAgKiBTdG9wcyB0aGUgZGVmYXVsdCBjbGljayBldmVudCBmcm9tIHRyaWdnZXJpbmcgYW5kIHN0b3JlcyB3aGVyZSB3ZSB0b3VjaGVkXG4gICAgICogQGlubmVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGpxRXZlbnQgVGhlIG5vcm1hbGlzZWQgalF1ZXJ5IGV2ZW50IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b3VjaFN0YXJ0KGpxRXZlbnQpIHtcblxuICAgICAgLy9JZiB3ZSBhbHJlYWR5IGluIGEgdG91Y2ggZXZlbnQgKGEgZmluZ2VyIGFscmVhZHkgaW4gdXNlKSB0aGVuIGlnbm9yZSBzdWJzZXF1ZW50IG9uZXMuLlxuICAgICAgaWYgKGdldFRvdWNoSW5Qcm9ncmVzcygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy9DaGVjayBpZiB0aGlzIGVsZW1lbnQgbWF0Y2hlcyBhbnkgaW4gdGhlIGV4Y2x1ZGVkIGVsZW1lbnRzIHNlbGVjdG9ycywgIG9yIGl0cyBwYXJlbnQgaXMgZXhjbHVkZWQsIGlmIHNvLCBET04nVCBzd2lwZVxuICAgICAgaWYgKCQoanFFdmVudC50YXJnZXQpLmNsb3Nlc3Qob3B0aW9ucy5leGNsdWRlZEVsZW1lbnRzLCAkZWxlbWVudCkubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vQXMgd2UgdXNlIEpxdWVyeSBiaW5kIGZvciBldmVudHMsIHdlIG5lZWQgdG8gdGFyZ2V0IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgIC8vSWYgdGhlc2UgZXZlbnRzIGFyZSBiZWluZyBwcm9ncmFtbWF0aWNhbGx5IHRyaWdnZXJlZCwgd2UgZG9uJ3QgaGF2ZSBhbiBvcmlnaW5hbCBldmVudCBvYmplY3QsIHNvIHVzZSB0aGUgSnEgb25lLlxuICAgICAgdmFyIGV2ZW50ID0ganFFdmVudC5vcmlnaW5hbEV2ZW50ID8ganFFdmVudC5vcmlnaW5hbEV2ZW50IDoganFFdmVudDtcblxuXG4gICAgICAvL0lmIHdlIGhhdmUgYSBwb2ludGVyIGV2ZW50LCB3aG9lcyB0eXBlIGlzICdtb3VzZScgYW5kIHdlIGhhdmUgc2FpZCBOTyBtb3VzZSBldmVudHMsIHRoZW4gZG9udCBkbyBhbnl0aGluZy5cbiAgICAgIGlmKGV2ZW50LnBvaW50ZXJUeXBlICYmIGV2ZW50LnBvaW50ZXJUeXBlPT1cIm1vdXNlXCIgJiYgb3B0aW9ucy5mYWxsYmFja1RvTW91c2VFdmVudHM9PWZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXQsXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBldnQgPSB0b3VjaGVzID8gdG91Y2hlc1swXSA6IGV2ZW50O1xuXG4gICAgICBwaGFzZSA9IFBIQVNFX1NUQVJUO1xuXG4gICAgICAvL0lmIHdlIHN1cHBvcnQgdG91Y2hlcywgZ2V0IHRoZSBmaW5nZXIgY291bnRcbiAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgIC8vIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIGZpbmdlcnMgdG91Y2hpbmcgdGhlIHNjcmVlblxuICAgICAgICBmaW5nZXJDb3VudCA9IHRvdWNoZXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgLy9FbHNlIHRoaXMgaXMgdGhlIGRlc2t0b3AsIHNvIHN0b3AgdGhlIGJyb3dzZXIgZnJvbSBkcmFnZ2luZyBjb250ZW50XG4gICAgICBlbHNlIGlmIChvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzICE9PSBmYWxzZSkge1xuICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vY2FsbCB0aGlzIG9uIGpxIGV2ZW50IHNvIHdlIGFyZSBjcm9zcyBicm93c2VyXG4gICAgICB9XG5cbiAgICAgIC8vY2xlYXIgdmFycy4uXG4gICAgICBkaXN0YW5jZSA9IDA7XG4gICAgICBkaXJlY3Rpb24gPSBudWxsO1xuICAgICAgY3VycmVudERpcmVjdGlvbj1udWxsO1xuICAgICAgcGluY2hEaXJlY3Rpb24gPSBudWxsO1xuICAgICAgZHVyYXRpb24gPSAwO1xuICAgICAgc3RhcnRUb3VjaGVzRGlzdGFuY2UgPSAwO1xuICAgICAgZW5kVG91Y2hlc0Rpc3RhbmNlID0gMDtcbiAgICAgIHBpbmNoWm9vbSA9IDE7XG4gICAgICBwaW5jaERpc3RhbmNlID0gMDtcbiAgICAgIG1heGltdW1zTWFwID0gY3JlYXRlTWF4aW11bXNEYXRhKCk7XG4gICAgICBjYW5jZWxNdWx0aUZpbmdlclJlbGVhc2UoKTtcblxuICAgICAgLy9DcmVhdGUgdGhlIGRlZmF1bHQgZmluZ2VyIGRhdGFcbiAgICAgIGNyZWF0ZUZpbmdlckRhdGEoMCwgZXZ0KTtcblxuICAgICAgLy8gY2hlY2sgdGhlIG51bWJlciBvZiBmaW5nZXJzIGlzIHdoYXQgd2UgYXJlIGxvb2tpbmcgZm9yLCBvciB3ZSBhcmUgY2FwdHVyaW5nIHBpbmNoZXNcbiAgICAgIGlmICghdG91Y2hlcyB8fCAoZmluZ2VyQ291bnQgPT09IG9wdGlvbnMuZmluZ2VycyB8fCBvcHRpb25zLmZpbmdlcnMgPT09IEFMTF9GSU5HRVJTKSB8fCBoYXNQaW5jaGVzKCkpIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBjb29yZGluYXRlcyBvZiB0aGUgdG91Y2hcbiAgICAgICAgc3RhcnRUaW1lID0gZ2V0VGltZVN0YW1wKCk7XG5cbiAgICAgICAgaWYgKGZpbmdlckNvdW50ID09IDIpIHtcbiAgICAgICAgICAvL0tlZXAgdHJhY2sgb2YgdGhlIGluaXRpYWwgcGluY2ggZGlzdGFuY2UsIHNvIHdlIGNhbiBjYWxjdWxhdGUgdGhlIGRpZmYgbGF0ZXJcbiAgICAgICAgICAvL1N0b3JlIHNlY29uZCBmaW5nZXIgZGF0YSBhcyBzdGFydFxuICAgICAgICAgIGNyZWF0ZUZpbmdlckRhdGEoMSwgdG91Y2hlc1sxXSk7XG4gICAgICAgICAgc3RhcnRUb3VjaGVzRGlzdGFuY2UgPSBlbmRUb3VjaGVzRGlzdGFuY2UgPSBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UoZmluZ2VyRGF0YVswXS5zdGFydCwgZmluZ2VyRGF0YVsxXS5zdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5zd2lwZVN0YXR1cyB8fCBvcHRpb25zLnBpbmNoU3RhdHVzKSB7XG4gICAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9BIHRvdWNoIHdpdGggbW9yZSBvciBsZXNzIHRoYW4gdGhlIGZpbmdlcnMgd2UgYXJlIGxvb2tpbmcgZm9yLCBzbyBjYW5jZWxcbiAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vSWYgd2UgaGF2ZSBhIHJldHVybiB2YWx1ZSBmcm9tIHRoZSB1c2VycyBoYW5kbGVyLCB0aGVuIHJldHVybiBhbmQgY2FuY2VsXG4gICAgICBpZiAocmV0ID09PSBmYWxzZSkge1xuICAgICAgICBwaGFzZSA9IFBIQVNFX0NBTkNFTDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhvbGQpIHtcbiAgICAgICAgICBob2xkVGltZW91dCA9IHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vVHJpZ2dlciB0aGUgZXZlbnRcbiAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ2hvbGQnLCBbZXZlbnQudGFyZ2V0XSk7XG4gICAgICAgICAgICAvL0ZpcmUgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ob2xkKSB7XG4gICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuaG9sZC5jYWxsKCRlbGVtZW50LCBldmVudCwgZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzKSwgb3B0aW9ucy5sb25nVGFwVGhyZXNob2xkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIG1vdmUgZXZlbnQuXG4gICAgICogSWYgd2UgY2hhbmdlIGZpbmdlcnMgZHVyaW5nIG1vdmUsIHRoZW4gY2FuY2VsIHRoZSBldmVudFxuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBqcUV2ZW50IFRoZSBub3JtYWxpc2VkIGpRdWVyeSBldmVudCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hNb3ZlKGpxRXZlbnQpIHtcblxuICAgICAgLy9BcyB3ZSB1c2UgSnF1ZXJ5IGJpbmQgZm9yIGV2ZW50cywgd2UgbmVlZCB0byB0YXJnZXQgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgICAgLy9JZiB0aGVzZSBldmVudHMgYXJlIGJlaW5nIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkLCB3ZSBkb24ndCBoYXZlIGFuIG9yaWdpbmFsIGV2ZW50IG9iamVjdCwgc28gdXNlIHRoZSBKcSBvbmUuXG4gICAgICB2YXIgZXZlbnQgPSBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgPyBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgOiBqcUV2ZW50O1xuXG4gICAgICAvL0lmIHdlIGFyZSBlbmRpbmcsIGNhbmNlbGxpbmcsIG9yIHdpdGhpbiB0aGUgdGhyZXNob2xkIG9mIDIgZmluZ2VycyBiZWluZyByZWxlYXNlZCwgZG9uJ3QgdHJhY2sgYW55dGhpbmcuLlxuICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9FTkQgfHwgcGhhc2UgPT09IFBIQVNFX0NBTkNFTCB8fCBpbk11bHRpRmluZ2VyUmVsZWFzZSgpKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIHZhciByZXQsXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBldnQgPSB0b3VjaGVzID8gdG91Y2hlc1swXSA6IGV2ZW50O1xuXG5cbiAgICAgIC8vVXBkYXRlIHRoZSAgZmluZ2VyIGRhdGFcbiAgICAgIHZhciBjdXJyZW50RmluZ2VyID0gdXBkYXRlRmluZ2VyRGF0YShldnQpO1xuICAgICAgZW5kVGltZSA9IGdldFRpbWVTdGFtcCgpO1xuXG4gICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICBmaW5nZXJDb3VudCA9IHRvdWNoZXMubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5ob2xkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIHBoYXNlID0gUEhBU0VfTU9WRTtcblxuICAgICAgLy9JZiB3ZSBoYXZlIDIgZmluZ2VycyBnZXQgVG91Y2hlcyBkaXN0YW5jZSBhcyB3ZWxsXG4gICAgICBpZiAoZmluZ2VyQ291bnQgPT0gMikge1xuXG4gICAgICAgIC8vS2VlcCB0cmFjayBvZiB0aGUgaW5pdGlhbCBwaW5jaCBkaXN0YW5jZSwgc28gd2UgY2FuIGNhbGN1bGF0ZSB0aGUgZGlmZiBsYXRlclxuICAgICAgICAvL1dlIGRvIHRoaXMgaGVyZSBhcyB3ZWxsIGFzIHRoZSBzdGFydCBldmVudCwgaW4gY2FzZSB0aGV5IHN0YXJ0IHdpdGggMSBmaW5nZXIsIGFuZCB0aGUgcHJlc3MgMiBmaW5nZXJzXG4gICAgICAgIGlmIChzdGFydFRvdWNoZXNEaXN0YW5jZSA9PSAwKSB7XG4gICAgICAgICAgLy9DcmVhdGUgc2Vjb25kIGZpbmdlciBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lLi4uXG4gICAgICAgICAgY3JlYXRlRmluZ2VyRGF0YSgxLCB0b3VjaGVzWzFdKTtcblxuICAgICAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gZW5kVG91Y2hlc0Rpc3RhbmNlID0gY2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKGZpbmdlckRhdGFbMF0uc3RhcnQsIGZpbmdlckRhdGFbMV0uc3RhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vRWxzZSBqdXN0IHVwZGF0ZSB0aGUgc2Vjb25kIGZpbmdlclxuICAgICAgICAgIHVwZGF0ZUZpbmdlckRhdGEodG91Y2hlc1sxXSk7XG5cbiAgICAgICAgICBlbmRUb3VjaGVzRGlzdGFuY2UgPSBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UoZmluZ2VyRGF0YVswXS5lbmQsIGZpbmdlckRhdGFbMV0uZW5kKTtcbiAgICAgICAgICBwaW5jaERpcmVjdGlvbiA9IGNhbGN1bGF0ZVBpbmNoRGlyZWN0aW9uKGZpbmdlckRhdGFbMF0uZW5kLCBmaW5nZXJEYXRhWzFdLmVuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBwaW5jaFpvb20gPSBjYWxjdWxhdGVQaW5jaFpvb20oc3RhcnRUb3VjaGVzRGlzdGFuY2UsIGVuZFRvdWNoZXNEaXN0YW5jZSk7XG4gICAgICAgIHBpbmNoRGlzdGFuY2UgPSBNYXRoLmFicyhzdGFydFRvdWNoZXNEaXN0YW5jZSAtIGVuZFRvdWNoZXNEaXN0YW5jZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoZmluZ2VyQ291bnQgPT09IG9wdGlvbnMuZmluZ2VycyB8fCBvcHRpb25zLmZpbmdlcnMgPT09IEFMTF9GSU5HRVJTKSB8fCAhdG91Y2hlcyB8fCBoYXNQaW5jaGVzKCkpIHtcblxuICAgICAgICAvL1RoZSBvdmVyYWxsIGRpcmVjdGlvbiBvZiB0aGUgc3dpcGUuIEZyb20gc3RhcnQgdG8gbm93LlxuICAgICAgICBkaXJlY3Rpb24gPSBjYWxjdWxhdGVEaXJlY3Rpb24oY3VycmVudEZpbmdlci5zdGFydCwgY3VycmVudEZpbmdlci5lbmQpO1xuXG4gICAgICAgIC8vVGhlIGltbWVkaWF0ZSBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlLCBkaXJlY3Rpb24gYmV0d2VlbiB0aGUgbGFzdCBtb3ZlbWVudCBhbmQgdGhpcyBvbmUuXG4gICAgICAgIGN1cnJlbnREaXJlY3Rpb24gPSBjYWxjdWxhdGVEaXJlY3Rpb24oY3VycmVudEZpbmdlci5sYXN0LCBjdXJyZW50RmluZ2VyLmVuZCk7XG5cbiAgICAgICAgLy9DaGVjayBpZiB3ZSBuZWVkIHRvIHByZXZlbnQgZGVmYXVsdCBldmVudCAocGFnZSBzY3JvbGwgLyBwaW5jaCB6b29tKSBvciBub3RcbiAgICAgICAgdmFsaWRhdGVEZWZhdWx0RXZlbnQoanFFdmVudCwgY3VycmVudERpcmVjdGlvbik7XG5cbiAgICAgICAgLy9EaXN0YW5jZSBhbmQgZHVyYXRpb24gYXJlIGFsbCBvZmYgdGhlIG1haW4gZmluZ2VyXG4gICAgICAgIGRpc3RhbmNlID0gY2FsY3VsYXRlRGlzdGFuY2UoY3VycmVudEZpbmdlci5zdGFydCwgY3VycmVudEZpbmdlci5lbmQpO1xuICAgICAgICBkdXJhdGlvbiA9IGNhbGN1bGF0ZUR1cmF0aW9uKCk7XG5cbiAgICAgICAgLy9DYWNoZSB0aGUgbWF4aW11bSBkaXN0YW5jZSB3ZSBtYWRlIGluIHRoaXMgZGlyZWN0aW9uXG4gICAgICAgIHNldE1heERpc3RhbmNlKGRpcmVjdGlvbiwgZGlzdGFuY2UpO1xuXG4gICAgICAgIC8vVHJpZ2dlciBzdGF0dXMgaGFuZGxlclxuICAgICAgICByZXQgPSB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuXG5cbiAgICAgICAgLy9JZiB3ZSB0cmlnZ2VyIGVuZCBldmVudHMgd2hlbiB0aHJlc2hvbGQgYXJlIG1ldCwgb3IgdHJpZ2dlciBldmVudHMgd2hlbiB0b3VjaCBsZWF2ZXMgZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgfHwgb3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKSB7XG5cbiAgICAgICAgICB2YXIgaW5Cb3VuZHMgPSB0cnVlO1xuXG4gICAgICAgICAgLy9JZiBjaGVja2luZyBpZiB3ZSBsZWF2ZSB0aGUgZWxlbWVudCwgcnVuIHRoZSBib3VuZHMgY2hlY2sgKHdlIGNhbiB1c2UgdG91Y2hsZWF2ZSBhcyBpdHMgbm90IHN1cHBvcnRlZCBvbiB3ZWJraXQpXG4gICAgICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGdldGJvdW5kcyh0aGlzKTtcbiAgICAgICAgICAgIGluQm91bmRzID0gaXNJbkJvdW5kcyhjdXJyZW50RmluZ2VyLmVuZCwgYm91bmRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL1RyaWdnZXIgZW5kIGhhbmRsZXMgYXMgd2Ugc3dpcGUgaWYgdGhyZXNob2xkcyBtZXQgb3IgaWYgd2UgaGF2ZSBsZWZ0IHRoZSBlbGVtZW50IGlmIHRoZSB1c2VyIGhhcyBhc2tlZCB0byBjaGVjayB0aGVzZS4uXG4gICAgICAgICAgaWYgKCFvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kICYmIGluQm91bmRzKSB7XG4gICAgICAgICAgICBwaGFzZSA9IGdldE5leHRQaGFzZShQSEFTRV9NT1ZFKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9XZSBlbmQgaWYgb3V0IG9mIGJvdW5kcyBoZXJlLCBzbyBzZXQgY3VycmVudCBwaGFzZSB0byBFTkQsIGFuZCBjaGVjayBpZiBpdHMgbW9kaWZpZWRcbiAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUgJiYgIWluQm91bmRzKSB7XG4gICAgICAgICAgICBwaGFzZSA9IGdldE5leHRQaGFzZShQSEFTRV9FTkQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwaGFzZSA9PSBQSEFTRV9DQU5DRUwgfHwgcGhhc2UgPT0gUEhBU0VfRU5EKSB7XG4gICAgICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAgIHBoYXNlID0gUEhBU0VfQ0FOQ0VMO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIEV2ZW50IGhhbmRsZXIgZm9yIGEgdG91Y2ggZW5kIGV2ZW50LlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlyZWN0aW9uIGFuZCB0cmlnZ2VyIGV2ZW50c1xuICAgICAqIEBpbm5lclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBqcUV2ZW50IFRoZSBub3JtYWxpc2VkIGpRdWVyeSBldmVudCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hFbmQoanFFdmVudCkge1xuICAgICAgLy9BcyB3ZSB1c2UgSnF1ZXJ5IGJpbmQgZm9yIGV2ZW50cywgd2UgbmVlZCB0byB0YXJnZXQgdGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgICAgLy9JZiB0aGVzZSBldmVudHMgYXJlIGJlaW5nIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkLCB3ZSBkb24ndCBoYXZlIGFuIG9yaWdpbmFsIGV2ZW50IG9iamVjdCwgc28gdXNlIHRoZSBKcSBvbmUuXG4gICAgICB2YXIgZXZlbnQgPSBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgPyBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgOiBqcUV2ZW50LFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQudG91Y2hlcztcblxuICAgICAgLy9JZiB3ZSBhcmUgc3RpbGwgaW4gYSB0b3VjaCB3aXRoIHRoZSBkZXZpY2Ugd2FpdCBhIGZyYWN0aW9uIGFuZCBzZWUgaWYgdGhlIG90aGVyIGZpbmdlciBjb21lcyB1cFxuICAgICAgLy9pZiBpdCBkb2VzIHdpdGhpbiB0aGUgdGhyZXNob2xkLCB0aGVuIHdlIHRyZWF0IGl0IGFzIGEgbXVsdGkgcmVsZWFzZSwgbm90IGEgc2luZ2xlIHJlbGVhc2UgYW5kIGVuZCB0aGUgdG91Y2ggLyBzd2lwZVxuICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgaWYgKHRvdWNoZXMubGVuZ3RoICYmICFpbk11bHRpRmluZ2VyUmVsZWFzZSgpKSB7XG4gICAgICAgICAgc3RhcnRNdWx0aUZpbmdlclJlbGVhc2UoZXZlbnQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRvdWNoZXMubGVuZ3RoICYmIGluTXVsdGlGaW5nZXJSZWxlYXNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL0lmIGEgcHJldmlvdXMgZmluZ2VyIGhhcyBiZWVuIHJlbGVhc2VkLCBjaGVjayBob3cgbG9uZyBhZ28sIGlmIHdpdGhpbiB0aGUgdGhyZXNob2xkLCB0aGVuIGFzc3VtZSBpdCB3YXMgYSBtdWx0aWZpbmdlciByZWxlYXNlLlxuICAgICAgLy9UaGlzIGlzIHVzZWQgdG8gYWxsb3cgMiBmaW5nZXJzIHRvIHJlbGVhc2UgZnJhY3Rpb25hbGx5IGFmdGVyIGVhY2ggb3RoZXIsIHdoaWxzdCBtYWludGFpbmluZyB0aGUgZXZlbnQgYXMgY29udGFpbmluZyAyIGZpbmdlcnMsIG5vdCAxXG4gICAgICBpZiAoaW5NdWx0aUZpbmdlclJlbGVhc2UoKSkge1xuICAgICAgICBmaW5nZXJDb3VudCA9IGZpbmdlckNvdW50QXRSZWxlYXNlO1xuICAgICAgfVxuXG4gICAgICAvL1NldCBlbmQgb2Ygc3dpcGVcbiAgICAgIGVuZFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcblxuICAgICAgLy9HZXQgZHVyYXRpb24gaW5jYXNlIG1vdmUgd2FzIG5ldmVyIGZpcmVkXG4gICAgICBkdXJhdGlvbiA9IGNhbGN1bGF0ZUR1cmF0aW9uKCk7XG5cbiAgICAgIC8vSWYgd2UgdHJpZ2dlciBoYW5kbGVycyBhdCBlbmQgb2Ygc3dpcGUgT1IsIHdlIHRyaWdnZXIgZHVyaW5nLCBidXQgdGhleSBkaWRudCB0cmlnZ2VyIGFuZCB3ZSBhcmUgc3RpbGwgaW4gdGhlIG1vdmUgcGhhc2VcbiAgICAgIGlmIChkaWRTd2lwZUJhY2tUb0NhbmNlbCgpIHx8ICF2YWxpZGF0ZVN3aXBlRGlzdGFuY2UoKSkge1xuICAgICAgICBwaGFzZSA9IFBIQVNFX0NBTkNFTDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCB8fCAob3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCA9PT0gZmFsc2UgJiYgcGhhc2UgPT09IFBIQVNFX01PVkUpKSB7XG4gICAgICAgIC8vY2FsbCB0aGlzIG9uIGpxIGV2ZW50IHNvIHdlIGFyZSBjcm9zcyBicm93c2VyXG4gICAgICAgIGlmIChvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzICE9PSBmYWxzZSAmJiBqcUV2ZW50LmNhbmNlbGFibGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAganFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIHBoYXNlID0gUEhBU0VfRU5EO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuICAgICAgLy9TcGVjaWFsIGNhc2VzIC0gQSB0YXAgc2hvdWxkIGFsd2F5cyBmaXJlIG9uIHRvdWNoIGVuZCByZWdhcmRsZXNzLFxuICAgICAgLy9TbyBoZXJlIHdlIG1hbnVhbGx5IHRyaWdnZXIgdGhlIHRhcCBlbmQgaGFuZGxlciBieSBpdHNlbGZcbiAgICAgIC8vV2UgZG9udCBydW4gdHJpZ2dlciBoYW5kbGVyIGFzIGl0IHdpbGwgcmUtdHJpZ2dlciBldmVudHMgdGhhdCBtYXkgaGF2ZSBmaXJlZCBhbHJlYWR5XG4gICAgICBlbHNlIGlmICghb3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZCAmJiBoYXNUYXAoKSkge1xuICAgICAgICAvL1RyaWdnZXIgdGhlIHBpbmNoIGV2ZW50cy4uLlxuICAgICAgICBwaGFzZSA9IFBIQVNFX0VORDtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgVEFQKTtcbiAgICAgIH0gZWxzZSBpZiAocGhhc2UgPT09IFBIQVNFX01PVkUpIHtcbiAgICAgICAgcGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICAgIHRyaWdnZXJIYW5kbGVyKGV2ZW50LCBwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyhmYWxzZSk7XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIGNhbmNlbCBldmVudC5cbiAgICAgKiBDbGVhcnMgY3VycmVudCB2YXJzXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG91Y2hDYW5jZWwoKSB7XG4gICAgICAvLyByZXNldCB0aGUgdmFyaWFibGVzIGJhY2sgdG8gZGVmYXVsdCB2YWx1ZXNcbiAgICAgIGZpbmdlckNvdW50ID0gMDtcbiAgICAgIGVuZFRpbWUgPSAwO1xuICAgICAgc3RhcnRUaW1lID0gMDtcbiAgICAgIHN0YXJ0VG91Y2hlc0Rpc3RhbmNlID0gMDtcbiAgICAgIGVuZFRvdWNoZXNEaXN0YW5jZSA9IDA7XG4gICAgICBwaW5jaFpvb20gPSAxO1xuXG4gICAgICAvL0lmIHdlIHdlcmUgaW4gcHJvZ3Jlc3Mgb2YgdHJhY2tpbmcgYSBwb3NzaWJsZSBtdWx0aSB0b3VjaCBlbmQsIHRoZW4gcmUgc2V0IGl0LlxuICAgICAgY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCk7XG5cbiAgICAgIHNldFRvdWNoSW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBhIHRvdWNoIGxlYXZlIGV2ZW50LlxuICAgICAqIFRoaXMgaXMgb25seSB0cmlnZ2VyZWQgb24gZGVza3RvcHMsIGluIHRvdWNoIHdlIHdvcmsgdGhpcyBvdXQgbWFudWFsbHlcbiAgICAgKiBhcyB0aGUgdG91Y2hsZWF2ZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIGluIHdlYmtpdFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvdWNoTGVhdmUoanFFdmVudCkge1xuICAgICAgLy9JZiB0aGVzZSBldmVudHMgYXJlIGJlaW5nIHByb2dyYW1tYXRpY2FsbHkgdHJpZ2dlcmVkLCB3ZSBkb24ndCBoYXZlIGFuIG9yaWdpbmFsIGV2ZW50IG9iamVjdCwgc28gdXNlIHRoZSBKcSBvbmUuXG4gICAgICB2YXIgZXZlbnQgPSBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgPyBqcUV2ZW50Lm9yaWdpbmFsRXZlbnQgOiBqcUV2ZW50O1xuXG4gICAgICAvL0lmIHdlIGhhdmUgdGhlIHRyaWdnZXIgb24gbGVhdmUgcHJvcGVydHkgc2V0Li4uLlxuICAgICAgaWYgKG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuICAgICAgICBwaGFzZSA9IGdldE5leHRQaGFzZShQSEFTRV9FTkQpO1xuICAgICAgICB0cmlnZ2VySGFuZGxlcihldmVudCwgcGhhc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyB0aGF0IHdlcmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBwbHVnaW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICAkZWxlbWVudC5vZmYoU1RBUlRfRVYsIHRvdWNoU3RhcnQpO1xuICAgICAgJGVsZW1lbnQub2ZmKENBTkNFTF9FViwgdG91Y2hDYW5jZWwpO1xuICAgICAgJGVsZW1lbnQub2ZmKE1PVkVfRVYsIHRvdWNoTW92ZSk7XG4gICAgICAkZWxlbWVudC5vZmYoRU5EX0VWLCB0b3VjaEVuZCk7XG5cbiAgICAgIC8vd2Ugb25seSBoYXZlIGxlYXZlIGV2ZW50cyBvbiBkZXNrdG9wLCB3ZSBtYW51YWxseSBjYWxjdWxhdGUgbGVhdmUgb24gdG91Y2ggYXMgaXRzIG5vdCBzdXBwb3J0ZWQgaW4gd2Via2l0XG4gICAgICBpZiAoTEVBVkVfRVYpIHtcbiAgICAgICAgJGVsZW1lbnQub2ZmKExFQVZFX0VWLCB0b3VjaExlYXZlKTtcbiAgICAgIH1cblxuICAgICAgc2V0VG91Y2hJblByb2dyZXNzKGZhbHNlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdGltZSBhbmQgZGlzdGFuY2UgdGhyZXNob2xkcyBoYXZlIGJlZW4gbWV0LCBhbmQgaWYgc28gdGhlbiB0aGUgYXBwcm9wcmlhdGUgaGFuZGxlcnMgYXJlIGZpcmVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5leHRQaGFzZShjdXJyZW50UGhhc2UpIHtcblxuICAgICAgdmFyIG5leHRQaGFzZSA9IGN1cnJlbnRQaGFzZTtcblxuICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgdmFsaWQgc3dpcGUgKHVuZGVyIHRpbWUgYW5kIG92ZXIgZGlzdGFuY2UgIGFuZCBjaGVjayBpZiB3ZSBhcmUgb3V0IG9mIGJvdW5kLi4uKVxuICAgICAgdmFyIHZhbGlkVGltZSA9IHZhbGlkYXRlU3dpcGVUaW1lKCk7XG4gICAgICB2YXIgdmFsaWREaXN0YW5jZSA9IHZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpO1xuICAgICAgdmFyIGRpZENhbmNlbCA9IGRpZFN3aXBlQmFja1RvQ2FuY2VsKCk7XG5cbiAgICAgIC8vSWYgd2UgaGF2ZSBleGNlZWRlZCBvdXIgdGltZSwgdGhlbiBjYW5jZWxcbiAgICAgIGlmICghdmFsaWRUaW1lIHx8IGRpZENhbmNlbCkge1xuICAgICAgICBuZXh0UGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICB9XG4gICAgICAvL0Vsc2UgaWYgd2UgYXJlIG1vdmluZywgYW5kIGhhdmUgcmVhY2hlZCBkaXN0YW5jZSB0aGVuIGVuZFxuICAgICAgZWxzZSBpZiAodmFsaWREaXN0YW5jZSAmJiBjdXJyZW50UGhhc2UgPT0gUEhBU0VfTU9WRSAmJiAoIW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQgfHwgb3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKSkge1xuICAgICAgICBuZXh0UGhhc2UgPSBQSEFTRV9FTkQ7XG4gICAgICB9XG4gICAgICAvL0Vsc2UgaWYgd2UgaGF2ZSBlbmRlZCBieSBsZWF2aW5nIGFuZCBkaWRuJ3QgcmVhY2ggZGlzdGFuY2UsIHRoZW4gY2FuY2VsXG4gICAgICBlbHNlIGlmICghdmFsaWREaXN0YW5jZSAmJiBjdXJyZW50UGhhc2UgPT0gUEhBU0VfRU5EICYmIG9wdGlvbnMudHJpZ2dlck9uVG91Y2hMZWF2ZSkge1xuICAgICAgICBuZXh0UGhhc2UgPSBQSEFTRV9DQU5DRUw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0UGhhc2U7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSByZWxldmFudCBldmVudCBoYW5kbGVyXG4gICAgICogVGhlIGhhbmRsZXJzIGFyZSBwYXNzZWQgdGhlIG9yaWdpbmFsIGV2ZW50LCB0aGUgZWxlbWVudCB0aGF0IHdhcyBzd2lwZWQsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aGUgY2F0Y2ggYWxsIGhhbmRsZXIsIHRoZSBkaXJlY3Rpb24gdGhhdCB3YXMgc3dpcGVkLCBcImxlZnRcIiwgXCJyaWdodFwiLCBcInVwXCIsIG9yIFwiZG93blwiXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGhhc2UgdGhlIHBoYXNlIG9mIHRoZSBzd2lwZSAoc3RhcnQsIGVuZCBjYW5jZWwgZXRjKSB7QGxpbmsgJC5mbi5zd2lwZS5waGFzZXN9XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpZ2dlckhhbmRsZXIoZXZlbnQsIHBoYXNlKSB7XG5cblxuXG4gICAgICB2YXIgcmV0LFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQudG91Y2hlcztcblxuICAgICAgLy8gU1dJUEUgR0VTVFVSRVNcbiAgICAgIGlmIChkaWRTd2lwZSgpIHx8IGhhc1N3aXBlcygpKSB7XG4gICAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgU1dJUEUpO1xuICAgICAgfVxuXG4gICAgICAvLyBQSU5DSCBHRVNUVVJFUyAoaWYgdGhlIGFib3ZlIGRpZG4ndCBjYW5jZWwpXG4gICAgICBpZiAoKGRpZFBpbmNoKCkgfHwgaGFzUGluY2hlcygpKSAmJiByZXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgUElOQ0gpO1xuICAgICAgfVxuXG4gICAgICAvLyBDTElDSyAvIFRBUCAoaWYgdGhlIGFib3ZlIGRpZG4ndCBjYW5jZWwpXG4gICAgICBpZiAoZGlkRG91YmxlVGFwKCkgJiYgcmV0ICE9PSBmYWxzZSkge1xuICAgICAgICAvL1RyaWdnZXIgdGhlIHRhcCBldmVudHMuLi5cbiAgICAgICAgcmV0ID0gdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LCBwaGFzZSwgRE9VQkxFX1RBUCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENMSUNLIC8gVEFQIChpZiB0aGUgYWJvdmUgZGlkbid0IGNhbmNlbClcbiAgICAgIGVsc2UgaWYgKGRpZExvbmdUYXAoKSAmJiByZXQgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vVHJpZ2dlciB0aGUgdGFwIGV2ZW50cy4uLlxuICAgICAgICByZXQgPSB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQsIHBoYXNlLCBMT05HX1RBUCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENMSUNLIC8gVEFQIChpZiB0aGUgYWJvdmUgZGlkbid0IGNhbmNlbClcbiAgICAgIGVsc2UgaWYgKGRpZFRhcCgpICYmIHJldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgLy9UcmlnZ2VyIHRoZSB0YXAgZXZlbnQuLlxuICAgICAgICByZXQgPSB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQsIHBoYXNlLCBUQVApO1xuICAgICAgfVxuXG5cblxuICAgICAgLy8gSWYgd2UgYXJlIGNhbmNlbGxpbmcgdGhlIGdlc3R1cmUsIHRoZW4gbWFudWFsbHkgdHJpZ2dlciB0aGUgcmVzZXQgaGFuZGxlclxuICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9DQU5DRUwpIHtcblxuICAgICAgICB0b3VjaENhbmNlbChldmVudCk7XG4gICAgICB9XG5cblxuXG5cbiAgICAgIC8vIElmIHdlIGFyZSBlbmRpbmcgdGhlIGdlc3R1cmUsIHRoZW4gbWFudWFsbHkgdHJpZ2dlciB0aGUgcmVzZXQgaGFuZGxlciBJRiBhbGwgZmluZ2VycyBhcmUgb2ZmXG4gICAgICBpZiAocGhhc2UgPT09IFBIQVNFX0VORCkge1xuICAgICAgICAvL0lmIHdlIHN1cHBvcnQgdG91Y2gsIHRoZW4gY2hlY2sgdGhhdCBhbGwgZmluZ2VycyBhcmUgb2ZmIGJlZm9yZSB3ZSBjYW5jZWxcbiAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICBpZiAoIXRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0b3VjaENhbmNlbChldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvdWNoQ2FuY2VsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSByZWxldmFudCBldmVudCBoYW5kbGVyXG4gICAgICogVGhlIGhhbmRsZXJzIGFyZSBwYXNzZWQgdGhlIG9yaWdpbmFsIGV2ZW50LCB0aGUgZWxlbWVudCB0aGF0IHdhcyBzd2lwZWQsIGFuZCBpbiB0aGUgY2FzZSBvZiB0aGUgY2F0Y2ggYWxsIGhhbmRsZXIsIHRoZSBkaXJlY3Rpb24gdGhhdCB3YXMgc3dpcGVkLCBcImxlZnRcIiwgXCJyaWdodFwiLCBcInVwXCIsIG9yIFwiZG93blwiXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGhhc2UgdGhlIHBoYXNlIG9mIHRoZSBzd2lwZSAoc3RhcnQsIGVuZCBjYW5jZWwgZXRjKSB7QGxpbmsgJC5mbi5zd2lwZS5waGFzZXN9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGdlc3R1cmUgdGhlIGdlc3R1cmUgdG8gdHJpZ2dlciBhIGhhbmRsZXIgZm9yIDogUElOQ0ggb3IgU1dJUEUge0BsaW5rICQuZm4uc3dpcGUuZ2VzdHVyZXN9XG4gICAgICogQHJldHVybiBCb29sZWFuIEZhbHNlLCB0byBpbmRpY2F0ZSB0aGF0IHRoZSBldmVudCBzaG91bGQgc3RvcCBwcm9wYWdhdGlvbiwgb3Igdm9pZC5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmlnZ2VySGFuZGxlckZvckdlc3R1cmUoZXZlbnQsIHBoYXNlLCBnZXN0dXJlKSB7XG5cbiAgICAgIHZhciByZXQ7XG5cbiAgICAgIC8vU1dJUEVTLi4uLlxuICAgICAgaWYgKGdlc3R1cmUgPT0gU1dJUEUpIHtcbiAgICAgICAgLy9UcmlnZ2VyIHN0YXR1cyBldmVyeSB0aW1lLi5cbiAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGVTdGF0dXMnLCBbcGhhc2UsIGRpcmVjdGlvbiB8fCBudWxsLCBkaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnN3aXBlU3RhdHVzKSB7XG4gICAgICAgICAgcmV0ID0gb3B0aW9ucy5zd2lwZVN0YXR1cy5jYWxsKCRlbGVtZW50LCBldmVudCwgcGhhc2UsIGRpcmVjdGlvbiB8fCBudWxsLCBkaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgLy9JZiB0aGUgc3RhdHVzIGNhbmNlbHMsIHRoZW4gZG9udCBydW4gdGhlIHN1YnNlcXVlbnQgZXZlbnQgaGFuZGxlcnMuLlxuICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGhhc2UgPT0gUEhBU0VfRU5EICYmIHZhbGlkYXRlU3dpcGUoKSkge1xuXG4gICAgICAgICAgLy9DYW5jZWwgYW55IHRhcHMgdGhhdCB3ZXJlIGluIHByb2dyZXNzLi4uXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG5cbiAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZScsIFtkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb25dKTtcblxuICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlKSB7XG4gICAgICAgICAgICByZXQgPSBvcHRpb25zLnN3aXBlLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgLy9JZiB0aGUgc3RhdHVzIGNhbmNlbHMsIHRoZW4gZG9udCBydW4gdGhlIHN1YnNlcXVlbnQgZXZlbnQgaGFuZGxlcnMuLlxuICAgICAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL3RyaWdnZXIgZGlyZWN0aW9uIHNwZWNpZmljIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgTEVGVDpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcignc3dpcGVMZWZ0JywgW2RpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlTGVmdCkge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuc3dpcGVMZWZ0LmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQsIGZpbmdlckRhdGEsIGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFJJR0hUOlxuICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZVJpZ2h0JywgW2RpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbl0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnN3aXBlUmlnaHQpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnN3aXBlUmlnaHQuY2FsbCgkZWxlbWVudCwgZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgVVA6XG4gICAgICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ3N3aXBlVXAnLCBbZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3dpcGVVcCkge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuc3dpcGVVcC5jYWxsKCRlbGVtZW50LCBldmVudCwgZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBET1dOOlxuICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdzd2lwZURvd24nLCBbZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhLCBjdXJyZW50RGlyZWN0aW9uXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3dpcGVEb3duKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5zd2lwZURvd24uY2FsbCgkZWxlbWVudCwgZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCwgZmluZ2VyRGF0YSwgY3VycmVudERpcmVjdGlvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy9QSU5DSEVTLi4uLlxuICAgICAgaWYgKGdlc3R1cmUgPT0gUElOQ0gpIHtcbiAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigncGluY2hTdGF0dXMnLCBbcGhhc2UsIHBpbmNoRGlyZWN0aW9uIHx8IG51bGwsIHBpbmNoRGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIHBpbmNoWm9vbSwgZmluZ2VyRGF0YV0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnBpbmNoU3RhdHVzKSB7XG4gICAgICAgICAgcmV0ID0gb3B0aW9ucy5waW5jaFN0YXR1cy5jYWxsKCRlbGVtZW50LCBldmVudCwgcGhhc2UsIHBpbmNoRGlyZWN0aW9uIHx8IG51bGwsIHBpbmNoRGlzdGFuY2UgfHwgMCwgZHVyYXRpb24gfHwgMCwgZmluZ2VyQ291bnQsIHBpbmNoWm9vbSwgZmluZ2VyRGF0YSk7XG4gICAgICAgICAgLy9JZiB0aGUgc3RhdHVzIGNhbmNlbHMsIHRoZW4gZG9udCBydW4gdGhlIHN1YnNlcXVlbnQgZXZlbnQgaGFuZGxlcnMuLlxuICAgICAgICAgIGlmIChyZXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGhhc2UgPT0gUEhBU0VfRU5EICYmIHZhbGlkYXRlUGluY2goKSkge1xuXG4gICAgICAgICAgc3dpdGNoIChwaW5jaERpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBJTjpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigncGluY2hJbicsIFtwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGFdKTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5waW5jaEluKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5waW5jaEluLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIE9VVDpcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigncGluY2hPdXQnLCBbcGluY2hEaXJlY3Rpb24gfHwgbnVsbCwgcGluY2hEaXN0YW5jZSB8fCAwLCBkdXJhdGlvbiB8fCAwLCBmaW5nZXJDb3VudCwgcGluY2hab29tLCBmaW5nZXJEYXRhXSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGluY2hPdXQpIHtcbiAgICAgICAgICAgICAgICByZXQgPSBvcHRpb25zLnBpbmNoT3V0LmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBwaW5jaERpcmVjdGlvbiB8fCBudWxsLCBwaW5jaERpc3RhbmNlIHx8IDAsIGR1cmF0aW9uIHx8IDAsIGZpbmdlckNvdW50LCBwaW5jaFpvb20sIGZpbmdlckRhdGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ2VzdHVyZSA9PSBUQVApIHtcbiAgICAgICAgaWYgKHBoYXNlID09PSBQSEFTRV9DQU5DRUwgfHwgcGhhc2UgPT09IFBIQVNFX0VORCkge1xuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG5cbiAgICAgICAgICAvL0lmIHdlIGFyZSBhbHNvIGxvb2tpbmcgZm9yIGRvdWJlbFRhcHMsIHdhaXQgaW5jYXNlIHRoaXMgaXMgb25lLi4uXG4gICAgICAgICAgaWYgKGhhc0RvdWJsZVRhcCgpICYmICFpbkRvdWJsZVRhcCgpKSB7XG4gICAgICAgICAgICBkb3VibGVUYXBTdGFydFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcblxuICAgICAgICAgICAgLy9Ob3cgd2FpdCBmb3IgdGhlIGRvdWJsZSB0YXAgdGltZW91dCwgYW5kIHRyaWdnZXIgdGhpcyBzaW5nbGUgdGFwXG4gICAgICAgICAgICAvL2lmIGl0cyBub3QgY2FuY2VsbGVkIGJ5IGEgZG91YmxlIHRhcFxuICAgICAgICAgICAgc2luZ2xlVGFwVGltZW91dCA9IHNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcigndGFwJywgW2V2ZW50LnRhcmdldF0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnRhcCkge1xuICAgICAgICAgICAgICAgIHJldCA9IG9wdGlvbnMudGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSwgb3B0aW9ucy5kb3VibGVUYXBUaHJlc2hvbGQpO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdWJsZVRhcFN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCd0YXAnLCBbZXZlbnQudGFyZ2V0XSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy50YXApIHtcbiAgICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy50YXAuY2FsbCgkZWxlbWVudCwgZXZlbnQsIGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdlc3R1cmUgPT0gRE9VQkxFX1RBUCkge1xuICAgICAgICBpZiAocGhhc2UgPT09IFBIQVNFX0NBTkNFTCB8fCBwaGFzZSA9PT0gUEhBU0VfRU5EKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChob2xkVGltZW91dCk7XG4gICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKCdkb3VibGV0YXAnLCBbZXZlbnQudGFyZ2V0XSk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5kb3VibGVUYXApIHtcbiAgICAgICAgICAgIHJldCA9IG9wdGlvbnMuZG91YmxlVGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnZXN0dXJlID09IExPTkdfVEFQKSB7XG4gICAgICAgIGlmIChwaGFzZSA9PT0gUEhBU0VfQ0FOQ0VMIHx8IHBoYXNlID09PSBQSEFTRV9FTkQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc2luZ2xlVGFwVGltZW91dCk7XG4gICAgICAgICAgZG91YmxlVGFwU3RhcnRUaW1lID0gbnVsbDtcblxuICAgICAgICAgICRlbGVtZW50LnRyaWdnZXIoJ2xvbmd0YXAnLCBbZXZlbnQudGFyZ2V0XSk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMubG9uZ1RhcCkge1xuICAgICAgICAgICAgcmV0ID0gb3B0aW9ucy5sb25nVGFwLmNhbGwoJGVsZW1lbnQsIGV2ZW50LCBldmVudC50YXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuXG4gICAgLy9cbiAgICAvLyBHRVNUVVJFIFZBTElEQVRJT05cbiAgICAvL1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSB1c2VyIGhhcyBzd2lwZSBmYXIgZW5vdWdoXG4gICAgICogQHJldHVybiBCb29sZWFuIGlmIDxjb2RlPnRocmVzaG9sZDwvY29kZT4gaGFzIGJlZW4gc2V0LCByZXR1cm4gdHJ1ZSBpZiB0aGUgdGhyZXNob2xkIHdhcyBtZXQsIGVsc2UgZmFsc2UuXG4gICAgICogSWYgbm8gdGhyZXNob2xkIHdhcyBzZXQsIHRoZW4gd2UgcmV0dXJuIHRydWUuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTd2lwZURpc3RhbmNlKCkge1xuICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgICAgIC8vSWYgd2UgbWFkZSBpdCBwYXN0IHRoZSBtaW4gc3dpcGUgZGlzdGFuY2UuLlxuICAgICAgaWYgKG9wdGlvbnMudGhyZXNob2xkICE9PSBudWxsKSB7XG4gICAgICAgIHZhbGlkID0gZGlzdGFuY2UgPj0gb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIHVzZXIgaGFzIHN3aXBlZCBiYWNrIHRvIGNhbmNlbC5cbiAgICAgKiBAcmV0dXJuIEJvb2xlYW4gaWYgPGNvZGU+Y2FuY2VsVGhyZXNob2xkPC9jb2RlPiBoYXMgYmVlbiBzZXQsIHJldHVybiB0cnVlIGlmIHRoZSBjYW5jZWxUaHJlc2hvbGQgd2FzIG1ldCwgZWxzZSBmYWxzZS5cbiAgICAgKiBJZiBubyBjYW5jZWxUaHJlc2hvbGQgd2FzIHNldCwgdGhlbiB3ZSByZXR1cm4gdHJ1ZS5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaWRTd2lwZUJhY2tUb0NhbmNlbCgpIHtcbiAgICAgIHZhciBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgIGlmIChvcHRpb25zLmNhbmNlbFRocmVzaG9sZCAhPT0gbnVsbCAmJiBkaXJlY3Rpb24gIT09IG51bGwpIHtcbiAgICAgICAgY2FuY2VsbGVkID0gKGdldE1heERpc3RhbmNlKGRpcmVjdGlvbikgLSBkaXN0YW5jZSkgPj0gb3B0aW9ucy5jYW5jZWxUaHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYW5jZWxsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSB1c2VyIGhhcyBwaW5jaGVkIGZhciBlbm91Z2hcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW4gaWYgPGNvZGU+cGluY2hUaHJlc2hvbGQ8L2NvZGU+IGhhcyBiZWVuIHNldCwgcmV0dXJuIHRydWUgaWYgdGhlIHRocmVzaG9sZCB3YXMgbWV0LCBlbHNlIGZhbHNlLlxuICAgICAqIElmIG5vIHRocmVzaG9sZCB3YXMgc2V0LCB0aGVuIHdlIHJldHVybiB0cnVlLlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGluY2hEaXN0YW5jZSgpIHtcbiAgICAgIGlmIChvcHRpb25zLnBpbmNoVGhyZXNob2xkICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwaW5jaERpc3RhbmNlID49IG9wdGlvbnMucGluY2hUaHJlc2hvbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhhdCB0aGUgdGltZSB0YWtlbiB0byBzd2lwZSBtZWV0cyB0aGUgbWluaW11bSAvIG1heGltdW0gcmVxdWlyZW1lbnRzXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTd2lwZVRpbWUoKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgLy9JZiBubyB0aW1lIHNldCwgdGhlbiByZXR1cm4gdHJ1ZVxuICAgICAgaWYgKG9wdGlvbnMubWF4VGltZVRocmVzaG9sZCkge1xuICAgICAgICBpZiAoZHVyYXRpb24gPj0gb3B0aW9ucy5tYXhUaW1lVGhyZXNob2xkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlIGFuZCB0aGUgdmFsdWUgYWxsb3dQYWdlU2Nyb2xsIHRvIHNlZSBpZiB3ZSBzaG91bGQgYWxsb3cgb3IgcHJldmVudCB0aGUgZGVmYXVsdCBiZWhhdmlvdXIgZnJvbSBvY2N1cnJpbmcuXG4gICAgICogVGhpcyB3aWxsIGVzc2VudGlhbGx5IGFsbG93IHBhZ2Ugc2Nyb2xsaW5nIG9yIG5vdCB3aGVuIHRoZSB1c2VyIGlzIHN3aXBpbmcgb24gYSB0b3VjaFN3aXBlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0ganFFdmVudCBUaGUgbm9ybWFsaXNlZCBqUXVlcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGV2ZW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICAgKiBAc2VlICQuZm4uc3dpcGUuZGlyZWN0aW9uc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRGVmYXVsdEV2ZW50KGpxRXZlbnQsIGRpcmVjdGlvbikge1xuXG4gICAgICAvL0lmIHRoZSBvcHRpb24gaXMgc2V0LCBhbGx3YXlzIGFsbG93IHRoZSBldmVudCB0byBidWJibGUgdXAgKGxldCB1c2VyIGhhbmRsZSB3ZWlyZG5lc3MpXG4gICAgICBpZiAob3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV2ZW50cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgPT09IE5PTkUpIHtcbiAgICAgICAganFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGF1dG8gPSBvcHRpb25zLmFsbG93UGFnZVNjcm9sbCA9PT0gQVVUTztcblxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgIGNhc2UgTEVGVDpcbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5zd2lwZUxlZnQgJiYgYXV0bykgfHwgKCFhdXRvICYmIG9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsICE9IEhPUklaT05UQUwpKSB7XG4gICAgICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBSSUdIVDpcbiAgICAgICAgICAgIGlmICgob3B0aW9ucy5zd2lwZVJpZ2h0ICYmIGF1dG8pIHx8ICghYXV0byAmJiBvcHRpb25zLmFsbG93UGFnZVNjcm9sbCAhPSBIT1JJWk9OVEFMKSkge1xuICAgICAgICAgICAgICBqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgVVA6XG4gICAgICAgICAgICBpZiAoKG9wdGlvbnMuc3dpcGVVcCAmJiBhdXRvKSB8fCAoIWF1dG8gJiYgb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgIT0gVkVSVElDQUwpKSB7XG4gICAgICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBET1dOOlxuICAgICAgICAgICAgaWYgKChvcHRpb25zLnN3aXBlRG93biAmJiBhdXRvKSB8fCAoIWF1dG8gJiYgb3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGwgIT0gVkVSVElDQUwpKSB7XG4gICAgICAgICAgICAgIGpxRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBOT05FOlxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gUElOQ0hFU1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBvZiB0aGUgY3VycmVudCBwaW5jaCBtZWV0cyB0aGUgdGhyZXNob2xkc1xuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGluY2goKSB7XG4gICAgICB2YXIgaGFzQ29ycmVjdEZpbmdlckNvdW50ID0gdmFsaWRhdGVGaW5nZXJzKCk7XG4gICAgICB2YXIgaGFzRW5kUG9pbnQgPSB2YWxpZGF0ZUVuZFBvaW50KCk7XG4gICAgICB2YXIgaGFzQ29ycmVjdERpc3RhbmNlID0gdmFsaWRhdGVQaW5jaERpc3RhbmNlKCk7XG4gICAgICByZXR1cm4gaGFzQ29ycmVjdEZpbmdlckNvdW50ICYmIGhhc0VuZFBvaW50ICYmIGhhc0NvcnJlY3REaXN0YW5jZTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbnkgUGluY2ggZXZlbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGluY2hlcygpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLnBpbmNoU3RhdHVzIHx8IG9wdGlvbnMucGluY2hJbiB8fCBvcHRpb25zLnBpbmNoT3V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGRldGVjdGluZyBwaW5jaGVzLCBhbmQgaGF2ZSBvbmVcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaWRQaW5jaCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhISh2YWxpZGF0ZVBpbmNoKCkgJiYgaGFzUGluY2hlcygpKTtcbiAgICB9XG5cblxuXG5cbiAgICAvLyBTV0lQRVNcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgc3dpcGUgbWVldHMgdGhlIHRocmVzaG9sZHNcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVN3aXBlKCkge1xuICAgICAgLy9DaGVjayB2YWxpZGl0eSBvZiBzd2lwZVxuICAgICAgdmFyIGhhc1ZhbGlkVGltZSA9IHZhbGlkYXRlU3dpcGVUaW1lKCk7XG4gICAgICB2YXIgaGFzVmFsaWREaXN0YW5jZSA9IHZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpO1xuICAgICAgdmFyIGhhc0NvcnJlY3RGaW5nZXJDb3VudCA9IHZhbGlkYXRlRmluZ2VycygpO1xuICAgICAgdmFyIGhhc0VuZFBvaW50ID0gdmFsaWRhdGVFbmRQb2ludCgpO1xuICAgICAgdmFyIGRpZENhbmNlbCA9IGRpZFN3aXBlQmFja1RvQ2FuY2VsKCk7XG5cbiAgICAgIC8vIGlmIHRoZSB1c2VyIHN3aXBlZCBtb3JlIHRoYW4gdGhlIG1pbmltdW0gbGVuZ3RoLCBwZXJmb3JtIHRoZSBhcHByb3ByaWF0ZSBhY3Rpb25cbiAgICAgIC8vIGhhc1ZhbGlkRGlzdGFuY2UgaXMgbnVsbCB3aGVuIG5vIGRpc3RhbmNlIGlzIHNldFxuICAgICAgdmFyIHZhbGlkID0gIWRpZENhbmNlbCAmJiBoYXNFbmRQb2ludCAmJiBoYXNDb3JyZWN0RmluZ2VyQ291bnQgJiYgaGFzVmFsaWREaXN0YW5jZSAmJiBoYXNWYWxpZFRpbWU7XG5cbiAgICAgIHJldHVybiB2YWxpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgYW55IFN3aXBlIGV2ZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1N3aXBlcygpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLnN3aXBlIHx8IG9wdGlvbnMuc3dpcGVTdGF0dXMgfHwgb3B0aW9ucy5zd2lwZUxlZnQgfHwgb3B0aW9ucy5zd2lwZVJpZ2h0IHx8IG9wdGlvbnMuc3dpcGVVcCB8fCBvcHRpb25zLnN3aXBlRG93bik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGRldGVjdGluZyBzd2lwZXMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkU3dpcGUoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEodmFsaWRhdGVTd2lwZSgpICYmIGhhc1N3aXBlcygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBtYXRjaGVkIHRoZSBudW1iZXIgb2YgZmluZ2VycyB3ZSBhcmUgbG9va2luZyBmb3JcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUZpbmdlcnMoKSB7XG4gICAgICAvL1RoZSBudW1iZXIgb2YgZmluZ2VycyB3ZSB3YW50IHdlcmUgbWF0Y2hlZCwgb3Igb24gZGVza3RvcCB3ZSBpZ25vcmVcbiAgICAgIHJldHVybiAoKGZpbmdlckNvdW50ID09PSBvcHRpb25zLmZpbmdlcnMgfHwgb3B0aW9ucy5maW5nZXJzID09PSBBTExfRklOR0VSUykgfHwgIVNVUFBPUlRTX1RPVUNIKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBhbiBlbmQgcG9pbnQgZm9yIHRoZSBzd2lwZVxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRW5kUG9pbnQoKSB7XG4gICAgICAvL1dlIGhhdmUgYW4gZW5kIHZhbHVlIGZvciB0aGUgZmluZ2VyXG4gICAgICByZXR1cm4gZmluZ2VyRGF0YVswXS5lbmQueCAhPT0gMDtcbiAgICB9XG5cbiAgICAvLyBUQVAgLyBDTElDS1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhIGNsaWNrIC8gdGFwIGV2ZW50cyBoYXZlIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1RhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLnRhcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGEgZG91YmxlIHRhcCBldmVudHMgaGF2ZSBiZWVuIHJlZ2lzdGVyZWRcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNEb3VibGVUYXAoKSB7XG4gICAgICAvL0VudXJlIHdlIGRvbnQgcmV0dXJuIDAgb3IgbnVsbCBmb3IgZmFsc2UgdmFsdWVzXG4gICAgICByZXR1cm4gISEob3B0aW9ucy5kb3VibGVUYXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbnkgbG9uZyB0YXAgZXZlbnRzIGhhdmUgYmVlbiByZWdpc3RlcmVkXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzTG9uZ1RhcCgpIHtcbiAgICAgIC8vRW51cmUgd2UgZG9udCByZXR1cm4gMCBvciBudWxsIGZvciBmYWxzZSB2YWx1ZXNcbiAgICAgIHJldHVybiAhIShvcHRpb25zLmxvbmdUYXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBjb3VsZCBiZSBpbiB0aGUgcHJvY2VzcyBvZiBhIGRvdWJsZSB0YXAgKG9uZSB0YXAgaGFzIG9jY3VycmVkLCB3ZSBhcmUgbGlzdGVuaW5nIGZvciBkb3VibGUgdGFwcywgYW5kIHRoZSB0aHJlc2hvbGQgaGFzbid0IHBhc3QuXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVEb3VibGVUYXAoKSB7XG4gICAgICBpZiAoZG91YmxlVGFwU3RhcnRUaW1lID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIG5vdyA9IGdldFRpbWVTdGFtcCgpO1xuICAgICAgcmV0dXJuIChoYXNEb3VibGVUYXAoKSAmJiAoKG5vdyAtIGRvdWJsZVRhcFN0YXJ0VGltZSkgPD0gb3B0aW9ucy5kb3VibGVUYXBUaHJlc2hvbGQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgY291bGQgYmUgaW4gdGhlIHByb2Nlc3Mgb2YgYSBkb3VibGUgdGFwIChvbmUgdGFwIGhhcyBvY2N1cnJlZCwgd2UgYXJlIGxpc3RlbmluZyBmb3IgZG91YmxlIHRhcHMsIGFuZCB0aGUgdGhyZXNob2xkIGhhc24ndCBwYXN0LlxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluRG91YmxlVGFwKCkge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlRG91YmxlVGFwKCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBhIHZhbGlkIHRhcFxuICAgICAqIEByZXR1cm4gQm9vbGVhblxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlVGFwKCkge1xuICAgICAgcmV0dXJuICgoZmluZ2VyQ291bnQgPT09IDEgfHwgIVNVUFBPUlRTX1RPVUNIKSAmJiAoaXNOYU4oZGlzdGFuY2UpIHx8IGRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgd2UgaGF2ZSBhIHZhbGlkIGxvbmcgdGFwXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVMb25nVGFwKCkge1xuICAgICAgLy9zbGlnaHQgdGhyZXNob2xkIG9uIG1vdmluZyBmaW5nZXJcbiAgICAgIHJldHVybiAoKGR1cmF0aW9uID4gb3B0aW9ucy5sb25nVGFwVGhyZXNob2xkKSAmJiAoZGlzdGFuY2UgPCBET1VCTEVfVEFQX1RIUkVTSE9MRCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgZGV0ZWN0aW5nIHRhcHMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlVGFwKCkgJiYgaGFzVGFwKCkpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBkZXRlY3RpbmcgZG91YmxlIHRhcHMgYW5kIGhhdmUgb25lXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkRG91YmxlVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlRG91YmxlVGFwKCkgJiYgaGFzRG91YmxlVGFwKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgZGV0ZWN0aW5nIGxvbmcgdGFwcyBhbmQgaGF2ZSBvbmVcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaWRMb25nVGFwKCkge1xuICAgICAgLy9FbnVyZSB3ZSBkb250IHJldHVybiAwIG9yIG51bGwgZm9yIGZhbHNlIHZhbHVlc1xuICAgICAgcmV0dXJuICEhKHZhbGlkYXRlTG9uZ1RhcCgpICYmIGhhc0xvbmdUYXAoKSk7XG4gICAgfVxuXG5cblxuXG4gICAgLy8gTVVMVEkgRklOR0VSIFRPVUNIXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRyYWNraW5nIHRoZSB0aW1lIGJldHdlZW4gMiBmaW5nZXIgcmVsZWFzZXMsIGFuZCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSBmaW5nZXJzIHdlIGluaXRpYWxseSBoYWQgdXBcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydE11bHRpRmluZ2VyUmVsZWFzZShldmVudCkge1xuICAgICAgcHJldmlvdXNUb3VjaEVuZFRpbWUgPSBnZXRUaW1lU3RhbXAoKTtcbiAgICAgIGZpbmdlckNvdW50QXRSZWxlYXNlID0gZXZlbnQudG91Y2hlcy5sZW5ndGggKyAxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgdGhlIHRyYWNraW5nIG9mIHRpbWUgYmV0d2VlbiAyIGZpbmdlciByZWxlYXNlcywgYW5kIHJlc2V0cyBjb3VudGVyc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbmNlbE11bHRpRmluZ2VyUmVsZWFzZSgpIHtcbiAgICAgIHByZXZpb3VzVG91Y2hFbmRUaW1lID0gMDtcbiAgICAgIGZpbmdlckNvdW50QXRSZWxlYXNlID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgd2UgYXJlIGluIHRoZSB0aHJlc2hvbGQgYmV0d2VlbiAyIGZpbmdlcnMgYmVpbmcgcmVsZWFzZWRcbiAgICAgKiBAcmV0dXJuIEJvb2xlYW5cbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbk11bHRpRmluZ2VyUmVsZWFzZSgpIHtcblxuICAgICAgdmFyIHdpdGhpblRocmVzaG9sZCA9IGZhbHNlO1xuXG4gICAgICBpZiAocHJldmlvdXNUb3VjaEVuZFRpbWUpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBnZXRUaW1lU3RhbXAoKSAtIHByZXZpb3VzVG91Y2hFbmRUaW1lXG4gICAgICAgIGlmIChkaWZmIDw9IG9wdGlvbnMuZmluZ2VyUmVsZWFzZVRocmVzaG9sZCkge1xuICAgICAgICAgIHdpdGhpblRocmVzaG9sZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpdGhpblRocmVzaG9sZDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIGdldHMgYSBkYXRhIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCBhIHRvdWNoIGlzIGluIHByb2dyZXNzXG4gICAgICogQHJldHVybiBCb29sZWFuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VG91Y2hJblByb2dyZXNzKCkge1xuICAgICAgLy9zdHJpY3QgZXF1YWxpdHkgdG8gZW5zdXJlIG9ubHkgdHJ1ZSBhbmQgZmFsc2UgYXJlIHJldHVybmVkXG4gICAgICByZXR1cm4gISEoJGVsZW1lbnQuZGF0YShQTFVHSU5fTlMgKyAnX2ludG91Y2gnKSA9PT0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIGRhdGEgZmxhZyB0byBpbmRpY2F0ZSB0aGF0IGEgdG91Y2ggaXMgaW4gcHJvZ3Jlc3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbCBUaGUgdmFsdWUgdG8gc2V0IHRoZSBwcm9wZXJ0eSB0b1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFRvdWNoSW5Qcm9ncmVzcyh2YWwpIHtcblxuICAgICAgLy9JZiBkZXN0cm95IGlzIGNhbGxlZCBpbiBhbiBldmVudCBoYW5kbGVyLCB3ZSBoYXZlIG5vIGVsLCBhbmQgd2UgaGF2ZSBhbHJlYWR5IGNsZWFuZWQgdXAsIHNvIHJldHVybi5cbiAgICAgIGlmKCEkZWxlbWVudCkgeyByZXR1cm47IH1cblxuICAgICAgLy9BZGQgb3IgcmVtb3ZlIGV2ZW50IGxpc3RlbmVycyBkZXBlbmRpbmcgb24gdG91Y2ggc3RhdHVzXG4gICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgICRlbGVtZW50Lm9uKE1PVkVfRVYsIHRvdWNoTW92ZSk7XG4gICAgICAgICRlbGVtZW50Lm9uKEVORF9FViwgdG91Y2hFbmQpO1xuXG4gICAgICAgIC8vd2Ugb25seSBoYXZlIGxlYXZlIGV2ZW50cyBvbiBkZXNrdG9wLCB3ZSBtYW51YWxseSBjYWxjdWF0ZSBsZWF2ZSBvbiB0b3VjaCBhcyBpdHMgbm90IHN1cHBvcnRlZCBpbiB3ZWJraXRcbiAgICAgICAgaWYgKExFQVZFX0VWKSB7XG4gICAgICAgICAgJGVsZW1lbnQub24oTEVBVkVfRVYsIHRvdWNoTGVhdmUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgICRlbGVtZW50Lm9mZihNT1ZFX0VWLCB0b3VjaE1vdmUsIGZhbHNlKTtcbiAgICAgICAgJGVsZW1lbnQub2ZmKEVORF9FViwgdG91Y2hFbmQsIGZhbHNlKTtcblxuICAgICAgICAvL3dlIG9ubHkgaGF2ZSBsZWF2ZSBldmVudHMgb24gZGVza3RvcCwgd2UgbWFudWFsbHkgY2FsY3VhdGUgbGVhdmUgb24gdG91Y2ggYXMgaXRzIG5vdCBzdXBwb3J0ZWQgaW4gd2Via2l0XG4gICAgICAgIGlmIChMRUFWRV9FVikge1xuICAgICAgICAgICRlbGVtZW50Lm9mZihMRUFWRV9FViwgdG91Y2hMZWF2ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy9zdHJpY3QgZXF1YWxpdHkgdG8gZW5zdXJlIG9ubHkgdHJ1ZSBhbmQgZmFsc2UgY2FuIHVwZGF0ZSB0aGUgdmFsdWVcbiAgICAgICRlbGVtZW50LmRhdGEoUExVR0lOX05TICsgJ19pbnRvdWNoJywgdmFsID09PSB0cnVlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGZpbmdlciBkYXRhIGZvciB0aGUgdG91Y2gvZmluZ2VyIGluIHRoZSBldmVudCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtpbnR9IGlkIFRoZSBpZCB0byBzdG9yZSB0aGUgZmluZ2VyIGRhdGEgdW5kZXIgKHVzdWFsbHkgdGhlIG9yZGVyIHRoZSBmaW5nZXJzIHdlcmUgcHJlc3NlZClcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZXZ0IFRoZSBldmVudCBvYmplY3QgY29udGFpbmluZyBmaW5nZXIgZGF0YVxuICAgICAqIEByZXR1cm4gZmluZ2VyIGRhdGEgb2JqZWN0XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZ2VyRGF0YShpZCwgZXZ0KSB7XG4gICAgICB2YXIgZiA9IHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgbGFzdDoge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogMFxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGYuc3RhcnQueCA9IGYubGFzdC54ID0gZi5lbmQueCA9IGV2dC5wYWdlWCB8fCBldnQuY2xpZW50WDtcbiAgICAgIGYuc3RhcnQueSA9IGYubGFzdC55ID0gZi5lbmQueSA9IGV2dC5wYWdlWSB8fCBldnQuY2xpZW50WTtcbiAgICAgIGZpbmdlckRhdGFbaWRdID0gZjtcbiAgICAgIHJldHVybiBmO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGZpbmdlciBkYXRhIGZvciBhIHBhcnRpY3VsYXIgZXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGV2dCBUaGUgZXZlbnQgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHRvdWNoL2ZpbmdlciBkYXRhIHRvIHVwYWR0ZVxuICAgICAqIEByZXR1cm4gYSBmaW5nZXIgZGF0YSBvYmplY3QuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlRmluZ2VyRGF0YShldnQpIHtcbiAgICAgIHZhciBpZCA9IGV2dC5pZGVudGlmaWVyICE9PSB1bmRlZmluZWQgPyBldnQuaWRlbnRpZmllciA6IDA7XG4gICAgICB2YXIgZiA9IGdldEZpbmdlckRhdGEoaWQpO1xuXG4gICAgICBpZiAoZiA9PT0gbnVsbCkge1xuICAgICAgICBmID0gY3JlYXRlRmluZ2VyRGF0YShpZCwgZXZ0KTtcbiAgICAgIH1cblxuICAgICAgZi5sYXN0LnggPSBmLmVuZC54O1xuICAgICAgZi5sYXN0LnkgPSBmLmVuZC55O1xuXG4gICAgICBmLmVuZC54ID0gZXZ0LnBhZ2VYIHx8IGV2dC5jbGllbnRYO1xuICAgICAgZi5lbmQueSA9IGV2dC5wYWdlWSB8fCBldnQuY2xpZW50WTtcblxuICAgICAgcmV0dXJuIGY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZpbmdlciBkYXRhIG9iamVjdCBieSBpdHMgZXZlbnQgSUQuXG4gICAgICogRWFjaCB0b3VjaCBldmVudCBoYXMgYW4gaWRlbnRpZmllciBwcm9wZXJ0eSwgd2hpY2ggaXMgdXNlZFxuICAgICAqIHRvIHRyYWNrIHJlcGVhdCB0b3VjaGVzXG4gICAgICogQHBhcmFtIHtpbnR9IGlkIFRoZSB1bmlxdWUgaWQgb2YgdGhlIGZpbmdlciBpbiB0aGUgc2VxdWVuY2Ugb2YgdG91Y2ggZXZlbnRzLlxuICAgICAqIEByZXR1cm4gYSBmaW5nZXIgZGF0YSBvYmplY3QuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RmluZ2VyRGF0YShpZCkge1xuICAgICAgcmV0dXJuIGZpbmdlckRhdGFbaWRdIHx8IG51bGw7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXhpbXVtIGRpc3RhbmNlIHN3aXBlZCBpbiB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxuICAgICAqIElmIHRoZSBuZXcgdmFsdWUgaXMgbG93ZXIgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSwgdGhlIG1heCB2YWx1ZSBpcyBub3QgY2hhbmdlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZVxuICAgICAqIEBwYXJhbSB7aW50fSAgZGlzdGFuY2UgVGhlIGRpc3RhbmNlIG9mIHRoZSBzd2lwZVxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldE1heERpc3RhbmNlKGRpcmVjdGlvbiwgZGlzdGFuY2UpIHtcbiAgICAgIGlmKGRpcmVjdGlvbj09Tk9ORSkgcmV0dXJuO1xuICAgICAgZGlzdGFuY2UgPSBNYXRoLm1heChkaXN0YW5jZSwgZ2V0TWF4RGlzdGFuY2UoZGlyZWN0aW9uKSk7XG4gICAgICBtYXhpbXVtc01hcFtkaXJlY3Rpb25dLmRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0cyB0aGUgbWF4aW11bSBkaXN0YW5jZSBzd2lwZWQgaW4gdGhlIGdpdmVuIGRpcmVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gIGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIG9mIHRoZSBzd2lwZVxuICAgICAqIEByZXR1cm4gaW50ICBUaGUgZGlzdGFuY2Ugb2YgdGhlIHN3aXBlXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF4RGlzdGFuY2UoZGlyZWN0aW9uKSB7XG4gICAgICBpZiAobWF4aW11bXNNYXBbZGlyZWN0aW9uXSkgcmV0dXJuIG1heGltdW1zTWFwW2RpcmVjdGlvbl0uZGlzdGFuY2U7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0cyBhIG1hcCBvZiBkaXJlY3Rpb25zIHRvIG1heGltdW0gc3dpcGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJuIE9iamVjdCBBIGRpY3Rpb25hcnkgb2YgbWF4aW11bSB2YWx1ZXMsIGluZGV4ZWQgYnkgZGlyZWN0aW9uLlxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1heGltdW1zRGF0YSgpIHtcbiAgICAgIHZhciBtYXhEYXRhID0ge307XG4gICAgICBtYXhEYXRhW0xFRlRdID0gY3JlYXRlTWF4aW11bVZPKExFRlQpO1xuICAgICAgbWF4RGF0YVtSSUdIVF0gPSBjcmVhdGVNYXhpbXVtVk8oUklHSFQpO1xuICAgICAgbWF4RGF0YVtVUF0gPSBjcmVhdGVNYXhpbXVtVk8oVVApO1xuICAgICAgbWF4RGF0YVtET1dOXSA9IGNyZWF0ZU1heGltdW1WTyhET1dOKTtcblxuICAgICAgcmV0dXJuIG1heERhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBtYXhpbXVtIHN3aXBlZCB2YWx1ZXMgZm9yIGEgZ2l2ZW4gc3dpcGUgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBkaXJlY3Rpb24gdGhhdCB0aGVzZSB2YWx1ZXMgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBAcmV0dXJuIE9iamVjdCBNYXhpbXVtIHZhbHVlc1xuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1heGltdW1WTyhkaXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpcmVjdGlvbjogZGlyLFxuICAgICAgICBkaXN0YW5jZTogMFxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy9cbiAgICAvLyBNQVRIUyAvIFVUSUxTXG4gICAgLy9cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZHVyYXRpb24gb2YgdGhlIHN3aXBlXG4gICAgICogQHJldHVybiBpbnRcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVEdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiAyIHRvdWNoZXMgKHBpbmNoKVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIGludDtcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2Uoc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcbiAgICAgIHZhciBkaWZmWCA9IE1hdGguYWJzKHN0YXJ0UG9pbnQueCAtIGVuZFBvaW50LngpO1xuICAgICAgdmFyIGRpZmZZID0gTWF0aC5hYnMoc3RhcnRQb2ludC55IC0gZW5kUG9pbnQueSk7XG5cbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGguc3FydChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgem9vbSBmYWN0b3IgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCBkaXN0YW5jZXNcbiAgICAgKiBAcGFyYW0ge2ludH0gc3RhcnREaXN0YW5jZSBEaXN0YW5jZSAoYmV0d2VlbiAyIGZpbmdlcnMpIHRoZSB1c2VyIHN0YXJ0ZWQgcGluY2hpbmcgYXRcbiAgICAgKiBAcGFyYW0ge2ludH0gZW5kRGlzdGFuY2UgRGlzdGFuY2UgKGJldHdlZW4gMiBmaW5nZXJzKSB0aGUgdXNlciBlbmRlZCBwaW5jaGluZyBhdFxuICAgICAqIEByZXR1cm4gZmxvYXQgVGhlIHpvb20gdmFsdWUgZnJvbSAwIHRvIDEuXG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlUGluY2hab29tKHN0YXJ0RGlzdGFuY2UsIGVuZERpc3RhbmNlKSB7XG4gICAgICB2YXIgcGVyY2VudCA9IChlbmREaXN0YW5jZSAvIHN0YXJ0RGlzdGFuY2UpICogMTtcbiAgICAgIHJldHVybiBwZXJjZW50LnRvRml4ZWQoMik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwaW5jaCBkaXJlY3Rpb24sIGVpdGhlciBJTiBvciBPVVQgZm9yIHRoZSBnaXZlbiBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHN0cmluZyBFaXRoZXIge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5JTn0gb3Ige0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5PVVR9XG4gICAgICogQHNlZSAkLmZuLnN3aXBlLmRpcmVjdGlvbnNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQaW5jaERpcmVjdGlvbigpIHtcbiAgICAgIGlmIChwaW5jaFpvb20gPCAxKSB7XG4gICAgICAgIHJldHVybiBPVVQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSU47XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGxlbmd0aCAvIGRpc3RhbmNlIG9mIHRoZSBzd2lwZVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIGludFxuICAgICAqIEBpbm5lclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RhbmNlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3coZW5kUG9pbnQueCAtIHN0YXJ0UG9pbnQueCwgMikgKyBNYXRoLnBvdyhlbmRQb2ludC55IC0gc3RhcnRQb2ludC55LCAyKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgYW5nbGUgb2YgdGhlIHN3aXBlXG4gICAgICogQHBhcmFtIHtwb2ludH0gc3RhcnRQb2ludCBBIHBvaW50IG9iamVjdCBjb250YWluaW5nIHggYW5kIHkgY28tb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHtwb2ludH0gZW5kUG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEByZXR1cm4gaW50XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlQW5nbGUoc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcbiAgICAgIHZhciB4ID0gc3RhcnRQb2ludC54IC0gZW5kUG9pbnQueDtcbiAgICAgIHZhciB5ID0gZW5kUG9pbnQueSAtIHN0YXJ0UG9pbnQueTtcbiAgICAgIHZhciByID0gTWF0aC5hdGFuMih5LCB4KTsgLy9yYWRpYW5zXG4gICAgICB2YXIgYW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTsgLy9kZWdyZWVzXG5cbiAgICAgIC8vZW5zdXJlIHZhbHVlIGlzIHBvc2l0aXZlXG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgIGFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoYW5nbGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYW5nbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBkaXJlY3Rpb24gb2YgdGhlIHN3aXBlXG4gICAgICogVGhpcyB3aWxsIGFsc28gY2FsbCBjYWxjdWxhdGVBbmdsZSB0byBnZXQgdGhlIGxhdGVzdCBhbmdsZSBvZiBzd2lwZVxuICAgICAqIEBwYXJhbSB7cG9pbnR9IHN0YXJ0UG9pbnQgQSBwb2ludCBvYmplY3QgY29udGFpbmluZyB4IGFuZCB5IGNvLW9yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7cG9pbnR9IGVuZFBvaW50IEEgcG9pbnQgb2JqZWN0IGNvbnRhaW5pbmcgeCBhbmQgeSBjby1vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJuIHN0cmluZyBFaXRoZXIge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5MRUZUfSAvIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuUklHSFR9IC8ge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9ucy5ET1dOfSAvIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnMuVVB9XG4gICAgICogQHNlZSAkLmZuLnN3aXBlLmRpcmVjdGlvbnNcbiAgICAgKiBAaW5uZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVEaXJlY3Rpb24oc3RhcnRQb2ludCwgZW5kUG9pbnQpIHtcblxuICAgICAgaWYoIGNvbXBhcmVQb2ludHMoc3RhcnRQb2ludCwgZW5kUG9pbnQpICkge1xuICAgICAgICByZXR1cm4gTk9ORTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuZ2xlID0gY2FsY3VsYXRlQW5nbGUoc3RhcnRQb2ludCwgZW5kUG9pbnQpO1xuXG4gICAgICBpZiAoKGFuZ2xlIDw9IDQ1KSAmJiAoYW5nbGUgPj0gMCkpIHtcbiAgICAgICAgcmV0dXJuIExFRlQ7XG4gICAgICB9IGVsc2UgaWYgKChhbmdsZSA8PSAzNjApICYmIChhbmdsZSA+PSAzMTUpKSB7XG4gICAgICAgIHJldHVybiBMRUZUO1xuICAgICAgfSBlbHNlIGlmICgoYW5nbGUgPj0gMTM1KSAmJiAoYW5nbGUgPD0gMjI1KSkge1xuICAgICAgICByZXR1cm4gUklHSFQ7XG4gICAgICB9IGVsc2UgaWYgKChhbmdsZSA+IDQ1KSAmJiAoYW5nbGUgPCAxMzUpKSB7XG4gICAgICAgIHJldHVybiBET1dOO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVQO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIE1TIHRpbWUgc3RhbXAgb2YgdGhlIGN1cnJlbnQgdGltZVxuICAgICAqIEByZXR1cm4gaW50XG4gICAgICogQGlubmVyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCkge1xuICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICByZXR1cm4gbm93LmdldFRpbWUoKTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGJvdW5kcyBvYmplY3Qgd2l0aCBsZWZ0LCByaWdodCwgdG9wIGFuZCBib3R0b20gcHJvcGVydGllcyBmb3IgdGhlIGVsZW1lbnQgc3BlY2lmaWVkLlxuICAgICAqIEBwYXJhbSB7RG9tTm9kZX0gVGhlIERPTSBub2RlIHRvIGdldCB0aGUgYm91bmRzIGZvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRib3VuZHMoZWwpIHtcbiAgICAgIGVsID0gJChlbCk7XG4gICAgICB2YXIgb2Zmc2V0ID0gZWwub2Zmc2V0KCk7XG5cbiAgICAgIHZhciBib3VuZHMgPSB7XG4gICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxuICAgICAgICByaWdodDogb2Zmc2V0LmxlZnQgKyBlbC5vdXRlcldpZHRoKCksXG4gICAgICAgIHRvcDogb2Zmc2V0LnRvcCxcbiAgICAgICAgYm90dG9tOiBvZmZzZXQudG9wICsgZWwub3V0ZXJIZWlnaHQoKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYm91bmRzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBwb2ludCBvYmplY3QgaXMgaW4gdGhlIGJvdW5kcyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBvaW50IEEgcG9pbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7aW50fSBwb2ludC54IFRoZSB4IHZhbHVlIG9mIHRoZSBwb2ludC5cbiAgICAgKiBAcGFyYW0ge2ludH0gcG9pbnQueSBUaGUgeCB2YWx1ZSBvZiB0aGUgcG9pbnQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGJvdW5kcyBUaGUgYm91bmRzIG9iamVjdCB0byB0ZXN0XG4gICAgICogQHBhcmFtIHtpbnR9IGJvdW5kcy5sZWZ0IFRoZSBsZWZ0bW9zdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7aW50fSBib3VuZHMucmlnaHQgVGhlIHJpZ2h0dG1vc3QgdmFsdWVcbiAgICAgKiBAcGFyYW0ge2ludH0gYm91bmRzLnRvcCBUaGUgdG9wbW9zdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7aW50fSBib3VuZHMuYm90dG9tIFRoZSBib3R0b21tb3N0IHZhbHVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbkJvdW5kcyhwb2ludCwgYm91bmRzKSB7XG4gICAgICByZXR1cm4gKHBvaW50LnggPiBib3VuZHMubGVmdCAmJiBwb2ludC54IDwgYm91bmRzLnJpZ2h0ICYmIHBvaW50LnkgPiBib3VuZHMudG9wICYmIHBvaW50LnkgPCBib3VuZHMuYm90dG9tKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSB0d28gcG9pbnRzIGFyZSBlcXVhbFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludCBBIHBvaW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcG9pbnQgQiBwb2ludCBvYmplY3QuXG4gICAgICogQHJldHVybiB0cnVlIG9mIHRoZSBwb2ludHMgbWF0Y2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnRzKHBvaW50QSwgcG9pbnRCKSB7XG4gICAgICByZXR1cm4gKHBvaW50QS54ID09IHBvaW50Qi54ICYmIHBvaW50QS55ID09IHBvaW50Qi55KTtcbiAgICB9XG5cblxuICB9XG5cblxuXG5cbiAgLyoqXG4gICAqIEEgY2F0Y2ggYWxsIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIGFsbCBzd2lwZSBkaXJlY3Rpb25zLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiBUaGUgZGlyZWN0aW9uIHRoZSB1c2VyIHN3aXBlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgc3dpcGVkXG4gICAqIEBwYXJhbSB7aW50fSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gb2YgdGhlIHN3aXBlIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcGFyYW0ge2ludH0gZmluZ2VyQ291bnQgVGhlIG51bWJlciBvZiBmaW5nZXJzIHVzZWQuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5maW5nZXJzfVxuICAgKiBAcGFyYW0ge29iamVjdH0gZmluZ2VyRGF0YSBUaGUgY29vcmRpbmF0ZXMgb2YgZmluZ2VycyBpbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudERpcmVjdGlvbiBUaGUgY3VycmVudCBkaXJlY3Rpb24gdGhlIHVzZXIgaXMgc3dpcGluZy5cbiAgICovXG5cblxuXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0aGF0IGlzIHRyaWdnZXJlZCBmb3IgXCJsZWZ0XCIgc3dpcGVzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlTGVmdFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwicmlnaHRcIiBzd2lwZXMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjc3dpcGVSaWdodFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwidXBcIiBzd2lwZXMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjc3dpcGVVcFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnREaXJlY3Rpb24gVGhlIGN1cnJlbnQgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIHN3aXBpbmcuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhhbmRsZXIgdGhhdCBpcyB0cmlnZ2VyZWQgZm9yIFwiZG93blwiIHN3aXBlcy5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNzd2lwZURvd25cbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgc3dpcGVkIGluLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZGlyZWN0aW9uc31cbiAgICogQHBhcmFtIHtpbnR9IGRpc3RhbmNlIFRoZSBkaXN0YW5jZSB0aGUgdXNlciBzd2lwZWRcbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgZXZlcnkgcGhhc2Ugb2YgdGhlIHN3aXBlLiBUaGlzIGhhbmRsZXIgaXMgY29uc3RhbnRseSBmaXJlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBwaW5jaC5cbiAgICogVGhpcyBpcyB0cmlnZ2VyZWQgcmVnYXJkbGVzcyBvZiBzd2lwZSB0aHJlc2hvbGRzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3N3aXBlU3RhdHVzXG4gICAqIEBldmVudFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBoYXNlIFRoZSBwaGFzZSBvZiB0aGUgc3dpcGUgZXZlbnQuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5waGFzZXN9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0aGUgdXNlciBzd2lwZWQgaW4uIFRoaXMgaXMgbnVsbCBpZiB0aGUgdXNlciBoYXMgeWV0IHRvIG1vdmUuIFNlZSB7QGxpbmsgJC5mbi5zd2lwZS5kaXJlY3Rpb25zfVxuICAgKiBAcGFyYW0ge2ludH0gZGlzdGFuY2UgVGhlIGRpc3RhbmNlIHRoZSB1c2VyIHN3aXBlZC4gVGhpcyBpcyAwIGlmIHRoZSB1c2VyIGhhcyB5ZXQgdG8gbW92ZS5cbiAgICogQHBhcmFtIHtpbnR9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3dpcGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7aW50fSBmaW5nZXJDb3VudCBUaGUgbnVtYmVyIG9mIGZpbmdlcnMgdXNlZC4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmZpbmdlcnN9XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaW5nZXJEYXRhIFRoZSBjb29yZGluYXRlcyBvZiBmaW5nZXJzIGluIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50RGlyZWN0aW9uIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGUgdXNlciBpcyBzd2lwaW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQSBoYW5kbGVyIHRyaWdnZXJlZCBmb3IgcGluY2ggaW4gZXZlbnRzLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3BpbmNoSW5cbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgcGluY2hlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgcGluY2hlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtpbnR9IHpvb20gVGhlIHpvb20vc2NhbGUgbGV2ZWwgdGhlIHVzZXIgcGluY2hlZCB0b28sIDAtMS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIHBpbmNoIG91dCBldmVudHMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjcGluY2hPdXRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgcGluY2hlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgcGluY2hlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtpbnR9IHpvb20gVGhlIHpvb20vc2NhbGUgbGV2ZWwgdGhlIHVzZXIgcGluY2hlZCB0b28sIDAtMS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgaGFuZGxlciB0cmlnZ2VyZWQgZm9yIGFsbCBwaW5jaCBldmVudHMuIFRoaXMgaGFuZGxlciBpcyBjb25zdGFudGx5IGZpcmVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHBpbmNoLiBUaGlzIGlzIHRyaWdnZXJlZCByZWdhcmRsZXNzIG9mIHRocmVzaG9sZHMuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjcGluY2hTdGF0dXNcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge2ludH0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24gdGhlIHVzZXIgcGluY2hlZCBpbi4gU2VlIHtAbGluayAkLmZuLnN3aXBlLmRpcmVjdGlvbnN9XG4gICAqIEBwYXJhbSB7aW50fSBkaXN0YW5jZSBUaGUgZGlzdGFuY2UgdGhlIHVzZXIgcGluY2hlZFxuICAgKiBAcGFyYW0ge2ludH0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIG9mIHRoZSBzd2lwZSBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtpbnR9IGZpbmdlckNvdW50IFRoZSBudW1iZXIgb2YgZmluZ2VycyB1c2VkLiBTZWUge0BsaW5rICQuZm4uc3dpcGUuZmluZ2Vyc31cbiAgICogQHBhcmFtIHtpbnR9IHpvb20gVGhlIHpvb20vc2NhbGUgbGV2ZWwgdGhlIHVzZXIgcGluY2hlZCB0b28sIDAtMS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbmdlckRhdGEgVGhlIGNvb3JkaW5hdGVzIG9mIGZpbmdlcnMgaW4gZXZlbnRcbiAgICovXG5cbiAgLyoqXG4gICAqIEEgY2xpY2sgaGFuZGxlciB0cmlnZ2VyZWQgd2hlbiBhIHVzZXIgc2ltcGx5IGNsaWNrcywgcmF0aGVyIHRoYW4gc3dpcGVzIG9uIGFuIGVsZW1lbnQuXG4gICAqIFRoaXMgaXMgZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuNi4yLCBhbnkgYXNzaWdubWVudCB0byBjbGljayB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSB0YXAgaGFuZGxlci5cbiAgICogWW91IGNhbm5vdCB1c2UgPGNvZGU+b248L2NvZGU+IHRvIGJpbmQgdG8gdGhpcyBldmVudCBhcyB0aGUgZGVmYXVsdCBqUSA8Y29kZT5jbGljazwvY29kZT4gZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG4gICAqIFVzZSB0aGUgPGNvZGU+dGFwPC9jb2RlPiBldmVudCBpbnN0ZWFkLlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI2NsaWNrXG4gICAqIEBldmVudFxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuNi4yLCBwbGVhc2UgdXNlIHtAbGluayAkLmZuLnN3aXBlI3RhcH0gaW5zdGVhZFxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqIEBwYXJhbSB7RXZlbnRPYmplY3R9IGV2ZW50IFRoZSBvcmlnaW5hbCBldmVudCBvYmplY3RcbiAgICogQHBhcmFtIHtEb21PYmplY3R9IHRhcmdldCBUaGUgZWxlbWVudCBjbGlja2VkIG9uLlxuICAgKi9cblxuICAvKipcbiAgICogQSBjbGljayAvIHRhcCBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBzaW1wbHkgY2xpY2tzIG9yIHRhcHMsIHJhdGhlciB0aGFuIHN3aXBlcyBvbiBhbiBlbGVtZW50LlxuICAgKiBAbmFtZSAkLmZuLnN3aXBlI3RhcFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7RG9tT2JqZWN0fSB0YXJnZXQgVGhlIGVsZW1lbnQgY2xpY2tlZCBvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIEEgZG91YmxlIHRhcCBoYW5kbGVyIHRyaWdnZXJlZCB3aGVuIGEgdXNlciBkb3VibGUgY2xpY2tzIG9yIHRhcHMgb24gYW4gZWxlbWVudC5cbiAgICogWW91IGNhbiBzZXQgdGhlIHRpbWUgZGVsYXkgZm9yIGEgZG91YmxlIHRhcCB3aXRoIHRoZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNkb3VibGVUYXBUaHJlc2hvbGR9IHByb3BlcnR5LlxuICAgKiBOb3RlOiBJZiB5b3Ugc2V0IGJvdGggPGNvZGU+ZG91YmxlVGFwPC9jb2RlPiBhbmQgPGNvZGU+dGFwPC9jb2RlPiBoYW5kbGVycywgdGhlIDxjb2RlPnRhcDwvY29kZT4gZXZlbnQgd2lsbCBiZSBkZWxheWVkIGJ5IHRoZSA8Y29kZT5kb3VibGVUYXBUaHJlc2hvbGQ8L2NvZGU+XG4gICAqIGFzIHRoZSBzY3JpcHQgbmVlZHMgdG8gY2hlY2sgaWYgaXRzIGEgZG91YmxlIHRhcC5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNkb3VibGVUYXBcbiAgICogQHNlZSAgJC5mbi5zd2lwZS5kZWZhdWx0cyNkb3VibGVUYXBUaHJlc2hvbGRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0RvbU9iamVjdH0gdGFyZ2V0IFRoZSBlbGVtZW50IGNsaWNrZWQgb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGxvbmcgdGFwIGhhbmRsZXIgdHJpZ2dlcmVkIG9uY2UgYSB0YXAgaGFzIGJlZW4gcmVsZWFzZSBpZiB0aGUgdGFwIHdhcyBsb25nZXIgdGhhbiB0aGUgbG9uZ1RhcFRocmVzaG9sZC5cbiAgICogWW91IGNhbiBzZXQgdGhlIHRpbWUgZGVsYXkgZm9yIGEgbG9uZyB0YXAgd2l0aCB0aGUge0BsaW5rICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZH0gcHJvcGVydHkuXG4gICAqIEBuYW1lICQuZm4uc3dpcGUjbG9uZ1RhcFxuICAgKiBAc2VlICAkLmZuLnN3aXBlLmRlZmF1bHRzI2xvbmdUYXBUaHJlc2hvbGRcbiAgICogQGV2ZW50XG4gICAqIEBkZWZhdWx0IG51bGxcbiAgICogQHBhcmFtIHtFdmVudE9iamVjdH0gZXZlbnQgVGhlIG9yaWdpbmFsIGV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0RvbU9iamVjdH0gdGFyZ2V0IFRoZSBlbGVtZW50IGNsaWNrZWQgb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBIGhvbGQgdGFwIGhhbmRsZXIgdHJpZ2dlcmVkIGFzIHNvb24gYXMgdGhlIGxvbmdUYXBUaHJlc2hvbGQgaXMgcmVhY2hlZFxuICAgKiBZb3UgY2FuIHNldCB0aGUgdGltZSBkZWxheSBmb3IgYSBsb25nIHRhcCB3aXRoIHRoZSB7QGxpbmsgJC5mbi5zd2lwZS5kZWZhdWx0cyNsb25nVGFwVGhyZXNob2xkfSBwcm9wZXJ0eS5cbiAgICogQG5hbWUgJC5mbi5zd2lwZSNob2xkXG4gICAqIEBzZWUgICQuZm4uc3dpcGUuZGVmYXVsdHMjbG9uZ1RhcFRocmVzaG9sZFxuICAgKiBAZXZlbnRcbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKiBAcGFyYW0ge0V2ZW50T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7RG9tT2JqZWN0fSB0YXJnZXQgVGhlIGVsZW1lbnQgY2xpY2tlZCBvbi5cbiAgICovXG5cbn0pKTtcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIG1lbnVBY2NvcmRlb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudS1hY2NvJyk7XHJcblxyXG4gIG1lbnVBY2NvcmRlb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIHZhciBtZW51QWNjb0l0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudS1hY2NvX19pdGVtJyk7XHJcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdCgnbGknKTtcclxuXHJcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xyXG5cclxuICAgIGlmICghdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWVudS1hY2NvX19pdGVtLS1hY3RpdmUnKSkge1xyXG4gICAgICBmb3IgKHZhciBjYXJkIG9mIG1lbnVBY2NvSXRlbSkge1xyXG4gICAgICAgIGNhcmQuY2xhc3NMaXN0LnJlbW92ZSgnbWVudS1hY2NvX19pdGVtLS1hY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnbWVudS1hY2NvX19pdGVtLS1hY3RpdmUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdtZW51LWFjY29fX2l0ZW0tLWFjdGl2ZScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KSgpXHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRlYW1BY2NvcmRlb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGVhbS1hY2NvJyk7XHJcblxyXG4gIHRlYW1BY2NvcmRlb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIHZhciB0ZWFtQWNjb0l0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGVhbS1hY2NvX19pdGVtJyk7XHJcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdCgnbGknKTtcclxuXHJcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xyXG5cclxuICAgIGlmICghdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGVhbS1hY2NvX19pdGVtLS1hY3RpdmUnKSkge1xyXG4gICAgICBmb3IgKHZhciBjYXJkIG9mIHRlYW1BY2NvSXRlbSkge1xyXG4gICAgICAgIGNhcmQuY2xhc3NMaXN0LnJlbW92ZSgndGVhbS1hY2NvX19pdGVtLS1hY3RpdmUnKTtcclxuICAgICAgfVxyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgndGVhbS1hY2NvX19pdGVtLS1hY3RpdmUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCd0ZWFtLWFjY29fX2l0ZW0tLWFjdGl2ZScpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KSgpXHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgY29uc3Qgb3JkZXJGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1fX2VsZW0nKTtcclxuICBjb25zdCBvcmRlckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4tb3JkZXInKTtcclxuICBjb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idG4tcmVzZXQnKTtcclxuXHJcbiAgb3JkZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgbGV0IGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgIGRhdGEuYXBwZW5kKFwibmFtZVwiLCBvcmRlckZvcm0uZWxlbWVudHMubmFtZS52YWx1ZSk7XHJcbiAgICBkYXRhLmFwcGVuZChcInBob25lXCIsIG9yZGVyRm9ybS5lbGVtZW50cy5waG9uZS52YWx1ZSk7XHJcbiAgICBkYXRhLmFwcGVuZChcImNvbW1lbnRcIiwgb3JkZXJGb3JtLmVsZW1lbnRzLmNvbW1lbnQudmFsdWUpO1xyXG4gICAgZGF0YS5hcHBlbmQoXCJ0b1wiLCBcInllcmVza29kQGdtYWlsLmNvbVwiKTtcclxuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcclxuICAgIHhoci5vcGVuKCdQT1NUJywgJ2h0dHBzOi8vd2ViZGV2LWFwaS5sb2Z0c2Nob29sLmNvbS9zZW5kbWFpbCcpO1xyXG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLVJlcXVlc3RlZC1XaXRoXCIsIFwiWE1MSHR0cFJlcXVlc3RcIik7XHJcbiAgICB4aHIuc2VuZChkYXRhKTtcclxuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xyXG4gICAgICBtb2RhbFJldi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgIG1vZGFsVGV4dC5pbm5lclRleHQgPSB4aHIucmVzcG9uc2UubWVzc2FnZTtcclxuICAgICAgbW9kYWxUaXRsZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHZhbGlkYXRlRm9ybShmb3JtKSB7XHJcbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xyXG4gICAgaWYgKCF2YWxpZGF0ZUZpZWxkKGZvcm0uZWxlbWVudHMubmFtZSkpIHtcclxuICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghdmFsaWRhdGVGaWVsZChmb3JtLmVsZW1lbnRzLnBob25lKSkge1xyXG4gICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCF2YWxpZGF0ZUZpZWxkKGZvcm0uZWxlbWVudHMuY29tbWVudCkpIHtcclxuICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWxpZDtcclxuICB9XHJcbiAgZnVuY3Rpb24gdmFsaWRhdGVGaWVsZChmaWVsZCkge1xyXG4gICAgaWYgKCFmaWVsZC5jaGVja1ZhbGlkaXR5KCkpIHtcclxuICAgICAgZmllbGQubmV4dEVsZW1lbnRTaWJsaW5nLnRleHRDb250ZW50ID0gZmllbGQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZpZWxkLm5leHRFbGVtZW50U2libGluZy50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbn0pKClcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICB2YXIgaGFtYnVyZ2VyTWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoYW1idXJnZXJNZW51Jyk7XHJcbiAgdmFyIGhhbWJ1cmdlckJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoYW1idXJnZXJCdXR0b24nKTtcclxuICB2YXIgbWVudUl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5hdl9fbGluaycpO1xyXG5cclxuICBmdW5jdGlvbiBvcGVuSGFtYnVyZ2VyTWVudSgpIHtcclxuICAgIGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICBoYW1idXJnZXJCdXR0b24uY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGNsb3NlSGFtYnVyZ2VyTWVudSgpIHtcclxuICAgIGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICBoYW1idXJnZXJCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XHJcbiAgfVxyXG5cclxuICBoYW1idXJnZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKGhhbWJ1cmdlckJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZScpKSB7XHJcbiAgICAgIGNsb3NlSGFtYnVyZ2VyTWVudSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3BlbkhhbWJ1cmdlck1lbnUoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaGFtYnVyZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zb2xlLmxvZyhlLnRhcmdldCk7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCduYXZfX2xpbmsnKSkge1xyXG4gICAgICBjbG9zZUhhbWJ1cmdlck1lbnUoKTtcclxuICAgIH1cclxuICB9KVxyXG59KSgpXHJcblxyXG5cclxuXHJcblxyXG4iLCIvKiEgalF1ZXJ5IHYzLjQuMSB8IChjKSBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cclxuIWZ1bmN0aW9uIChlLCB0KSB7IFwidXNlIHN0cmljdFwiOyBcIm9iamVjdFwiID09IHR5cGVvZiBtb2R1bGUgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPyBtb2R1bGUuZXhwb3J0cyA9IGUuZG9jdW1lbnQgPyB0KGUsICEwKSA6IGZ1bmN0aW9uIChlKSB7IGlmICghZS5kb2N1bWVudCkgdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTsgcmV0dXJuIHQoZSkgfSA6IHQoZSkgfShcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAoQywgZSkgeyBcInVzZSBzdHJpY3RcIjsgdmFyIHQgPSBbXSwgRSA9IEMuZG9jdW1lbnQsIHIgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsIHMgPSB0LnNsaWNlLCBnID0gdC5jb25jYXQsIHUgPSB0LnB1c2gsIGkgPSB0LmluZGV4T2YsIG4gPSB7fSwgbyA9IG4udG9TdHJpbmcsIHYgPSBuLmhhc093blByb3BlcnR5LCBhID0gdi50b1N0cmluZywgbCA9IGEuY2FsbChPYmplY3QpLCB5ID0ge30sIG0gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlICYmIFwibnVtYmVyXCIgIT0gdHlwZW9mIGUubm9kZVR5cGUgfSwgeCA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBudWxsICE9IGUgJiYgZSA9PT0gZS53aW5kb3cgfSwgYyA9IHsgdHlwZTogITAsIHNyYzogITAsIG5vbmNlOiAhMCwgbm9Nb2R1bGU6ICEwIH07IGZ1bmN0aW9uIGIoZSwgdCwgbikgeyB2YXIgciwgaSwgbyA9IChuID0gbiB8fCBFKS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpOyBpZiAoby50ZXh0ID0gZSwgdCkgZm9yIChyIGluIGMpIChpID0gdFtyXSB8fCB0LmdldEF0dHJpYnV0ZSAmJiB0LmdldEF0dHJpYnV0ZShyKSkgJiYgby5zZXRBdHRyaWJ1dGUociwgaSk7IG4uaGVhZC5hcHBlbmRDaGlsZChvKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pIH0gZnVuY3Rpb24gdyhlKSB7IHJldHVybiBudWxsID09IGUgPyBlICsgXCJcIiA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlID8gbltvLmNhbGwoZSldIHx8IFwib2JqZWN0XCIgOiB0eXBlb2YgZSB9IHZhciBmID0gXCIzLjQuMVwiLCBrID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIG5ldyBrLmZuLmluaXQoZSwgdCkgfSwgcCA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZzsgZnVuY3Rpb24gZChlKSB7IHZhciB0ID0gISFlICYmIFwibGVuZ3RoXCIgaW4gZSAmJiBlLmxlbmd0aCwgbiA9IHcoZSk7IHJldHVybiAhbShlKSAmJiAheChlKSAmJiAoXCJhcnJheVwiID09PSBuIHx8IDAgPT09IHQgfHwgXCJudW1iZXJcIiA9PSB0eXBlb2YgdCAmJiAwIDwgdCAmJiB0IC0gMSBpbiBlKSB9IGsuZm4gPSBrLnByb3RvdHlwZSA9IHsganF1ZXJ5OiBmLCBjb25zdHJ1Y3RvcjogaywgbGVuZ3RoOiAwLCB0b0FycmF5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzLmNhbGwodGhpcykgfSwgZ2V0OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gbnVsbCA9PSBlID8gcy5jYWxsKHRoaXMpIDogZSA8IDAgPyB0aGlzW2UgKyB0aGlzLmxlbmd0aF0gOiB0aGlzW2VdIH0sIHB1c2hTdGFjazogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBrLm1lcmdlKHRoaXMuY29uc3RydWN0b3IoKSwgZSk7IHJldHVybiB0LnByZXZPYmplY3QgPSB0aGlzLCB0IH0sIGVhY2g6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBrLmVhY2godGhpcywgZSkgfSwgbWFwOiBmdW5jdGlvbiAobikgeyByZXR1cm4gdGhpcy5wdXNoU3RhY2soay5tYXAodGhpcywgZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIG4uY2FsbChlLCB0LCBlKSB9KSkgfSwgc2xpY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHMuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgfSwgZmlyc3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZXEoMCkgfSwgbGFzdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lcSgtMSkgfSwgZXE6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdGhpcy5sZW5ndGgsIG4gPSArZSArIChlIDwgMCA/IHQgOiAwKTsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKDAgPD0gbiAmJiBuIDwgdCA/IFt0aGlzW25dXSA6IFtdKSB9LCBlbmQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCkgfSwgcHVzaDogdSwgc29ydDogdC5zb3J0LCBzcGxpY2U6IHQuc3BsaWNlIH0sIGsuZXh0ZW5kID0gay5mbi5leHRlbmQgPSBmdW5jdGlvbiAoKSB7IHZhciBlLCB0LCBuLCByLCBpLCBvLCBhID0gYXJndW1lbnRzWzBdIHx8IHt9LCBzID0gMSwgdSA9IGFyZ3VtZW50cy5sZW5ndGgsIGwgPSAhMTsgZm9yIChcImJvb2xlYW5cIiA9PSB0eXBlb2YgYSAmJiAobCA9IGEsIGEgPSBhcmd1bWVudHNbc10gfHwge30sIHMrKyksIFwib2JqZWN0XCIgPT0gdHlwZW9mIGEgfHwgbShhKSB8fCAoYSA9IHt9KSwgcyA9PT0gdSAmJiAoYSA9IHRoaXMsIHMtLSk7IHMgPCB1OyBzKyspaWYgKG51bGwgIT0gKGUgPSBhcmd1bWVudHNbc10pKSBmb3IgKHQgaW4gZSkgciA9IGVbdF0sIFwiX19wcm90b19fXCIgIT09IHQgJiYgYSAhPT0gciAmJiAobCAmJiByICYmIChrLmlzUGxhaW5PYmplY3QocikgfHwgKGkgPSBBcnJheS5pc0FycmF5KHIpKSkgPyAobiA9IGFbdF0sIG8gPSBpICYmICFBcnJheS5pc0FycmF5KG4pID8gW10gOiBpIHx8IGsuaXNQbGFpbk9iamVjdChuKSA/IG4gOiB7fSwgaSA9ICExLCBhW3RdID0gay5leHRlbmQobCwgbywgcikpIDogdm9pZCAwICE9PSByICYmIChhW3RdID0gcikpOyByZXR1cm4gYSB9LCBrLmV4dGVuZCh7IGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoZiArIE1hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLCBcIlwiKSwgaXNSZWFkeTogITAsIGVycm9yOiBmdW5jdGlvbiAoZSkgeyB0aHJvdyBuZXcgRXJyb3IoZSkgfSwgbm9vcDogZnVuY3Rpb24gKCkgeyB9LCBpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbjsgcmV0dXJuICEoIWUgfHwgXCJbb2JqZWN0IE9iamVjdF1cIiAhPT0gby5jYWxsKGUpKSAmJiAoISh0ID0gcihlKSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiAobiA9IHYuY2FsbCh0LCBcImNvbnN0cnVjdG9yXCIpICYmIHQuY29uc3RydWN0b3IpICYmIGEuY2FsbChuKSA9PT0gbCkgfSwgaXNFbXB0eU9iamVjdDogZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IGZvciAodCBpbiBlKSByZXR1cm4gITE7IHJldHVybiAhMCB9LCBnbG9iYWxFdmFsOiBmdW5jdGlvbiAoZSwgdCkgeyBiKGUsIHsgbm9uY2U6IHQgJiYgdC5ub25jZSB9KSB9LCBlYWNoOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciA9IDA7IGlmIChkKGUpKSB7IGZvciAobiA9IGUubGVuZ3RoOyByIDwgbjsgcisrKWlmICghMSA9PT0gdC5jYWxsKGVbcl0sIHIsIGVbcl0pKSBicmVhayB9IGVsc2UgZm9yIChyIGluIGUpIGlmICghMSA9PT0gdC5jYWxsKGVbcl0sIHIsIGVbcl0pKSBicmVhazsgcmV0dXJuIGUgfSwgdHJpbTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgPT0gZSA/IFwiXCIgOiAoZSArIFwiXCIpLnJlcGxhY2UocCwgXCJcIikgfSwgbWFrZUFycmF5OiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IHQgfHwgW107IHJldHVybiBudWxsICE9IGUgJiYgKGQoT2JqZWN0KGUpKSA/IGsubWVyZ2UobiwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IFtlXSA6IGUpIDogdS5jYWxsKG4sIGUpKSwgbiB9LCBpbkFycmF5OiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gbnVsbCA9PSB0ID8gLTEgOiBpLmNhbGwodCwgZSwgbikgfSwgbWVyZ2U6IGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSArdC5sZW5ndGgsIHIgPSAwLCBpID0gZS5sZW5ndGg7IHIgPCBuOyByKyspZVtpKytdID0gdFtyXTsgcmV0dXJuIGUubGVuZ3RoID0gaSwgZSB9LCBncmVwOiBmdW5jdGlvbiAoZSwgdCwgbikgeyBmb3IgKHZhciByID0gW10sIGkgPSAwLCBvID0gZS5sZW5ndGgsIGEgPSAhbjsgaSA8IG87IGkrKykhdChlW2ldLCBpKSAhPT0gYSAmJiByLnB1c2goZVtpXSk7IHJldHVybiByIH0sIG1hcDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8gPSAwLCBhID0gW107IGlmIChkKGUpKSBmb3IgKHIgPSBlLmxlbmd0aDsgbyA8IHI7IG8rKyludWxsICE9IChpID0gdChlW29dLCBvLCBuKSkgJiYgYS5wdXNoKGkpOyBlbHNlIGZvciAobyBpbiBlKSBudWxsICE9IChpID0gdChlW29dLCBvLCBuKSkgJiYgYS5wdXNoKGkpOyByZXR1cm4gZy5hcHBseShbXSwgYSkgfSwgZ3VpZDogMSwgc3VwcG9ydDogeSB9KSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgKGsuZm5bU3ltYm9sLml0ZXJhdG9yXSA9IHRbU3ltYm9sLml0ZXJhdG9yXSksIGsuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiAoZSwgdCkgeyBuW1wiW29iamVjdCBcIiArIHQgKyBcIl1cIl0gPSB0LnRvTG93ZXJDYXNlKCkgfSk7IHZhciBoID0gZnVuY3Rpb24gKG4pIHsgdmFyIGUsIGQsIGIsIG8sIGksIGgsIGYsIGcsIHcsIHUsIGwsIFQsIEMsIGEsIEUsIHYsIHMsIGMsIHksIGsgPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlLCBtID0gbi5kb2N1bWVudCwgUyA9IDAsIHIgPSAwLCBwID0gdWUoKSwgeCA9IHVlKCksIE4gPSB1ZSgpLCBBID0gdWUoKSwgRCA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBlID09PSB0ICYmIChsID0gITApLCAwIH0sIGogPSB7fS5oYXNPd25Qcm9wZXJ0eSwgdCA9IFtdLCBxID0gdC5wb3AsIEwgPSB0LnB1c2gsIEggPSB0LnB1c2gsIE8gPSB0LnNsaWNlLCBQID0gZnVuY3Rpb24gKGUsIHQpIHsgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKylpZiAoZVtuXSA9PT0gdCkgcmV0dXJuIG47IHJldHVybiAtMSB9LCBSID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLCBNID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLCBJID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLCBXID0gXCJcXFxcW1wiICsgTSArIFwiKihcIiArIEkgKyBcIikoPzpcIiArIE0gKyBcIiooWypeJHwhfl0/PSlcIiArIE0gKyBcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgSSArIFwiKSl8KVwiICsgTSArIFwiKlxcXFxdXCIsICQgPSBcIjooXCIgKyBJICsgXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgVyArIFwiKSopfC4qKVxcXFwpfClcIiwgRiA9IG5ldyBSZWdFeHAoTSArIFwiK1wiLCBcImdcIiksIEIgPSBuZXcgUmVnRXhwKFwiXlwiICsgTSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIE0gKyBcIiskXCIsIFwiZ1wiKSwgXyA9IG5ldyBSZWdFeHAoXCJeXCIgKyBNICsgXCIqLFwiICsgTSArIFwiKlwiKSwgeiA9IG5ldyBSZWdFeHAoXCJeXCIgKyBNICsgXCIqKFs+K35dfFwiICsgTSArIFwiKVwiICsgTSArIFwiKlwiKSwgVSA9IG5ldyBSZWdFeHAoTSArIFwifD5cIiksIFggPSBuZXcgUmVnRXhwKCQpLCBWID0gbmV3IFJlZ0V4cChcIl5cIiArIEkgKyBcIiRcIiksIEcgPSB7IElEOiBuZXcgUmVnRXhwKFwiXiMoXCIgKyBJICsgXCIpXCIpLCBDTEFTUzogbmV3IFJlZ0V4cChcIl5cXFxcLihcIiArIEkgKyBcIilcIiksIFRBRzogbmV3IFJlZ0V4cChcIl4oXCIgKyBJICsgXCJ8WypdKVwiKSwgQVRUUjogbmV3IFJlZ0V4cChcIl5cIiArIFcpLCBQU0VVRE86IG5ldyBSZWdFeHAoXCJeXCIgKyAkKSwgQ0hJTEQ6IG5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgTSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyBNICsgXCIqKD86KFsrLV18KVwiICsgTSArIFwiKihcXFxcZCspfCkpXCIgKyBNICsgXCIqXFxcXCl8KVwiLCBcImlcIiksIGJvb2w6IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBSICsgXCIpJFwiLCBcImlcIiksIG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cChcIl5cIiArIE0gKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyBNICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgTSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiKSB9LCBZID0gL0hUTUwkL2ksIFEgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLCBKID0gL15oXFxkJC9pLCBLID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LywgWiA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLCBlZSA9IC9bK35dLywgdGUgPSBuZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyBNICsgXCI/fChcIiArIE0gKyBcIil8LilcIiwgXCJpZ1wiKSwgbmUgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IFwiMHhcIiArIHQgLSA2NTUzNjsgcmV0dXJuIHIgIT0gciB8fCBuID8gdCA6IHIgPCAwID8gU3RyaW5nLmZyb21DaGFyQ29kZShyICsgNjU1MzYpIDogU3RyaW5nLmZyb21DaGFyQ29kZShyID4+IDEwIHwgNTUyOTYsIDEwMjMgJiByIHwgNTYzMjApIH0sIHJlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csIGllID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIHQgPyBcIlxcMFwiID09PSBlID8gXCJcXHVmZmZkXCIgOiBlLnNsaWNlKDAsIC0xKSArIFwiXFxcXFwiICsgZS5jaGFyQ29kZUF0KGUubGVuZ3RoIC0gMSkudG9TdHJpbmcoMTYpICsgXCIgXCIgOiBcIlxcXFxcIiArIGUgfSwgb2UgPSBmdW5jdGlvbiAoKSB7IFQoKSB9LCBhZSA9IGJlKGZ1bmN0aW9uIChlKSB7IHJldHVybiAhMCA9PT0gZS5kaXNhYmxlZCAmJiBcImZpZWxkc2V0XCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSB9LCB7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfSk7IHRyeSB7IEguYXBwbHkodCA9IE8uY2FsbChtLmNoaWxkTm9kZXMpLCBtLmNoaWxkTm9kZXMpLCB0W20uY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlIH0gY2F0Y2ggKGUpIHsgSCA9IHsgYXBwbHk6IHQubGVuZ3RoID8gZnVuY3Rpb24gKGUsIHQpIHsgTC5hcHBseShlLCBPLmNhbGwodCkpIH0gOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGUubGVuZ3RoLCByID0gMDsgd2hpbGUgKGVbbisrXSA9IHRbcisrXSk7IGUubGVuZ3RoID0gbiAtIDEgfSB9IH0gZnVuY3Rpb24gc2UodCwgZSwgbiwgcikgeyB2YXIgaSwgbywgYSwgcywgdSwgbCwgYywgZiA9IGUgJiYgZS5vd25lckRvY3VtZW50LCBwID0gZSA/IGUubm9kZVR5cGUgOiA5OyBpZiAobiA9IG4gfHwgW10sIFwic3RyaW5nXCIgIT0gdHlwZW9mIHQgfHwgIXQgfHwgMSAhPT0gcCAmJiA5ICE9PSBwICYmIDExICE9PSBwKSByZXR1cm4gbjsgaWYgKCFyICYmICgoZSA/IGUub3duZXJEb2N1bWVudCB8fCBlIDogbSkgIT09IEMgJiYgVChlKSwgZSA9IGUgfHwgQywgRSkpIHsgaWYgKDExICE9PSBwICYmICh1ID0gWi5leGVjKHQpKSkgaWYgKGkgPSB1WzFdKSB7IGlmICg5ID09PSBwKSB7IGlmICghKGEgPSBlLmdldEVsZW1lbnRCeUlkKGkpKSkgcmV0dXJuIG47IGlmIChhLmlkID09PSBpKSByZXR1cm4gbi5wdXNoKGEpLCBuIH0gZWxzZSBpZiAoZiAmJiAoYSA9IGYuZ2V0RWxlbWVudEJ5SWQoaSkpICYmIHkoZSwgYSkgJiYgYS5pZCA9PT0gaSkgcmV0dXJuIG4ucHVzaChhKSwgbiB9IGVsc2UgeyBpZiAodVsyXSkgcmV0dXJuIEguYXBwbHkobiwgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KSksIG47IGlmICgoaSA9IHVbM10pICYmIGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHJldHVybiBILmFwcGx5KG4sIGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShpKSksIG4gfSBpZiAoZC5xc2EgJiYgIUFbdCArIFwiIFwiXSAmJiAoIXYgfHwgIXYudGVzdCh0KSkgJiYgKDEgIT09IHAgfHwgXCJvYmplY3RcIiAhPT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSkgeyBpZiAoYyA9IHQsIGYgPSBlLCAxID09PSBwICYmIFUudGVzdCh0KSkgeyAocyA9IGUuZ2V0QXR0cmlidXRlKFwiaWRcIikpID8gcyA9IHMucmVwbGFjZShyZSwgaWUpIDogZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBzID0gayksIG8gPSAobCA9IGgodCkpLmxlbmd0aDsgd2hpbGUgKG8tLSkgbFtvXSA9IFwiI1wiICsgcyArIFwiIFwiICsgeGUobFtvXSk7IGMgPSBsLmpvaW4oXCIsXCIpLCBmID0gZWUudGVzdCh0KSAmJiB5ZShlLnBhcmVudE5vZGUpIHx8IGUgfSB0cnkgeyByZXR1cm4gSC5hcHBseShuLCBmLnF1ZXJ5U2VsZWN0b3JBbGwoYykpLCBuIH0gY2F0Y2ggKGUpIHsgQSh0LCAhMCkgfSBmaW5hbGx5IHsgcyA9PT0gayAmJiBlLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpIH0gfSB9IHJldHVybiBnKHQucmVwbGFjZShCLCBcIiQxXCIpLCBlLCBuLCByKSB9IGZ1bmN0aW9uIHVlKCkgeyB2YXIgciA9IFtdOyByZXR1cm4gZnVuY3Rpb24gZSh0LCBuKSB7IHJldHVybiByLnB1c2godCArIFwiIFwiKSA+IGIuY2FjaGVMZW5ndGggJiYgZGVsZXRlIGVbci5zaGlmdCgpXSwgZVt0ICsgXCIgXCJdID0gbiB9IH0gZnVuY3Rpb24gbGUoZSkgeyByZXR1cm4gZVtrXSA9ICEwLCBlIH0gZnVuY3Rpb24gY2UoZSkgeyB2YXIgdCA9IEMuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpOyB0cnkgeyByZXR1cm4gISFlKHQpIH0gY2F0Y2ggKGUpIHsgcmV0dXJuICExIH0gZmluYWxseSB7IHQucGFyZW50Tm9kZSAmJiB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksIHQgPSBudWxsIH0gfSBmdW5jdGlvbiBmZShlLCB0KSB7IHZhciBuID0gZS5zcGxpdChcInxcIiksIHIgPSBuLmxlbmd0aDsgd2hpbGUgKHItLSkgYi5hdHRySGFuZGxlW25bcl1dID0gdCB9IGZ1bmN0aW9uIHBlKGUsIHQpIHsgdmFyIG4gPSB0ICYmIGUsIHIgPSBuICYmIDEgPT09IGUubm9kZVR5cGUgJiYgMSA9PT0gdC5ub2RlVHlwZSAmJiBlLnNvdXJjZUluZGV4IC0gdC5zb3VyY2VJbmRleDsgaWYgKHIpIHJldHVybiByOyBpZiAobikgd2hpbGUgKG4gPSBuLm5leHRTaWJsaW5nKSBpZiAobiA9PT0gdCkgcmV0dXJuIC0xOyByZXR1cm4gZSA/IDEgOiAtMSB9IGZ1bmN0aW9uIGRlKHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBcImlucHV0XCIgPT09IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAmJiBlLnR5cGUgPT09IHQgfSB9IGZ1bmN0aW9uIGhlKG4pIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOyByZXR1cm4gKFwiaW5wdXRcIiA9PT0gdCB8fCBcImJ1dHRvblwiID09PSB0KSAmJiBlLnR5cGUgPT09IG4gfSB9IGZ1bmN0aW9uIGdlKHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHJldHVybiBcImZvcm1cIiBpbiBlID8gZS5wYXJlbnROb2RlICYmICExID09PSBlLmRpc2FibGVkID8gXCJsYWJlbFwiIGluIGUgPyBcImxhYmVsXCIgaW4gZS5wYXJlbnROb2RlID8gZS5wYXJlbnROb2RlLmRpc2FibGVkID09PSB0IDogZS5kaXNhYmxlZCA9PT0gdCA6IGUuaXNEaXNhYmxlZCA9PT0gdCB8fCBlLmlzRGlzYWJsZWQgIT09ICF0ICYmIGFlKGUpID09PSB0IDogZS5kaXNhYmxlZCA9PT0gdCA6IFwibGFiZWxcIiBpbiBlICYmIGUuZGlzYWJsZWQgPT09IHQgfSB9IGZ1bmN0aW9uIHZlKGEpIHsgcmV0dXJuIGxlKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvID0gK28sIGxlKGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gYShbXSwgZS5sZW5ndGgsIG8pLCBpID0gci5sZW5ndGg7IHdoaWxlIChpLS0pIGVbbiA9IHJbaV1dICYmIChlW25dID0gISh0W25dID0gZVtuXSkpIH0pIH0pIH0gZnVuY3Rpb24geWUoZSkgeyByZXR1cm4gZSAmJiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lICYmIGUgfSBmb3IgKGUgaW4gZCA9IHNlLnN1cHBvcnQgPSB7fSwgaSA9IHNlLmlzWE1MID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLm5hbWVzcGFjZVVSSSwgbiA9IChlLm93bmVyRG9jdW1lbnQgfHwgZSkuZG9jdW1lbnRFbGVtZW50OyByZXR1cm4gIVkudGVzdCh0IHx8IG4gJiYgbi5ub2RlTmFtZSB8fCBcIkhUTUxcIikgfSwgVCA9IHNlLnNldERvY3VtZW50ID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4sIHIgPSBlID8gZS5vd25lckRvY3VtZW50IHx8IGUgOiBtOyByZXR1cm4gciAhPT0gQyAmJiA5ID09PSByLm5vZGVUeXBlICYmIHIuZG9jdW1lbnRFbGVtZW50ICYmIChhID0gKEMgPSByKS5kb2N1bWVudEVsZW1lbnQsIEUgPSAhaShDKSwgbSAhPT0gQyAmJiAobiA9IEMuZGVmYXVsdFZpZXcpICYmIG4udG9wICE9PSBuICYmIChuLmFkZEV2ZW50TGlzdGVuZXIgPyBuLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIiwgb2UsICExKSA6IG4uYXR0YWNoRXZlbnQgJiYgbi5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsIG9lKSksIGQuYXR0cmlidXRlcyA9IGNlKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmNsYXNzTmFtZSA9IFwiaVwiLCAhZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIikgfSksIGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBjZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5hcHBlbmRDaGlsZChDLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCAhZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoIH0pLCBkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBLLnRlc3QoQy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSwgZC5nZXRCeUlkID0gY2UoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGEuYXBwZW5kQ2hpbGQoZSkuaWQgPSBrLCAhQy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhQy5nZXRFbGVtZW50c0J5TmFtZShrKS5sZW5ndGggfSksIGQuZ2V0QnlJZCA/IChiLmZpbHRlci5JRCA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5yZXBsYWNlKHRlLCBuZSk7IHJldHVybiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gdCB9IH0sIGIuZmluZC5JRCA9IGZ1bmN0aW9uIChlLCB0KSB7IGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB0LmdldEVsZW1lbnRCeUlkICYmIEUpIHsgdmFyIG4gPSB0LmdldEVsZW1lbnRCeUlkKGUpOyByZXR1cm4gbiA/IFtuXSA6IFtdIH0gfSkgOiAoYi5maWx0ZXIuSUQgPSBmdW5jdGlvbiAoZSkgeyB2YXIgbiA9IGUucmVwbGFjZSh0ZSwgbmUpOyByZXR1cm4gZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEF0dHJpYnV0ZU5vZGUgJiYgZS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7IHJldHVybiB0ICYmIHQudmFsdWUgPT09IG4gfSB9LCBiLmZpbmQuSUQgPSBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgdC5nZXRFbGVtZW50QnlJZCAmJiBFKSB7IHZhciBuLCByLCBpLCBvID0gdC5nZXRFbGVtZW50QnlJZChlKTsgaWYgKG8pIHsgaWYgKChuID0gby5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpICYmIG4udmFsdWUgPT09IGUpIHJldHVybiBbb107IGkgPSB0LmdldEVsZW1lbnRzQnlOYW1lKGUpLCByID0gMDsgd2hpbGUgKG8gPSBpW3IrK10pIGlmICgobiA9IG8uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpKSAmJiBuLnZhbHVlID09PSBlKSByZXR1cm4gW29dIH0gcmV0dXJuIFtdIH0gfSksIGIuZmluZC5UQUcgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpIDogZC5xc2EgPyB0LnF1ZXJ5U2VsZWN0b3JBbGwoZSkgOiB2b2lkIDAgfSA6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gW10sIGkgPSAwLCBvID0gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKTsgaWYgKFwiKlwiID09PSBlKSB7IHdoaWxlIChuID0gb1tpKytdKSAxID09PSBuLm5vZGVUeXBlICYmIHIucHVzaChuKTsgcmV0dXJuIHIgfSByZXR1cm4gbyB9LCBiLmZpbmQuQ0xBU1MgPSBkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24gKGUsIHQpIHsgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBFKSByZXR1cm4gdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGUpIH0sIHMgPSBbXSwgdiA9IFtdLCAoZC5xc2EgPSBLLnRlc3QoQy5xdWVyeVNlbGVjdG9yQWxsKSkgJiYgKGNlKGZ1bmN0aW9uIChlKSB7IGEuYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBrICsgXCInPjwvYT48c2VsZWN0IGlkPSdcIiArIGsgKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggJiYgdi5wdXNoKFwiWypeJF09XCIgKyBNICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCB8fCB2LnB1c2goXCJcXFxcW1wiICsgTSArIFwiKig/OnZhbHVlfFwiICsgUiArIFwiKVwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIiArIGsgKyBcIi1dXCIpLmxlbmd0aCB8fCB2LnB1c2goXCJ+PVwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoIHx8IHYucHVzaChcIjpjaGVja2VkXCIpLCBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiICsgayArIFwiKypcIikubGVuZ3RoIHx8IHYucHVzaChcIi4jLitbK35dXCIpIH0pLCBjZShmdW5jdGlvbiAoZSkgeyBlLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT48c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7IHZhciB0ID0gQy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7IHQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImhpZGRlblwiKSwgZS5hcHBlbmRDaGlsZCh0KS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwiRFwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICYmIHYucHVzaChcIm5hbWVcIiArIE0gKyBcIipbKl4kfCF+XT89XCIpLCAyICE9PSBlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggJiYgdi5wdXNoKFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiksIGEuYXBwZW5kQ2hpbGQoZSkuZGlzYWJsZWQgPSAhMCwgMiAhPT0gZS5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAmJiB2LnB1c2goXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiKSwgZS5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKSwgdi5wdXNoKFwiLC4qOlwiKSB9KSksIChkLm1hdGNoZXNTZWxlY3RvciA9IEsudGVzdChjID0gYS5tYXRjaGVzIHx8IGEud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGEubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGEub01hdGNoZXNTZWxlY3RvciB8fCBhLm1zTWF0Y2hlc1NlbGVjdG9yKSkgJiYgY2UoZnVuY3Rpb24gKGUpIHsgZC5kaXNjb25uZWN0ZWRNYXRjaCA9IGMuY2FsbChlLCBcIipcIiksIGMuY2FsbChlLCBcIltzIT0nJ106eFwiKSwgcy5wdXNoKFwiIT1cIiwgJCkgfSksIHYgPSB2Lmxlbmd0aCAmJiBuZXcgUmVnRXhwKHYuam9pbihcInxcIikpLCBzID0gcy5sZW5ndGggJiYgbmV3IFJlZ0V4cChzLmpvaW4oXCJ8XCIpKSwgdCA9IEsudGVzdChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSwgeSA9IHQgfHwgSy50ZXN0KGEuY29udGFpbnMpID8gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSA5ID09PSBlLm5vZGVUeXBlID8gZS5kb2N1bWVudEVsZW1lbnQgOiBlLCByID0gdCAmJiB0LnBhcmVudE5vZGU7IHJldHVybiBlID09PSByIHx8ICEoIXIgfHwgMSAhPT0gci5ub2RlVHlwZSB8fCAhKG4uY29udGFpbnMgPyBuLmNvbnRhaW5zKHIpIDogZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiAxNiAmIGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKSB9IDogZnVuY3Rpb24gKGUsIHQpIHsgaWYgKHQpIHdoaWxlICh0ID0gdC5wYXJlbnROb2RlKSBpZiAodCA9PT0gZSkgcmV0dXJuICEwOyByZXR1cm4gITEgfSwgRCA9IHQgPyBmdW5jdGlvbiAoZSwgdCkgeyBpZiAoZSA9PT0gdCkgcmV0dXJuIGwgPSAhMCwgMDsgdmFyIG4gPSAhZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICF0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uOyByZXR1cm4gbiB8fCAoMSAmIChuID0gKGUub3duZXJEb2N1bWVudCB8fCBlKSA9PT0gKHQub3duZXJEb2N1bWVudCB8fCB0KSA/IGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCkgOiAxKSB8fCAhZC5zb3J0RGV0YWNoZWQgJiYgdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKSA9PT0gbiA/IGUgPT09IEMgfHwgZS5vd25lckRvY3VtZW50ID09PSBtICYmIHkobSwgZSkgPyAtMSA6IHQgPT09IEMgfHwgdC5vd25lckRvY3VtZW50ID09PSBtICYmIHkobSwgdCkgPyAxIDogdSA/IFAodSwgZSkgLSBQKHUsIHQpIDogMCA6IDQgJiBuID8gLTEgOiAxKSB9IDogZnVuY3Rpb24gKGUsIHQpIHsgaWYgKGUgPT09IHQpIHJldHVybiBsID0gITAsIDA7IHZhciBuLCByID0gMCwgaSA9IGUucGFyZW50Tm9kZSwgbyA9IHQucGFyZW50Tm9kZSwgYSA9IFtlXSwgcyA9IFt0XTsgaWYgKCFpIHx8ICFvKSByZXR1cm4gZSA9PT0gQyA/IC0xIDogdCA9PT0gQyA/IDEgOiBpID8gLTEgOiBvID8gMSA6IHUgPyBQKHUsIGUpIC0gUCh1LCB0KSA6IDA7IGlmIChpID09PSBvKSByZXR1cm4gcGUoZSwgdCk7IG4gPSBlOyB3aGlsZSAobiA9IG4ucGFyZW50Tm9kZSkgYS51bnNoaWZ0KG4pOyBuID0gdDsgd2hpbGUgKG4gPSBuLnBhcmVudE5vZGUpIHMudW5zaGlmdChuKTsgd2hpbGUgKGFbcl0gPT09IHNbcl0pIHIrKzsgcmV0dXJuIHIgPyBwZShhW3JdLCBzW3JdKSA6IGFbcl0gPT09IG0gPyAtMSA6IHNbcl0gPT09IG0gPyAxIDogMCB9KSwgQyB9LCBzZS5tYXRjaGVzID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIHNlKGUsIG51bGwsIG51bGwsIHQpIH0sIHNlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uIChlLCB0KSB7IGlmICgoZS5vd25lckRvY3VtZW50IHx8IGUpICE9PSBDICYmIFQoZSksIGQubWF0Y2hlc1NlbGVjdG9yICYmIEUgJiYgIUFbdCArIFwiIFwiXSAmJiAoIXMgfHwgIXMudGVzdCh0KSkgJiYgKCF2IHx8ICF2LnRlc3QodCkpKSB0cnkgeyB2YXIgbiA9IGMuY2FsbChlLCB0KTsgaWYgKG4gfHwgZC5kaXNjb25uZWN0ZWRNYXRjaCB8fCBlLmRvY3VtZW50ICYmIDExICE9PSBlLmRvY3VtZW50Lm5vZGVUeXBlKSByZXR1cm4gbiB9IGNhdGNoIChlKSB7IEEodCwgITApIH0gcmV0dXJuIDAgPCBzZSh0LCBDLCBudWxsLCBbZV0pLmxlbmd0aCB9LCBzZS5jb250YWlucyA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiAoZS5vd25lckRvY3VtZW50IHx8IGUpICE9PSBDICYmIFQoZSksIHkoZSwgdCkgfSwgc2UuYXR0ciA9IGZ1bmN0aW9uIChlLCB0KSB7IChlLm93bmVyRG9jdW1lbnQgfHwgZSkgIT09IEMgJiYgVChlKTsgdmFyIG4gPSBiLmF0dHJIYW5kbGVbdC50b0xvd2VyQ2FzZSgpXSwgciA9IG4gJiYgai5jYWxsKGIuYXR0ckhhbmRsZSwgdC50b0xvd2VyQ2FzZSgpKSA/IG4oZSwgdCwgIUUpIDogdm9pZCAwOyByZXR1cm4gdm9pZCAwICE9PSByID8gciA6IGQuYXR0cmlidXRlcyB8fCAhRSA/IGUuZ2V0QXR0cmlidXRlKHQpIDogKHIgPSBlLmdldEF0dHJpYnV0ZU5vZGUodCkpICYmIHIuc3BlY2lmaWVkID8gci52YWx1ZSA6IG51bGwgfSwgc2UuZXNjYXBlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIChlICsgXCJcIikucmVwbGFjZShyZSwgaWUpIH0sIHNlLmVycm9yID0gZnVuY3Rpb24gKGUpIHsgdGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBlKSB9LCBzZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSBbXSwgciA9IDAsIGkgPSAwOyBpZiAobCA9ICFkLmRldGVjdER1cGxpY2F0ZXMsIHUgPSAhZC5zb3J0U3RhYmxlICYmIGUuc2xpY2UoMCksIGUuc29ydChEKSwgbCkgeyB3aGlsZSAodCA9IGVbaSsrXSkgdCA9PT0gZVtpXSAmJiAociA9IG4ucHVzaChpKSk7IHdoaWxlIChyLS0pIGUuc3BsaWNlKG5bcl0sIDEpIH0gcmV0dXJuIHUgPSBudWxsLCBlIH0sIG8gPSBzZS5nZXRUZXh0ID0gZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSBcIlwiLCByID0gMCwgaSA9IGUubm9kZVR5cGU7IGlmIChpKSB7IGlmICgxID09PSBpIHx8IDkgPT09IGkgfHwgMTEgPT09IGkpIHsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUudGV4dENvbnRlbnQpIHJldHVybiBlLnRleHRDb250ZW50OyBmb3IgKGUgPSBlLmZpcnN0Q2hpbGQ7IGU7IGUgPSBlLm5leHRTaWJsaW5nKW4gKz0gbyhlKSB9IGVsc2UgaWYgKDMgPT09IGkgfHwgNCA9PT0gaSkgcmV0dXJuIGUubm9kZVZhbHVlIH0gZWxzZSB3aGlsZSAodCA9IGVbcisrXSkgbiArPSBvKHQpOyByZXR1cm4gbiB9LCAoYiA9IHNlLnNlbGVjdG9ycyA9IHsgY2FjaGVMZW5ndGg6IDUwLCBjcmVhdGVQc2V1ZG86IGxlLCBtYXRjaDogRywgYXR0ckhhbmRsZToge30sIGZpbmQ6IHt9LCByZWxhdGl2ZTogeyBcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogITAgfSwgXCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LCBcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiAhMCB9LCBcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfSB9LCBwcmVGaWx0ZXI6IHsgQVRUUjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGVbMV0gPSBlWzFdLnJlcGxhY2UodGUsIG5lKSwgZVszXSA9IChlWzNdIHx8IGVbNF0gfHwgZVs1XSB8fCBcIlwiKS5yZXBsYWNlKHRlLCBuZSksIFwifj1cIiA9PT0gZVsyXSAmJiAoZVszXSA9IFwiIFwiICsgZVszXSArIFwiIFwiKSwgZS5zbGljZSgwLCA0KSB9LCBDSElMRDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGVbMV0gPSBlWzFdLnRvTG93ZXJDYXNlKCksIFwibnRoXCIgPT09IGVbMV0uc2xpY2UoMCwgMykgPyAoZVszXSB8fCBzZS5lcnJvcihlWzBdKSwgZVs0XSA9ICsoZVs0XSA/IGVbNV0gKyAoZVs2XSB8fCAxKSA6IDIgKiAoXCJldmVuXCIgPT09IGVbM10gfHwgXCJvZGRcIiA9PT0gZVszXSkpLCBlWzVdID0gKyhlWzddICsgZVs4XSB8fCBcIm9kZFwiID09PSBlWzNdKSkgOiBlWzNdICYmIHNlLmVycm9yKGVbMF0pLCBlIH0sIFBTRVVETzogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSAhZVs2XSAmJiBlWzJdOyByZXR1cm4gRy5DSElMRC50ZXN0KGVbMF0pID8gbnVsbCA6IChlWzNdID8gZVsyXSA9IGVbNF0gfHwgZVs1XSB8fCBcIlwiIDogbiAmJiBYLnRlc3QobikgJiYgKHQgPSBoKG4sICEwKSkgJiYgKHQgPSBuLmluZGV4T2YoXCIpXCIsIG4ubGVuZ3RoIC0gdCkgLSBuLmxlbmd0aCkgJiYgKGVbMF0gPSBlWzBdLnNsaWNlKDAsIHQpLCBlWzJdID0gbi5zbGljZSgwLCB0KSksIGUuc2xpY2UoMCwgMykpIH0gfSwgZmlsdGVyOiB7IFRBRzogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLnJlcGxhY2UodGUsIG5lKS50b0xvd2VyQ2FzZSgpOyByZXR1cm4gXCIqXCIgPT09IGUgPyBmdW5jdGlvbiAoKSB7IHJldHVybiAhMCB9IDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubm9kZU5hbWUgJiYgZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0IH0gfSwgQ0xBU1M6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gcFtlICsgXCIgXCJdOyByZXR1cm4gdCB8fCAodCA9IG5ldyBSZWdFeHAoXCIoXnxcIiArIE0gKyBcIilcIiArIGUgKyBcIihcIiArIE0gKyBcInwkKVwiKSkgJiYgcChlLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdC50ZXN0KFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuY2xhc3NOYW1lICYmIGUuY2xhc3NOYW1lIHx8IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGUuZ2V0QXR0cmlidXRlICYmIGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIikgfSkgfSwgQVRUUjogZnVuY3Rpb24gKG4sIHIsIGkpIHsgcmV0dXJuIGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gc2UuYXR0cihlLCBuKTsgcmV0dXJuIG51bGwgPT0gdCA/IFwiIT1cIiA9PT0gciA6ICFyIHx8ICh0ICs9IFwiXCIsIFwiPVwiID09PSByID8gdCA9PT0gaSA6IFwiIT1cIiA9PT0gciA/IHQgIT09IGkgOiBcIl49XCIgPT09IHIgPyBpICYmIDAgPT09IHQuaW5kZXhPZihpKSA6IFwiKj1cIiA9PT0gciA/IGkgJiYgLTEgPCB0LmluZGV4T2YoaSkgOiBcIiQ9XCIgPT09IHIgPyBpICYmIHQuc2xpY2UoLWkubGVuZ3RoKSA9PT0gaSA6IFwifj1cIiA9PT0gciA/IC0xIDwgKFwiIFwiICsgdC5yZXBsYWNlKEYsIFwiIFwiKSArIFwiIFwiKS5pbmRleE9mKGkpIDogXCJ8PVwiID09PSByICYmICh0ID09PSBpIHx8IHQuc2xpY2UoMCwgaS5sZW5ndGggKyAxKSA9PT0gaSArIFwiLVwiKSkgfSB9LCBDSElMRDogZnVuY3Rpb24gKGgsIGUsIHQsIGcsIHYpIHsgdmFyIHkgPSBcIm50aFwiICE9PSBoLnNsaWNlKDAsIDMpLCBtID0gXCJsYXN0XCIgIT09IGguc2xpY2UoLTQpLCB4ID0gXCJvZi10eXBlXCIgPT09IGU7IHJldHVybiAxID09PSBnICYmIDAgPT09IHYgPyBmdW5jdGlvbiAoZSkgeyByZXR1cm4gISFlLnBhcmVudE5vZGUgfSA6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvLCBhLCBzLCB1LCBsID0geSAhPT0gbSA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsIGMgPSBlLnBhcmVudE5vZGUsIGYgPSB4ICYmIGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwgcCA9ICFuICYmICF4LCBkID0gITE7IGlmIChjKSB7IGlmICh5KSB7IHdoaWxlIChsKSB7IGEgPSBlOyB3aGlsZSAoYSA9IGFbbF0pIGlmICh4ID8gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBmIDogMSA9PT0gYS5ub2RlVHlwZSkgcmV0dXJuICExOyB1ID0gbCA9IFwib25seVwiID09PSBoICYmICF1ICYmIFwibmV4dFNpYmxpbmdcIiB9IHJldHVybiAhMCB9IGlmICh1ID0gW20gPyBjLmZpcnN0Q2hpbGQgOiBjLmxhc3RDaGlsZF0sIG0gJiYgcCkgeyBkID0gKHMgPSAociA9IChpID0gKG8gPSAoYSA9IGMpW2tdIHx8IChhW2tdID0ge30pKVthLnVuaXF1ZUlEXSB8fCAob1thLnVuaXF1ZUlEXSA9IHt9KSlbaF0gfHwgW10pWzBdID09PSBTICYmIHJbMV0pICYmIHJbMl0sIGEgPSBzICYmIGMuY2hpbGROb2Rlc1tzXTsgd2hpbGUgKGEgPSArK3MgJiYgYSAmJiBhW2xdIHx8IChkID0gcyA9IDApIHx8IHUucG9wKCkpIGlmICgxID09PSBhLm5vZGVUeXBlICYmICsrZCAmJiBhID09PSBlKSB7IGlbaF0gPSBbUywgcywgZF07IGJyZWFrIH0gfSBlbHNlIGlmIChwICYmIChkID0gcyA9IChyID0gKGkgPSAobyA9IChhID0gZSlba10gfHwgKGFba10gPSB7fSkpW2EudW5pcXVlSURdIHx8IChvW2EudW5pcXVlSURdID0ge30pKVtoXSB8fCBbXSlbMF0gPT09IFMgJiYgclsxXSksICExID09PSBkKSB3aGlsZSAoYSA9ICsrcyAmJiBhICYmIGFbbF0gfHwgKGQgPSBzID0gMCkgfHwgdS5wb3AoKSkgaWYgKCh4ID8gYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBmIDogMSA9PT0gYS5ub2RlVHlwZSkgJiYgKytkICYmIChwICYmICgoaSA9IChvID0gYVtrXSB8fCAoYVtrXSA9IHt9KSlbYS51bmlxdWVJRF0gfHwgKG9bYS51bmlxdWVJRF0gPSB7fSkpW2hdID0gW1MsIGRdKSwgYSA9PT0gZSkpIGJyZWFrOyByZXR1cm4gKGQgLT0gdikgPT09IGcgfHwgZCAlIGcgPT0gMCAmJiAwIDw9IGQgLyBnIH0gfSB9LCBQU0VVRE86IGZ1bmN0aW9uIChlLCBvKSB7IHZhciB0LCBhID0gYi5wc2V1ZG9zW2VdIHx8IGIuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldIHx8IHNlLmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIGUpOyByZXR1cm4gYVtrXSA/IGEobykgOiAxIDwgYS5sZW5ndGggPyAodCA9IFtlLCBlLCBcIlwiLCBvXSwgYi5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGUudG9Mb3dlckNhc2UoKSkgPyBsZShmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciA9IGEoZSwgbyksIGkgPSByLmxlbmd0aDsgd2hpbGUgKGktLSkgZVtuID0gUChlLCByW2ldKV0gPSAhKHRbbl0gPSByW2ldKSB9KSA6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBhKGUsIDAsIHQpIH0pIDogYSB9IH0sIHBzZXVkb3M6IHsgbm90OiBsZShmdW5jdGlvbiAoZSkgeyB2YXIgciA9IFtdLCBpID0gW10sIHMgPSBmKGUucmVwbGFjZShCLCBcIiQxXCIpKTsgcmV0dXJuIHNba10gPyBsZShmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyB2YXIgaSwgbyA9IHMoZSwgbnVsbCwgciwgW10pLCBhID0gZS5sZW5ndGg7IHdoaWxlIChhLS0pIChpID0gb1thXSkgJiYgKGVbYV0gPSAhKHRbYV0gPSBpKSkgfSkgOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gclswXSA9IGUsIHMociwgbnVsbCwgbiwgaSksIHJbMF0gPSBudWxsLCAhaS5wb3AoKSB9IH0pLCBoYXM6IGxlKGZ1bmN0aW9uICh0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gMCA8IHNlKHQsIGUpLmxlbmd0aCB9IH0pLCBjb250YWluczogbGUoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgPSB0LnJlcGxhY2UodGUsIG5lKSwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIC0xIDwgKGUudGV4dENvbnRlbnQgfHwgbyhlKSkuaW5kZXhPZih0KSB9IH0pLCBsYW5nOiBsZShmdW5jdGlvbiAobikgeyByZXR1cm4gVi50ZXN0KG4gfHwgXCJcIikgfHwgc2UuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIG4pLCBuID0gbi5yZXBsYWNlKHRlLCBuZSkudG9Mb3dlckNhc2UoKSwgZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IGRvIHsgaWYgKHQgPSBFID8gZS5sYW5nIDogZS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlLmdldEF0dHJpYnV0ZShcImxhbmdcIikpIHJldHVybiAodCA9IHQudG9Mb3dlckNhc2UoKSkgPT09IG4gfHwgMCA9PT0gdC5pbmRleE9mKG4gKyBcIi1cIikgfSB3aGlsZSAoKGUgPSBlLnBhcmVudE5vZGUpICYmIDEgPT09IGUubm9kZVR5cGUpOyByZXR1cm4gITEgfSB9KSwgdGFyZ2V0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IG4ubG9jYXRpb24gJiYgbi5sb2NhdGlvbi5oYXNoOyByZXR1cm4gdCAmJiB0LnNsaWNlKDEpID09PSBlLmlkIH0sIHJvb3Q6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID09PSBhIH0sIGZvY3VzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA9PT0gQy5hY3RpdmVFbGVtZW50ICYmICghQy5oYXNGb2N1cyB8fCBDLmhhc0ZvY3VzKCkpICYmICEhKGUudHlwZSB8fCBlLmhyZWYgfHwgfmUudGFiSW5kZXgpIH0sIGVuYWJsZWQ6IGdlKCExKSwgZGlzYWJsZWQ6IGdlKCEwKSwgY2hlY2tlZDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7IHJldHVybiBcImlucHV0XCIgPT09IHQgJiYgISFlLmNoZWNrZWQgfHwgXCJvcHRpb25cIiA9PT0gdCAmJiAhIWUuc2VsZWN0ZWQgfSwgc2VsZWN0ZWQ6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnBhcmVudE5vZGUgJiYgZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsICEwID09PSBlLnNlbGVjdGVkIH0sIGVtcHR5OiBmdW5jdGlvbiAoZSkgeyBmb3IgKGUgPSBlLmZpcnN0Q2hpbGQ7IGU7IGUgPSBlLm5leHRTaWJsaW5nKWlmIChlLm5vZGVUeXBlIDwgNikgcmV0dXJuICExOyByZXR1cm4gITAgfSwgcGFyZW50OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gIWIucHNldWRvcy5lbXB0eShlKSB9LCBoZWFkZXI6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBKLnRlc3QoZS5ub2RlTmFtZSkgfSwgaW5wdXQ6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBRLnRlc3QoZS5ub2RlTmFtZSkgfSwgYnV0dG9uOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsgcmV0dXJuIFwiaW5wdXRcIiA9PT0gdCAmJiBcImJ1dHRvblwiID09PSBlLnR5cGUgfHwgXCJidXR0b25cIiA9PT0gdCB9LCB0ZXh0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdDsgcmV0dXJuIFwiaW5wdXRcIiA9PT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICYmIFwidGV4dFwiID09PSBlLnR5cGUgJiYgKG51bGwgPT0gKHQgPSBlLmdldEF0dHJpYnV0ZShcInR5cGVcIikpIHx8IFwidGV4dFwiID09PSB0LnRvTG93ZXJDYXNlKCkpIH0sIGZpcnN0OiB2ZShmdW5jdGlvbiAoKSB7IHJldHVybiBbMF0gfSksIGxhc3Q6IHZlKGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBbdCAtIDFdIH0pLCBlcTogdmUoZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIFtuIDwgMCA/IG4gKyB0IDogbl0gfSksIGV2ZW46IHZlKGZ1bmN0aW9uIChlLCB0KSB7IGZvciAodmFyIG4gPSAwOyBuIDwgdDsgbiArPSAyKWUucHVzaChuKTsgcmV0dXJuIGUgfSksIG9kZDogdmUoZnVuY3Rpb24gKGUsIHQpIHsgZm9yICh2YXIgbiA9IDE7IG4gPCB0OyBuICs9IDIpZS5wdXNoKG4pOyByZXR1cm4gZSB9KSwgbHQ6IHZlKGZ1bmN0aW9uIChlLCB0LCBuKSB7IGZvciAodmFyIHIgPSBuIDwgMCA/IG4gKyB0IDogdCA8IG4gPyB0IDogbjsgMCA8PSAtLXI7KWUucHVzaChyKTsgcmV0dXJuIGUgfSksIGd0OiB2ZShmdW5jdGlvbiAoZSwgdCwgbikgeyBmb3IgKHZhciByID0gbiA8IDAgPyBuICsgdCA6IG47ICsrciA8IHQ7KWUucHVzaChyKTsgcmV0dXJuIGUgfSkgfSB9KS5wc2V1ZG9zLm50aCA9IGIucHNldWRvcy5lcSwgeyByYWRpbzogITAsIGNoZWNrYm94OiAhMCwgZmlsZTogITAsIHBhc3N3b3JkOiAhMCwgaW1hZ2U6ICEwIH0pIGIucHNldWRvc1tlXSA9IGRlKGUpOyBmb3IgKGUgaW4geyBzdWJtaXQ6ICEwLCByZXNldDogITAgfSkgYi5wc2V1ZG9zW2VdID0gaGUoZSk7IGZ1bmN0aW9uIG1lKCkgeyB9IGZ1bmN0aW9uIHhlKGUpIHsgZm9yICh2YXIgdCA9IDAsIG4gPSBlLmxlbmd0aCwgciA9IFwiXCI7IHQgPCBuOyB0KyspciArPSBlW3RdLnZhbHVlOyByZXR1cm4gciB9IGZ1bmN0aW9uIGJlKHMsIGUsIHQpIHsgdmFyIHUgPSBlLmRpciwgbCA9IGUubmV4dCwgYyA9IGwgfHwgdSwgZiA9IHQgJiYgXCJwYXJlbnROb2RlXCIgPT09IGMsIHAgPSByKys7IHJldHVybiBlLmZpcnN0ID8gZnVuY3Rpb24gKGUsIHQsIG4pIHsgd2hpbGUgKGUgPSBlW3VdKSBpZiAoMSA9PT0gZS5ub2RlVHlwZSB8fCBmKSByZXR1cm4gcyhlLCB0LCBuKTsgcmV0dXJuICExIH0gOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbywgYSA9IFtTLCBwXTsgaWYgKG4pIHsgd2hpbGUgKGUgPSBlW3VdKSBpZiAoKDEgPT09IGUubm9kZVR5cGUgfHwgZikgJiYgcyhlLCB0LCBuKSkgcmV0dXJuICEwIH0gZWxzZSB3aGlsZSAoZSA9IGVbdV0pIGlmICgxID09PSBlLm5vZGVUeXBlIHx8IGYpIGlmIChpID0gKG8gPSBlW2tdIHx8IChlW2tdID0ge30pKVtlLnVuaXF1ZUlEXSB8fCAob1tlLnVuaXF1ZUlEXSA9IHt9KSwgbCAmJiBsID09PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIGUgPSBlW3VdIHx8IGU7IGVsc2UgeyBpZiAoKHIgPSBpW2NdKSAmJiByWzBdID09PSBTICYmIHJbMV0gPT09IHApIHJldHVybiBhWzJdID0gclsyXTsgaWYgKChpW2NdID0gYSlbMl0gPSBzKGUsIHQsIG4pKSByZXR1cm4gITAgfSByZXR1cm4gITEgfSB9IGZ1bmN0aW9uIHdlKGkpIHsgcmV0dXJuIDEgPCBpLmxlbmd0aCA/IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByID0gaS5sZW5ndGg7IHdoaWxlIChyLS0pIGlmICghaVtyXShlLCB0LCBuKSkgcmV0dXJuICExOyByZXR1cm4gITAgfSA6IGlbMF0gfSBmdW5jdGlvbiBUZShlLCB0LCBuLCByLCBpKSB7IGZvciAodmFyIG8sIGEgPSBbXSwgcyA9IDAsIHUgPSBlLmxlbmd0aCwgbCA9IG51bGwgIT0gdDsgcyA8IHU7IHMrKykobyA9IGVbc10pICYmIChuICYmICFuKG8sIHIsIGkpIHx8IChhLnB1c2gobyksIGwgJiYgdC5wdXNoKHMpKSk7IHJldHVybiBhIH0gZnVuY3Rpb24gQ2UoZCwgaCwgZywgdiwgeSwgZSkgeyByZXR1cm4gdiAmJiAhdltrXSAmJiAodiA9IENlKHYpKSwgeSAmJiAheVtrXSAmJiAoeSA9IENlKHksIGUpKSwgbGUoZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEsIHMgPSBbXSwgdSA9IFtdLCBsID0gdC5sZW5ndGgsIGMgPSBlIHx8IGZ1bmN0aW9uIChlLCB0LCBuKSB7IGZvciAodmFyIHIgPSAwLCBpID0gdC5sZW5ndGg7IHIgPCBpOyByKyspc2UoZSwgdFtyXSwgbik7IHJldHVybiBuIH0oaCB8fCBcIipcIiwgbi5ub2RlVHlwZSA/IFtuXSA6IG4sIFtdKSwgZiA9ICFkIHx8ICFlICYmIGggPyBjIDogVGUoYywgcywgZCwgbiwgciksIHAgPSBnID8geSB8fCAoZSA/IGQgOiBsIHx8IHYpID8gW10gOiB0IDogZjsgaWYgKGcgJiYgZyhmLCBwLCBuLCByKSwgdikgeyBpID0gVGUocCwgdSksIHYoaSwgW10sIG4sIHIpLCBvID0gaS5sZW5ndGg7IHdoaWxlIChvLS0pIChhID0gaVtvXSkgJiYgKHBbdVtvXV0gPSAhKGZbdVtvXV0gPSBhKSkgfSBpZiAoZSkgeyBpZiAoeSB8fCBkKSB7IGlmICh5KSB7IGkgPSBbXSwgbyA9IHAubGVuZ3RoOyB3aGlsZSAoby0tKSAoYSA9IHBbb10pICYmIGkucHVzaChmW29dID0gYSk7IHkobnVsbCwgcCA9IFtdLCBpLCByKSB9IG8gPSBwLmxlbmd0aDsgd2hpbGUgKG8tLSkgKGEgPSBwW29dKSAmJiAtMSA8IChpID0geSA/IFAoZSwgYSkgOiBzW29dKSAmJiAoZVtpXSA9ICEodFtpXSA9IGEpKSB9IH0gZWxzZSBwID0gVGUocCA9PT0gdCA/IHAuc3BsaWNlKGwsIHAubGVuZ3RoKSA6IHApLCB5ID8geShudWxsLCB0LCBwLCByKSA6IEguYXBwbHkodCwgcCkgfSkgfSBmdW5jdGlvbiBFZShlKSB7IGZvciAodmFyIGksIHQsIG4sIHIgPSBlLmxlbmd0aCwgbyA9IGIucmVsYXRpdmVbZVswXS50eXBlXSwgYSA9IG8gfHwgYi5yZWxhdGl2ZVtcIiBcIl0sIHMgPSBvID8gMSA6IDAsIHUgPSBiZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA9PT0gaSB9LCBhLCAhMCksIGwgPSBiZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gLTEgPCBQKGksIGUpIH0sIGEsICEwKSwgYyA9IFtmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9ICFvICYmIChuIHx8IHQgIT09IHcpIHx8ICgoaSA9IHQpLm5vZGVUeXBlID8gdShlLCB0LCBuKSA6IGwoZSwgdCwgbikpOyByZXR1cm4gaSA9IG51bGwsIHIgfV07IHMgPCByOyBzKyspaWYgKHQgPSBiLnJlbGF0aXZlW2Vbc10udHlwZV0pIGMgPSBbYmUod2UoYyksIHQpXTsgZWxzZSB7IGlmICgodCA9IGIuZmlsdGVyW2Vbc10udHlwZV0uYXBwbHkobnVsbCwgZVtzXS5tYXRjaGVzKSlba10pIHsgZm9yIChuID0gKytzOyBuIDwgcjsgbisrKWlmIChiLnJlbGF0aXZlW2Vbbl0udHlwZV0pIGJyZWFrOyByZXR1cm4gQ2UoMSA8IHMgJiYgd2UoYyksIDEgPCBzICYmIHhlKGUuc2xpY2UoMCwgcyAtIDEpLmNvbmNhdCh7IHZhbHVlOiBcIiBcIiA9PT0gZVtzIC0gMl0udHlwZSA/IFwiKlwiIDogXCJcIiB9KSkucmVwbGFjZShCLCBcIiQxXCIpLCB0LCBzIDwgbiAmJiBFZShlLnNsaWNlKHMsIG4pKSwgbiA8IHIgJiYgRWUoZSA9IGUuc2xpY2UobikpLCBuIDwgciAmJiB4ZShlKSkgfSBjLnB1c2godCkgfSByZXR1cm4gd2UoYykgfSByZXR1cm4gbWUucHJvdG90eXBlID0gYi5maWx0ZXJzID0gYi5wc2V1ZG9zLCBiLnNldEZpbHRlcnMgPSBuZXcgbWUsIGggPSBzZS50b2tlbml6ZSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByLCBpLCBvLCBhLCBzLCB1LCBsID0geFtlICsgXCIgXCJdOyBpZiAobCkgcmV0dXJuIHQgPyAwIDogbC5zbGljZSgwKTsgYSA9IGUsIHMgPSBbXSwgdSA9IGIucHJlRmlsdGVyOyB3aGlsZSAoYSkgeyBmb3IgKG8gaW4gbiAmJiAhKHIgPSBfLmV4ZWMoYSkpIHx8IChyICYmIChhID0gYS5zbGljZShyWzBdLmxlbmd0aCkgfHwgYSksIHMucHVzaChpID0gW10pKSwgbiA9ICExLCAociA9IHouZXhlYyhhKSkgJiYgKG4gPSByLnNoaWZ0KCksIGkucHVzaCh7IHZhbHVlOiBuLCB0eXBlOiByWzBdLnJlcGxhY2UoQiwgXCIgXCIpIH0pLCBhID0gYS5zbGljZShuLmxlbmd0aCkpLCBiLmZpbHRlcikgIShyID0gR1tvXS5leGVjKGEpKSB8fCB1W29dICYmICEociA9IHVbb10ocikpIHx8IChuID0gci5zaGlmdCgpLCBpLnB1c2goeyB2YWx1ZTogbiwgdHlwZTogbywgbWF0Y2hlczogciB9KSwgYSA9IGEuc2xpY2Uobi5sZW5ndGgpKTsgaWYgKCFuKSBicmVhayB9IHJldHVybiB0ID8gYS5sZW5ndGggOiBhID8gc2UuZXJyb3IoZSkgOiB4KGUsIHMpLnNsaWNlKDApIH0sIGYgPSBzZS5jb21waWxlID0gZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHYsIHksIG0sIHgsIHIsIGkgPSBbXSwgbyA9IFtdLCBhID0gTltlICsgXCIgXCJdOyBpZiAoIWEpIHsgdCB8fCAodCA9IGgoZSkpLCBuID0gdC5sZW5ndGg7IHdoaWxlIChuLS0pIChhID0gRWUodFtuXSkpW2tdID8gaS5wdXNoKGEpIDogby5wdXNoKGEpOyAoYSA9IE4oZSwgKHYgPSBvLCBtID0gMCA8ICh5ID0gaSkubGVuZ3RoLCB4ID0gMCA8IHYubGVuZ3RoLCByID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIsIGkpIHsgdmFyIG8sIGEsIHMsIHUgPSAwLCBsID0gXCIwXCIsIGMgPSBlICYmIFtdLCBmID0gW10sIHAgPSB3LCBkID0gZSB8fCB4ICYmIGIuZmluZC5UQUcoXCIqXCIsIGkpLCBoID0gUyArPSBudWxsID09IHAgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAuMSwgZyA9IGQubGVuZ3RoOyBmb3IgKGkgJiYgKHcgPSB0ID09PSBDIHx8IHQgfHwgaSk7IGwgIT09IGcgJiYgbnVsbCAhPSAobyA9IGRbbF0pOyBsKyspIHsgaWYgKHggJiYgbykgeyBhID0gMCwgdCB8fCBvLm93bmVyRG9jdW1lbnQgPT09IEMgfHwgKFQobyksIG4gPSAhRSk7IHdoaWxlIChzID0gdlthKytdKSBpZiAocyhvLCB0IHx8IEMsIG4pKSB7IHIucHVzaChvKTsgYnJlYWsgfSBpICYmIChTID0gaCkgfSBtICYmICgobyA9ICFzICYmIG8pICYmIHUtLSAsIGUgJiYgYy5wdXNoKG8pKSB9IGlmICh1ICs9IGwsIG0gJiYgbCAhPT0gdSkgeyBhID0gMDsgd2hpbGUgKHMgPSB5W2ErK10pIHMoYywgZiwgdCwgbik7IGlmIChlKSB7IGlmICgwIDwgdSkgd2hpbGUgKGwtLSkgY1tsXSB8fCBmW2xdIHx8IChmW2xdID0gcS5jYWxsKHIpKTsgZiA9IFRlKGYpIH0gSC5hcHBseShyLCBmKSwgaSAmJiAhZSAmJiAwIDwgZi5sZW5ndGggJiYgMSA8IHUgKyB5Lmxlbmd0aCAmJiBzZS51bmlxdWVTb3J0KHIpIH0gcmV0dXJuIGkgJiYgKFMgPSBoLCB3ID0gcCksIGMgfSwgbSA/IGxlKHIpIDogcikpKS5zZWxlY3RvciA9IGUgfSByZXR1cm4gYSB9LCBnID0gc2Uuc2VsZWN0ID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEsIHMsIHUsIGwgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUgJiYgZSwgYyA9ICFyICYmIGgoZSA9IGwuc2VsZWN0b3IgfHwgZSk7IGlmIChuID0gbiB8fCBbXSwgMSA9PT0gYy5sZW5ndGgpIHsgaWYgKDIgPCAobyA9IGNbMF0gPSBjWzBdLnNsaWNlKDApKS5sZW5ndGggJiYgXCJJRFwiID09PSAoYSA9IG9bMF0pLnR5cGUgJiYgOSA9PT0gdC5ub2RlVHlwZSAmJiBFICYmIGIucmVsYXRpdmVbb1sxXS50eXBlXSkgeyBpZiAoISh0ID0gKGIuZmluZC5JRChhLm1hdGNoZXNbMF0ucmVwbGFjZSh0ZSwgbmUpLCB0KSB8fCBbXSlbMF0pKSByZXR1cm4gbjsgbCAmJiAodCA9IHQucGFyZW50Tm9kZSksIGUgPSBlLnNsaWNlKG8uc2hpZnQoKS52YWx1ZS5sZW5ndGgpIH0gaSA9IEcubmVlZHNDb250ZXh0LnRlc3QoZSkgPyAwIDogby5sZW5ndGg7IHdoaWxlIChpLS0pIHsgaWYgKGEgPSBvW2ldLCBiLnJlbGF0aXZlW3MgPSBhLnR5cGVdKSBicmVhazsgaWYgKCh1ID0gYi5maW5kW3NdKSAmJiAociA9IHUoYS5tYXRjaGVzWzBdLnJlcGxhY2UodGUsIG5lKSwgZWUudGVzdChvWzBdLnR5cGUpICYmIHllKHQucGFyZW50Tm9kZSkgfHwgdCkpKSB7IGlmIChvLnNwbGljZShpLCAxKSwgIShlID0gci5sZW5ndGggJiYgeGUobykpKSByZXR1cm4gSC5hcHBseShuLCByKSwgbjsgYnJlYWsgfSB9IH0gcmV0dXJuIChsIHx8IGYoZSwgYykpKHIsIHQsICFFLCBuLCAhdCB8fCBlZS50ZXN0KGUpICYmIHllKHQucGFyZW50Tm9kZSkgfHwgdCksIG4gfSwgZC5zb3J0U3RhYmxlID0gay5zcGxpdChcIlwiKS5zb3J0KEQpLmpvaW4oXCJcIikgPT09IGssIGQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhbCwgVCgpLCBkLnNvcnREZXRhY2hlZCA9IGNlKGZ1bmN0aW9uIChlKSB7IHJldHVybiAxICYgZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihDLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSkgfSksIGNlKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiLCBcIiNcIiA9PT0gZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgfSkgfHwgZmUoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uIChlLCB0LCBuKSB7IGlmICghbikgcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsIFwidHlwZVwiID09PSB0LnRvTG93ZXJDYXNlKCkgPyAxIDogMikgfSksIGQuYXR0cmlidXRlcyAmJiBjZShmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCIsIGUuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlwiKSwgXCJcIiA9PT0gZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpIH0pIHx8IGZlKFwidmFsdWVcIiwgZnVuY3Rpb24gKGUsIHQsIG4pIHsgaWYgKCFuICYmIFwiaW5wdXRcIiA9PT0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gZS5kZWZhdWx0VmFsdWUgfSksIGNlKGZ1bmN0aW9uIChlKSB7IHJldHVybiBudWxsID09IGUuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgfSkgfHwgZmUoUiwgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHI7IGlmICghbikgcmV0dXJuICEwID09PSBlW3RdID8gdC50b0xvd2VyQ2FzZSgpIDogKHIgPSBlLmdldEF0dHJpYnV0ZU5vZGUodCkpICYmIHIuc3BlY2lmaWVkID8gci52YWx1ZSA6IG51bGwgfSksIHNlIH0oQyk7IGsuZmluZCA9IGgsIGsuZXhwciA9IGguc2VsZWN0b3JzLCBrLmV4cHJbXCI6XCJdID0gay5leHByLnBzZXVkb3MsIGsudW5pcXVlU29ydCA9IGsudW5pcXVlID0gaC51bmlxdWVTb3J0LCBrLnRleHQgPSBoLmdldFRleHQsIGsuaXNYTUxEb2MgPSBoLmlzWE1MLCBrLmNvbnRhaW5zID0gaC5jb250YWlucywgay5lc2NhcGVTZWxlY3RvciA9IGguZXNjYXBlOyB2YXIgVCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByID0gW10sIGkgPSB2b2lkIDAgIT09IG47IHdoaWxlICgoZSA9IGVbdF0pICYmIDkgIT09IGUubm9kZVR5cGUpIGlmICgxID09PSBlLm5vZGVUeXBlKSB7IGlmIChpICYmIGsoZSkuaXMobikpIGJyZWFrOyByLnB1c2goZSkgfSByZXR1cm4gciB9LCBTID0gZnVuY3Rpb24gKGUsIHQpIHsgZm9yICh2YXIgbiA9IFtdOyBlOyBlID0gZS5uZXh0U2libGluZykxID09PSBlLm5vZGVUeXBlICYmIGUgIT09IHQgJiYgbi5wdXNoKGUpOyByZXR1cm4gbiB9LCBOID0gay5leHByLm1hdGNoLm5lZWRzQ29udGV4dDsgZnVuY3Rpb24gQShlLCB0KSB7IHJldHVybiBlLm5vZGVOYW1lICYmIGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdC50b0xvd2VyQ2FzZSgpIH0gdmFyIEQgPSAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaTsgZnVuY3Rpb24gaihlLCBuLCByKSB7IHJldHVybiBtKG4pID8gay5ncmVwKGUsIGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiAhIW4uY2FsbChlLCB0LCBlKSAhPT0gciB9KSA6IG4ubm9kZVR5cGUgPyBrLmdyZXAoZSwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPT09IG4gIT09IHIgfSkgOiBcInN0cmluZ1wiICE9IHR5cGVvZiBuID8gay5ncmVwKGUsIGZ1bmN0aW9uIChlKSB7IHJldHVybiAtMSA8IGkuY2FsbChuLCBlKSAhPT0gciB9KSA6IGsuZmlsdGVyKG4sIGUsIHIpIH0gay5maWx0ZXIgPSBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciA9IHRbMF07IHJldHVybiBuICYmIChlID0gXCI6bm90KFwiICsgZSArIFwiKVwiKSwgMSA9PT0gdC5sZW5ndGggJiYgMSA9PT0gci5ub2RlVHlwZSA/IGsuZmluZC5tYXRjaGVzU2VsZWN0b3IociwgZSkgPyBbcl0gOiBbXSA6IGsuZmluZC5tYXRjaGVzKGUsIGsuZ3JlcCh0LCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gMSA9PT0gZS5ub2RlVHlwZSB9KSkgfSwgay5mbi5leHRlbmQoeyBmaW5kOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCwgbiwgciA9IHRoaXMubGVuZ3RoLCBpID0gdGhpczsgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIGUpIHJldHVybiB0aGlzLnB1c2hTdGFjayhrKGUpLmZpbHRlcihmdW5jdGlvbiAoKSB7IGZvciAodCA9IDA7IHQgPCByOyB0KyspaWYgKGsuY29udGFpbnMoaVt0XSwgdGhpcykpIHJldHVybiAhMCB9KSk7IGZvciAobiA9IHRoaXMucHVzaFN0YWNrKFtdKSwgdCA9IDA7IHQgPCByOyB0Kyspay5maW5kKGUsIGlbdF0sIG4pOyByZXR1cm4gMSA8IHIgPyBrLnVuaXF1ZVNvcnQobikgOiBuIH0sIGZpbHRlcjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcywgZSB8fCBbXSwgITEpKSB9LCBub3Q6IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzLnB1c2hTdGFjayhqKHRoaXMsIGUgfHwgW10sICEwKSkgfSwgaXM6IGZ1bmN0aW9uIChlKSB7IHJldHVybiAhIWoodGhpcywgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiBOLnRlc3QoZSkgPyBrKGUpIDogZSB8fCBbXSwgITEpLmxlbmd0aCB9IH0pOyB2YXIgcSwgTCA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvOyAoay5mbi5pbml0ID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGk7IGlmICghZSkgcmV0dXJuIHRoaXM7IGlmIChuID0gbiB8fCBxLCBcInN0cmluZ1wiID09IHR5cGVvZiBlKSB7IGlmICghKHIgPSBcIjxcIiA9PT0gZVswXSAmJiBcIj5cIiA9PT0gZVtlLmxlbmd0aCAtIDFdICYmIDMgPD0gZS5sZW5ndGggPyBbbnVsbCwgZSwgbnVsbF0gOiBMLmV4ZWMoZSkpIHx8ICFyWzFdICYmIHQpIHJldHVybiAhdCB8fCB0LmpxdWVyeSA/ICh0IHx8IG4pLmZpbmQoZSkgOiB0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7IGlmIChyWzFdKSB7IGlmICh0ID0gdCBpbnN0YW5jZW9mIGsgPyB0WzBdIDogdCwgay5tZXJnZSh0aGlzLCBrLnBhcnNlSFRNTChyWzFdLCB0ICYmIHQubm9kZVR5cGUgPyB0Lm93bmVyRG9jdW1lbnQgfHwgdCA6IEUsICEwKSksIEQudGVzdChyWzFdKSAmJiBrLmlzUGxhaW5PYmplY3QodCkpIGZvciAociBpbiB0KSBtKHRoaXNbcl0pID8gdGhpc1tyXSh0W3JdKSA6IHRoaXMuYXR0cihyLCB0W3JdKTsgcmV0dXJuIHRoaXMgfSByZXR1cm4gKGkgPSBFLmdldEVsZW1lbnRCeUlkKHJbMl0pKSAmJiAodGhpc1swXSA9IGksIHRoaXMubGVuZ3RoID0gMSksIHRoaXMgfSByZXR1cm4gZS5ub2RlVHlwZSA/ICh0aGlzWzBdID0gZSwgdGhpcy5sZW5ndGggPSAxLCB0aGlzKSA6IG0oZSkgPyB2b2lkIDAgIT09IG4ucmVhZHkgPyBuLnJlYWR5KGUpIDogZShrKSA6IGsubWFrZUFycmF5KGUsIHRoaXMpIH0pLnByb3RvdHlwZSA9IGsuZm4sIHEgPSBrKEUpOyB2YXIgSCA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLCBPID0geyBjaGlsZHJlbjogITAsIGNvbnRlbnRzOiAhMCwgbmV4dDogITAsIHByZXY6ICEwIH07IGZ1bmN0aW9uIFAoZSwgdCkgeyB3aGlsZSAoKGUgPSBlW3RdKSAmJiAxICE9PSBlLm5vZGVUeXBlKTsgcmV0dXJuIGUgfSBrLmZuLmV4dGVuZCh7IGhhczogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBrKGUsIHRoaXMpLCBuID0gdC5sZW5ndGg7IHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAoKSB7IGZvciAodmFyIGUgPSAwOyBlIDwgbjsgZSsrKWlmIChrLmNvbnRhaW5zKHRoaXMsIHRbZV0pKSByZXR1cm4gITAgfSkgfSwgY2xvc2VzdDogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSAwLCBpID0gdGhpcy5sZW5ndGgsIG8gPSBbXSwgYSA9IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUgJiYgayhlKTsgaWYgKCFOLnRlc3QoZSkpIGZvciAoOyByIDwgaTsgcisrKWZvciAobiA9IHRoaXNbcl07IG4gJiYgbiAhPT0gdDsgbiA9IG4ucGFyZW50Tm9kZSlpZiAobi5ub2RlVHlwZSA8IDExICYmIChhID8gLTEgPCBhLmluZGV4KG4pIDogMSA9PT0gbi5ub2RlVHlwZSAmJiBrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sIGUpKSkgeyBvLnB1c2gobik7IGJyZWFrIH0gcmV0dXJuIHRoaXMucHVzaFN0YWNrKDEgPCBvLmxlbmd0aCA/IGsudW5pcXVlU29ydChvKSA6IG8pIH0sIGluZGV4OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUgPyBpLmNhbGwoayhlKSwgdGhpc1swXSkgOiBpLmNhbGwodGhpcywgZS5qcXVlcnkgPyBlWzBdIDogZSkgOiB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTEgfSwgYWRkOiBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gdGhpcy5wdXNoU3RhY2soay51bmlxdWVTb3J0KGsubWVyZ2UodGhpcy5nZXQoKSwgayhlLCB0KSkpKSB9LCBhZGRCYWNrOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5hZGQobnVsbCA9PSBlID8gdGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSkgfSB9KSwgay5lYWNoKHsgcGFyZW50OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUucGFyZW50Tm9kZTsgcmV0dXJuIHQgJiYgMTEgIT09IHQubm9kZVR5cGUgPyB0IDogbnVsbCB9LCBwYXJlbnRzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gVChlLCBcInBhcmVudE5vZGVcIikgfSwgcGFyZW50c1VudGlsOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gVChlLCBcInBhcmVudE5vZGVcIiwgbikgfSwgbmV4dDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFAoZSwgXCJuZXh0U2libGluZ1wiKSB9LCBwcmV2OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gUChlLCBcInByZXZpb3VzU2libGluZ1wiKSB9LCBuZXh0QWxsOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gVChlLCBcIm5leHRTaWJsaW5nXCIpIH0sIHByZXZBbGw6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBUKGUsIFwicHJldmlvdXNTaWJsaW5nXCIpIH0sIG5leHRVbnRpbDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIFQoZSwgXCJuZXh0U2libGluZ1wiLCBuKSB9LCBwcmV2VW50aWw6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBUKGUsIFwicHJldmlvdXNTaWJsaW5nXCIsIG4pIH0sIHNpYmxpbmdzOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gUygoZS5wYXJlbnROb2RlIHx8IHt9KS5maXJzdENoaWxkLCBlKSB9LCBjaGlsZHJlbjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFMoZS5maXJzdENoaWxkKSB9LCBjb250ZW50czogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGUuY29udGVudERvY3VtZW50ID8gZS5jb250ZW50RG9jdW1lbnQgOiAoQShlLCBcInRlbXBsYXRlXCIpICYmIChlID0gZS5jb250ZW50IHx8IGUpLCBrLm1lcmdlKFtdLCBlLmNoaWxkTm9kZXMpKSB9IH0sIGZ1bmN0aW9uIChyLCBpKSB7IGsuZm5bcl0gPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGsubWFwKHRoaXMsIGksIGUpOyByZXR1cm4gXCJVbnRpbFwiICE9PSByLnNsaWNlKC01KSAmJiAodCA9IGUpLCB0ICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKG4gPSBrLmZpbHRlcih0LCBuKSksIDEgPCB0aGlzLmxlbmd0aCAmJiAoT1tyXSB8fCBrLnVuaXF1ZVNvcnQobiksIEgudGVzdChyKSAmJiBuLnJldmVyc2UoKSksIHRoaXMucHVzaFN0YWNrKG4pIH0gfSk7IHZhciBSID0gL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nOyBmdW5jdGlvbiBNKGUpIHsgcmV0dXJuIGUgfSBmdW5jdGlvbiBJKGUpIHsgdGhyb3cgZSB9IGZ1bmN0aW9uIFcoZSwgdCwgbiwgcikgeyB2YXIgaTsgdHJ5IHsgZSAmJiBtKGkgPSBlLnByb21pc2UpID8gaS5jYWxsKGUpLmRvbmUodCkuZmFpbChuKSA6IGUgJiYgbShpID0gZS50aGVuKSA/IGkuY2FsbChlLCB0LCBuKSA6IHQuYXBwbHkodm9pZCAwLCBbZV0uc2xpY2UocikpIH0gY2F0Y2ggKGUpIHsgbi5hcHBseSh2b2lkIDAsIFtlXSkgfSB9IGsuQ2FsbGJhY2tzID0gZnVuY3Rpb24gKHIpIHsgdmFyIGUsIG47IHIgPSBcInN0cmluZ1wiID09IHR5cGVvZiByID8gKGUgPSByLCBuID0ge30sIGsuZWFjaChlLm1hdGNoKFIpIHx8IFtdLCBmdW5jdGlvbiAoZSwgdCkgeyBuW3RdID0gITAgfSksIG4pIDogay5leHRlbmQoe30sIHIpOyB2YXIgaSwgdCwgbywgYSwgcyA9IFtdLCB1ID0gW10sIGwgPSAtMSwgYyA9IGZ1bmN0aW9uICgpIHsgZm9yIChhID0gYSB8fCByLm9uY2UsIG8gPSBpID0gITA7IHUubGVuZ3RoOyBsID0gLTEpIHsgdCA9IHUuc2hpZnQoKTsgd2hpbGUgKCsrbCA8IHMubGVuZ3RoKSAhMSA9PT0gc1tsXS5hcHBseSh0WzBdLCB0WzFdKSAmJiByLnN0b3BPbkZhbHNlICYmIChsID0gcy5sZW5ndGgsIHQgPSAhMSkgfSByLm1lbW9yeSB8fCAodCA9ICExKSwgaSA9ICExLCBhICYmIChzID0gdCA/IFtdIDogXCJcIikgfSwgZiA9IHsgYWRkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzICYmICh0ICYmICFpICYmIChsID0gcy5sZW5ndGggLSAxLCB1LnB1c2godCkpLCBmdW5jdGlvbiBuKGUpIHsgay5lYWNoKGUsIGZ1bmN0aW9uIChlLCB0KSB7IG0odCkgPyByLnVuaXF1ZSAmJiBmLmhhcyh0KSB8fCBzLnB1c2godCkgOiB0ICYmIHQubGVuZ3RoICYmIFwic3RyaW5nXCIgIT09IHcodCkgJiYgbih0KSB9KSB9KGFyZ3VtZW50cyksIHQgJiYgIWkgJiYgYygpKSwgdGhpcyB9LCByZW1vdmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGsuZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuOyB3aGlsZSAoLTEgPCAobiA9IGsuaW5BcnJheSh0LCBzLCBuKSkpIHMuc3BsaWNlKG4sIDEpLCBuIDw9IGwgJiYgbC0tIH0pLCB0aGlzIH0sIGhhczogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPyAtMSA8IGsuaW5BcnJheShlLCBzKSA6IDAgPCBzLmxlbmd0aCB9LCBlbXB0eTogZnVuY3Rpb24gKCkgeyByZXR1cm4gcyAmJiAocyA9IFtdKSwgdGhpcyB9LCBkaXNhYmxlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBhID0gdSA9IFtdLCBzID0gdCA9IFwiXCIsIHRoaXMgfSwgZGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICFzIH0sIGxvY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGEgPSB1ID0gW10sIHQgfHwgaSB8fCAocyA9IHQgPSBcIlwiKSwgdGhpcyB9LCBsb2NrZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhYSB9LCBmaXJlV2l0aDogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGEgfHwgKHQgPSBbZSwgKHQgPSB0IHx8IFtdKS5zbGljZSA/IHQuc2xpY2UoKSA6IHRdLCB1LnB1c2godCksIGkgfHwgYygpKSwgdGhpcyB9LCBmaXJlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmLmZpcmVXaXRoKHRoaXMsIGFyZ3VtZW50cyksIHRoaXMgfSwgZmlyZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhbyB9IH07IHJldHVybiBmIH0sIGsuZXh0ZW5kKHsgRGVmZXJyZWQ6IGZ1bmN0aW9uIChlKSB7IHZhciBvID0gW1tcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGsuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLCBrLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwgMl0sIFtcInJlc29sdmVcIiwgXCJkb25lXCIsIGsuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIGsuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksIDAsIFwicmVzb2x2ZWRcIl0sIFtcInJlamVjdFwiLCBcImZhaWxcIiwgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgMSwgXCJyZWplY3RlZFwiXV0sIGkgPSBcInBlbmRpbmdcIiwgYSA9IHsgc3RhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGkgfSwgYWx3YXlzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBzLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksIHRoaXMgfSwgXCJjYXRjaFwiOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gYS50aGVuKG51bGwsIGUpIH0sIHBpcGU6IGZ1bmN0aW9uICgpIHsgdmFyIGkgPSBhcmd1bWVudHM7IHJldHVybiBrLkRlZmVycmVkKGZ1bmN0aW9uIChyKSB7IGsuZWFjaChvLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IG0oaVt0WzRdXSkgJiYgaVt0WzRdXTsgc1t0WzFdXShmdW5jdGlvbiAoKSB7IHZhciBlID0gbiAmJiBuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IGUgJiYgbShlLnByb21pc2UpID8gZS5wcm9taXNlKCkucHJvZ3Jlc3Moci5ub3RpZnkpLmRvbmUoci5yZXNvbHZlKS5mYWlsKHIucmVqZWN0KSA6IHJbdFswXSArIFwiV2l0aFwiXSh0aGlzLCBuID8gW2VdIDogYXJndW1lbnRzKSB9KSB9KSwgaSA9IG51bGwgfSkucHJvbWlzZSgpIH0sIHRoZW46IGZ1bmN0aW9uICh0LCBuLCByKSB7IHZhciB1ID0gMDsgZnVuY3Rpb24gbChpLCBvLCBhLCBzKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBuID0gdGhpcywgciA9IGFyZ3VtZW50cywgZSA9IGZ1bmN0aW9uICgpIHsgdmFyIGUsIHQ7IGlmICghKGkgPCB1KSkgeyBpZiAoKGUgPSBhLmFwcGx5KG4sIHIpKSA9PT0gby5wcm9taXNlKCkpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7IHQgPSBlICYmIChcIm9iamVjdFwiID09IHR5cGVvZiBlIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkgJiYgZS50aGVuLCBtKHQpID8gcyA/IHQuY2FsbChlLCBsKHUsIG8sIE0sIHMpLCBsKHUsIG8sIEksIHMpKSA6ICh1KysgLCB0LmNhbGwoZSwgbCh1LCBvLCBNLCBzKSwgbCh1LCBvLCBJLCBzKSwgbCh1LCBvLCBNLCBvLm5vdGlmeVdpdGgpKSkgOiAoYSAhPT0gTSAmJiAobiA9IHZvaWQgMCwgciA9IFtlXSksIChzIHx8IG8ucmVzb2x2ZVdpdGgpKG4sIHIpKSB9IH0sIHQgPSBzID8gZSA6IGZ1bmN0aW9uICgpIHsgdHJ5IHsgZSgpIH0gY2F0Y2ggKGUpIHsgay5EZWZlcnJlZC5leGNlcHRpb25Ib29rICYmIGsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLCB0LnN0YWNrVHJhY2UpLCB1IDw9IGkgKyAxICYmIChhICE9PSBJICYmIChuID0gdm9pZCAwLCByID0gW2VdKSwgby5yZWplY3RXaXRoKG4sIHIpKSB9IH07IGkgPyB0KCkgOiAoay5EZWZlcnJlZC5nZXRTdGFja0hvb2sgJiYgKHQuc3RhY2tUcmFjZSA9IGsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLCBDLnNldFRpbWVvdXQodCkpIH0gfSByZXR1cm4gay5EZWZlcnJlZChmdW5jdGlvbiAoZSkgeyBvWzBdWzNdLmFkZChsKDAsIGUsIG0ocikgPyByIDogTSwgZS5ub3RpZnlXaXRoKSksIG9bMV1bM10uYWRkKGwoMCwgZSwgbSh0KSA/IHQgOiBNKSksIG9bMl1bM10uYWRkKGwoMCwgZSwgbShuKSA/IG4gOiBJKSkgfSkucHJvbWlzZSgpIH0sIHByb21pc2U6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBudWxsICE9IGUgPyBrLmV4dGVuZChlLCBhKSA6IGEgfSB9LCBzID0ge307IHJldHVybiBrLmVhY2gobywgZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0WzJdLCByID0gdFs1XTsgYVt0WzFdXSA9IG4uYWRkLCByICYmIG4uYWRkKGZ1bmN0aW9uICgpIHsgaSA9IHIgfSwgb1szIC0gZV1bMl0uZGlzYWJsZSwgb1szIC0gZV1bM10uZGlzYWJsZSwgb1swXVsyXS5sb2NrLCBvWzBdWzNdLmxvY2spLCBuLmFkZCh0WzNdLmZpcmUpLCBzW3RbMF1dID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc1t0WzBdICsgXCJXaXRoXCJdKHRoaXMgPT09IHMgPyB2b2lkIDAgOiB0aGlzLCBhcmd1bWVudHMpLCB0aGlzIH0sIHNbdFswXSArIFwiV2l0aFwiXSA9IG4uZmlyZVdpdGggfSksIGEucHJvbWlzZShzKSwgZSAmJiBlLmNhbGwocywgcyksIHMgfSwgd2hlbjogZnVuY3Rpb24gKGUpIHsgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoLCB0ID0gbiwgciA9IEFycmF5KHQpLCBpID0gcy5jYWxsKGFyZ3VtZW50cyksIG8gPSBrLkRlZmVycmVkKCksIGEgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gZnVuY3Rpb24gKGUpIHsgclt0XSA9IHRoaXMsIGlbdF0gPSAxIDwgYXJndW1lbnRzLmxlbmd0aCA/IHMuY2FsbChhcmd1bWVudHMpIDogZSwgLS1uIHx8IG8ucmVzb2x2ZVdpdGgociwgaSkgfSB9OyBpZiAobiA8PSAxICYmIChXKGUsIG8uZG9uZShhKHQpKS5yZXNvbHZlLCBvLnJlamVjdCwgIW4pLCBcInBlbmRpbmdcIiA9PT0gby5zdGF0ZSgpIHx8IG0oaVt0XSAmJiBpW3RdLnRoZW4pKSkgcmV0dXJuIG8udGhlbigpOyB3aGlsZSAodC0tKSBXKGlbdF0sIGEodCksIG8ucmVqZWN0KTsgcmV0dXJuIG8ucHJvbWlzZSgpIH0gfSk7IHZhciAkID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87IGsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uIChlLCB0KSB7IEMuY29uc29sZSAmJiBDLmNvbnNvbGUud2FybiAmJiBlICYmICQudGVzdChlLm5hbWUpICYmIEMuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlLm1lc3NhZ2UsIGUuc3RhY2ssIHQpIH0sIGsucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiAoZSkgeyBDLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aHJvdyBlIH0pIH07IHZhciBGID0gay5EZWZlcnJlZCgpOyBmdW5jdGlvbiBCKCkgeyBFLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIEIpLCBDLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIEIpLCBrLnJlYWR5KCkgfSBrLmZuLnJlYWR5ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEYudGhlbihlKVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7IGsucmVhZHlFeGNlcHRpb24oZSkgfSksIHRoaXMgfSwgay5leHRlbmQoeyBpc1JlYWR5OiAhMSwgcmVhZHlXYWl0OiAxLCByZWFkeTogZnVuY3Rpb24gKGUpIHsgKCEwID09PSBlID8gLS1rLnJlYWR5V2FpdCA6IGsuaXNSZWFkeSkgfHwgKGsuaXNSZWFkeSA9ICEwKSAhPT0gZSAmJiAwIDwgLS1rLnJlYWR5V2FpdCB8fCBGLnJlc29sdmVXaXRoKEUsIFtrXSkgfSB9KSwgay5yZWFkeS50aGVuID0gRi50aGVuLCBcImNvbXBsZXRlXCIgPT09IEUucmVhZHlTdGF0ZSB8fCBcImxvYWRpbmdcIiAhPT0gRS5yZWFkeVN0YXRlICYmICFFLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCA/IEMuc2V0VGltZW91dChrLnJlYWR5KSA6IChFLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIEIpLCBDLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIEIpKTsgdmFyIF8gPSBmdW5jdGlvbiAoZSwgdCwgbiwgciwgaSwgbywgYSkgeyB2YXIgcyA9IDAsIHUgPSBlLmxlbmd0aCwgbCA9IG51bGwgPT0gbjsgaWYgKFwib2JqZWN0XCIgPT09IHcobikpIGZvciAocyBpbiBpID0gITAsIG4pIF8oZSwgdCwgcywgbltzXSwgITAsIG8sIGEpOyBlbHNlIGlmICh2b2lkIDAgIT09IHIgJiYgKGkgPSAhMCwgbShyKSB8fCAoYSA9ICEwKSwgbCAmJiAoYSA/ICh0LmNhbGwoZSwgciksIHQgPSBudWxsKSA6IChsID0gdCwgdCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBsLmNhbGwoayhlKSwgbikgfSkpLCB0KSkgZm9yICg7IHMgPCB1OyBzKyspdChlW3NdLCBuLCBhID8gciA6IHIuY2FsbChlW3NdLCBzLCB0KGVbc10sIG4pKSk7IHJldHVybiBpID8gZSA6IGwgPyB0LmNhbGwoZSkgOiB1ID8gdChlWzBdLCBuKSA6IG8gfSwgeiA9IC9eLW1zLS8sIFUgPSAvLShbYS16XSkvZzsgZnVuY3Rpb24gWChlLCB0KSB7IHJldHVybiB0LnRvVXBwZXJDYXNlKCkgfSBmdW5jdGlvbiBWKGUpIHsgcmV0dXJuIGUucmVwbGFjZSh6LCBcIm1zLVwiKS5yZXBsYWNlKFUsIFgpIH0gdmFyIEcgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gMSA9PT0gZS5ub2RlVHlwZSB8fCA5ID09PSBlLm5vZGVUeXBlIHx8ICErZS5ub2RlVHlwZSB9OyBmdW5jdGlvbiBZKCkgeyB0aGlzLmV4cGFuZG8gPSBrLmV4cGFuZG8gKyBZLnVpZCsrIH0gWS51aWQgPSAxLCBZLnByb3RvdHlwZSA9IHsgY2FjaGU6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZVt0aGlzLmV4cGFuZG9dOyByZXR1cm4gdCB8fCAodCA9IHt9LCBHKGUpICYmIChlLm5vZGVUeXBlID8gZVt0aGlzLmV4cGFuZG9dID0gdCA6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0aGlzLmV4cGFuZG8sIHsgdmFsdWU6IHQsIGNvbmZpZ3VyYWJsZTogITAgfSkpKSwgdCB9LCBzZXQ6IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpID0gdGhpcy5jYWNoZShlKTsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQpIGlbVih0KV0gPSBuOyBlbHNlIGZvciAociBpbiB0KSBpW1YocildID0gdFtyXTsgcmV0dXJuIGkgfSwgZ2V0OiBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gdm9pZCAwID09PSB0ID8gdGhpcy5jYWNoZShlKSA6IGVbdGhpcy5leHBhbmRvXSAmJiBlW3RoaXMuZXhwYW5kb11bVih0KV0gfSwgYWNjZXNzOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gdm9pZCAwID09PSB0IHx8IHQgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiB2b2lkIDAgPT09IG4gPyB0aGlzLmdldChlLCB0KSA6ICh0aGlzLnNldChlLCB0LCBuKSwgdm9pZCAwICE9PSBuID8gbiA6IHQpIH0sIHJlbW92ZTogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSBlW3RoaXMuZXhwYW5kb107IGlmICh2b2lkIDAgIT09IHIpIHsgaWYgKHZvaWQgMCAhPT0gdCkgeyBuID0gKHQgPSBBcnJheS5pc0FycmF5KHQpID8gdC5tYXAoVikgOiAodCA9IFYodCkpIGluIHIgPyBbdF0gOiB0Lm1hdGNoKFIpIHx8IFtdKS5sZW5ndGg7IHdoaWxlIChuLS0pIGRlbGV0ZSByW3Rbbl1dIH0gKHZvaWQgMCA9PT0gdCB8fCBrLmlzRW1wdHlPYmplY3QocikpICYmIChlLm5vZGVUeXBlID8gZVt0aGlzLmV4cGFuZG9dID0gdm9pZCAwIDogZGVsZXRlIGVbdGhpcy5leHBhbmRvXSkgfSB9LCBoYXNEYXRhOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGVbdGhpcy5leHBhbmRvXTsgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAhay5pc0VtcHR5T2JqZWN0KHQpIH0gfTsgdmFyIFEgPSBuZXcgWSwgSiA9IG5ldyBZLCBLID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLCBaID0gL1tBLVpdL2c7IGZ1bmN0aW9uIGVlKGUsIHQsIG4pIHsgdmFyIHIsIGk7IGlmICh2b2lkIDAgPT09IG4gJiYgMSA9PT0gZS5ub2RlVHlwZSkgaWYgKHIgPSBcImRhdGEtXCIgKyB0LnJlcGxhY2UoWiwgXCItJCZcIikudG9Mb3dlckNhc2UoKSwgXCJzdHJpbmdcIiA9PSB0eXBlb2YgKG4gPSBlLmdldEF0dHJpYnV0ZShyKSkpIHsgdHJ5IHsgbiA9IFwidHJ1ZVwiID09PSAoaSA9IG4pIHx8IFwiZmFsc2VcIiAhPT0gaSAmJiAoXCJudWxsXCIgPT09IGkgPyBudWxsIDogaSA9PT0gK2kgKyBcIlwiID8gK2kgOiBLLnRlc3QoaSkgPyBKU09OLnBhcnNlKGkpIDogaSkgfSBjYXRjaCAoZSkgeyB9IEouc2V0KGUsIHQsIG4pIH0gZWxzZSBuID0gdm9pZCAwOyByZXR1cm4gbiB9IGsuZXh0ZW5kKHsgaGFzRGF0YTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEouaGFzRGF0YShlKSB8fCBRLmhhc0RhdGEoZSkgfSwgZGF0YTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIEouYWNjZXNzKGUsIHQsIG4pIH0sIHJlbW92ZURhdGE6IGZ1bmN0aW9uIChlLCB0KSB7IEoucmVtb3ZlKGUsIHQpIH0sIF9kYXRhOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gUS5hY2Nlc3MoZSwgdCwgbikgfSwgX3JlbW92ZURhdGE6IGZ1bmN0aW9uIChlLCB0KSB7IFEucmVtb3ZlKGUsIHQpIH0gfSksIGsuZm4uZXh0ZW5kKHsgZGF0YTogZnVuY3Rpb24gKG4sIGUpIHsgdmFyIHQsIHIsIGksIG8gPSB0aGlzWzBdLCBhID0gbyAmJiBvLmF0dHJpYnV0ZXM7IGlmICh2b2lkIDAgPT09IG4pIHsgaWYgKHRoaXMubGVuZ3RoICYmIChpID0gSi5nZXQobyksIDEgPT09IG8ubm9kZVR5cGUgJiYgIVEuZ2V0KG8sIFwiaGFzRGF0YUF0dHJzXCIpKSkgeyB0ID0gYS5sZW5ndGg7IHdoaWxlICh0LS0pIGFbdF0gJiYgMCA9PT0gKHIgPSBhW3RdLm5hbWUpLmluZGV4T2YoXCJkYXRhLVwiKSAmJiAociA9IFYoci5zbGljZSg1KSksIGVlKG8sIHIsIGlbcl0pKTsgUS5zZXQobywgXCJoYXNEYXRhQXR0cnNcIiwgITApIH0gcmV0dXJuIGkgfSByZXR1cm4gXCJvYmplY3RcIiA9PSB0eXBlb2YgbiA/IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7IEouc2V0KHRoaXMsIG4pIH0pIDogXyh0aGlzLCBmdW5jdGlvbiAoZSkgeyB2YXIgdDsgaWYgKG8gJiYgdm9pZCAwID09PSBlKSByZXR1cm4gdm9pZCAwICE9PSAodCA9IEouZ2V0KG8sIG4pKSA/IHQgOiB2b2lkIDAgIT09ICh0ID0gZWUobywgbikpID8gdCA6IHZvaWQgMDsgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgSi5zZXQodGhpcywgbiwgZSkgfSkgfSwgbnVsbCwgZSwgMSA8IGFyZ3VtZW50cy5sZW5ndGgsIG51bGwsICEwKSB9LCByZW1vdmVEYXRhOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgSi5yZW1vdmUodGhpcywgZSkgfSkgfSB9KSwgay5leHRlbmQoeyBxdWV1ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHI7IGlmIChlKSByZXR1cm4gdCA9ICh0IHx8IFwiZnhcIikgKyBcInF1ZXVlXCIsIHIgPSBRLmdldChlLCB0KSwgbiAmJiAoIXIgfHwgQXJyYXkuaXNBcnJheShuKSA/IHIgPSBRLmFjY2VzcyhlLCB0LCBrLm1ha2VBcnJheShuKSkgOiByLnB1c2gobikpLCByIHx8IFtdIH0sIGRlcXVldWU6IGZ1bmN0aW9uIChlLCB0KSB7IHQgPSB0IHx8IFwiZnhcIjsgdmFyIG4gPSBrLnF1ZXVlKGUsIHQpLCByID0gbi5sZW5ndGgsIGkgPSBuLnNoaWZ0KCksIG8gPSBrLl9xdWV1ZUhvb2tzKGUsIHQpOyBcImlucHJvZ3Jlc3NcIiA9PT0gaSAmJiAoaSA9IG4uc2hpZnQoKSwgci0tKSwgaSAmJiAoXCJmeFwiID09PSB0ICYmIG4udW5zaGlmdChcImlucHJvZ3Jlc3NcIiksIGRlbGV0ZSBvLnN0b3AsIGkuY2FsbChlLCBmdW5jdGlvbiAoKSB7IGsuZGVxdWV1ZShlLCB0KSB9LCBvKSksICFyICYmIG8gJiYgby5lbXB0eS5maXJlKCkgfSwgX3F1ZXVlSG9va3M6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdCArIFwicXVldWVIb29rc1wiOyByZXR1cm4gUS5nZXQoZSwgbikgfHwgUS5hY2Nlc3MoZSwgbiwgeyBlbXB0eTogay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24gKCkgeyBRLnJlbW92ZShlLCBbdCArIFwicXVldWVcIiwgbl0pIH0pIH0pIH0gfSksIGsuZm4uZXh0ZW5kKHsgcXVldWU6IGZ1bmN0aW9uICh0LCBuKSB7IHZhciBlID0gMjsgcmV0dXJuIFwic3RyaW5nXCIgIT0gdHlwZW9mIHQgJiYgKG4gPSB0LCB0ID0gXCJmeFwiLCBlLS0pLCBhcmd1bWVudHMubGVuZ3RoIDwgZSA/IGsucXVldWUodGhpc1swXSwgdCkgOiB2b2lkIDAgPT09IG4gPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBrLnF1ZXVlKHRoaXMsIHQsIG4pOyBrLl9xdWV1ZUhvb2tzKHRoaXMsIHQpLCBcImZ4XCIgPT09IHQgJiYgXCJpbnByb2dyZXNzXCIgIT09IGVbMF0gJiYgay5kZXF1ZXVlKHRoaXMsIHQpIH0pIH0sIGRlcXVldWU6IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBrLmRlcXVldWUodGhpcywgZSkgfSkgfSwgY2xlYXJRdWV1ZTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMucXVldWUoZSB8fCBcImZ4XCIsIFtdKSB9LCBwcm9taXNlOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciA9IDEsIGkgPSBrLkRlZmVycmVkKCksIG8gPSB0aGlzLCBhID0gdGhpcy5sZW5ndGgsIHMgPSBmdW5jdGlvbiAoKSB7IC0tciB8fCBpLnJlc29sdmVXaXRoKG8sIFtvXSkgfTsgXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSAmJiAodCA9IGUsIGUgPSB2b2lkIDApLCBlID0gZSB8fCBcImZ4XCI7IHdoaWxlIChhLS0pIChuID0gUS5nZXQob1thXSwgZSArIFwicXVldWVIb29rc1wiKSkgJiYgbi5lbXB0eSAmJiAocisrICwgbi5lbXB0eS5hZGQocykpOyByZXR1cm4gcygpLCBpLnByb21pc2UodCkgfSB9KTsgdmFyIHRlID0gL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLCBuZSA9IG5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiICsgdGUgKyBcIikoW2EteiVdKikkXCIsIFwiaVwiKSwgcmUgPSBbXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIl0sIGllID0gRS5kb2N1bWVudEVsZW1lbnQsIG9lID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGsuY29udGFpbnMoZS5vd25lckRvY3VtZW50LCBlKSB9LCBhZSA9IHsgY29tcG9zZWQ6ICEwIH07IGllLmdldFJvb3ROb2RlICYmIChvZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBrLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCwgZSkgfHwgZS5nZXRSb290Tm9kZShhZSkgPT09IGUub3duZXJEb2N1bWVudCB9KTsgdmFyIHNlID0gZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIFwibm9uZVwiID09PSAoZSA9IHQgfHwgZSkuc3R5bGUuZGlzcGxheSB8fCBcIlwiID09PSBlLnN0eWxlLmRpc3BsYXkgJiYgb2UoZSkgJiYgXCJub25lXCIgPT09IGsuY3NzKGUsIFwiZGlzcGxheVwiKSB9LCB1ZSA9IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBpLCBvLCBhID0ge307IGZvciAobyBpbiB0KSBhW29dID0gZS5zdHlsZVtvXSwgZS5zdHlsZVtvXSA9IHRbb107IGZvciAobyBpbiBpID0gbi5hcHBseShlLCByIHx8IFtdKSwgdCkgZS5zdHlsZVtvXSA9IGFbb107IHJldHVybiBpIH07IGZ1bmN0aW9uIGxlKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEgPSAyMCwgcyA9IHIgPyBmdW5jdGlvbiAoKSB7IHJldHVybiByLmN1cigpIH0gOiBmdW5jdGlvbiAoKSB7IHJldHVybiBrLmNzcyhlLCB0LCBcIlwiKSB9LCB1ID0gcygpLCBsID0gbiAmJiBuWzNdIHx8IChrLmNzc051bWJlclt0XSA/IFwiXCIgOiBcInB4XCIpLCBjID0gZS5ub2RlVHlwZSAmJiAoay5jc3NOdW1iZXJbdF0gfHwgXCJweFwiICE9PSBsICYmICt1KSAmJiBuZS5leGVjKGsuY3NzKGUsIHQpKTsgaWYgKGMgJiYgY1szXSAhPT0gbCkgeyB1IC89IDIsIGwgPSBsIHx8IGNbM10sIGMgPSArdSB8fCAxOyB3aGlsZSAoYS0tKSBrLnN0eWxlKGUsIHQsIGMgKyBsKSwgKDEgLSBvKSAqICgxIC0gKG8gPSBzKCkgLyB1IHx8IC41KSkgPD0gMCAmJiAoYSA9IDApLCBjIC89IG87IGMgKj0gMiwgay5zdHlsZShlLCB0LCBjICsgbCksIG4gPSBuIHx8IFtdIH0gcmV0dXJuIG4gJiYgKGMgPSArYyB8fCArdSB8fCAwLCBpID0gblsxXSA/IGMgKyAoblsxXSArIDEpICogblsyXSA6ICtuWzJdLCByICYmIChyLnVuaXQgPSBsLCByLnN0YXJ0ID0gYywgci5lbmQgPSBpKSksIGkgfSB2YXIgY2UgPSB7fTsgZnVuY3Rpb24gZmUoZSwgdCkgeyBmb3IgKHZhciBuLCByLCBpLCBvLCBhLCBzLCB1LCBsID0gW10sIGMgPSAwLCBmID0gZS5sZW5ndGg7IGMgPCBmOyBjKyspKHIgPSBlW2NdKS5zdHlsZSAmJiAobiA9IHIuc3R5bGUuZGlzcGxheSwgdCA/IChcIm5vbmVcIiA9PT0gbiAmJiAobFtjXSA9IFEuZ2V0KHIsIFwiZGlzcGxheVwiKSB8fCBudWxsLCBsW2NdIHx8IChyLnN0eWxlLmRpc3BsYXkgPSBcIlwiKSksIFwiXCIgPT09IHIuc3R5bGUuZGlzcGxheSAmJiBzZShyKSAmJiAobFtjXSA9ICh1ID0gYSA9IG8gPSB2b2lkIDAsIGEgPSAoaSA9IHIpLm93bmVyRG9jdW1lbnQsIHMgPSBpLm5vZGVOYW1lLCAodSA9IGNlW3NdKSB8fCAobyA9IGEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpLCB1ID0gay5jc3MobywgXCJkaXNwbGF5XCIpLCBvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyksIFwibm9uZVwiID09PSB1ICYmICh1ID0gXCJibG9ja1wiKSwgY2Vbc10gPSB1KSkpKSA6IFwibm9uZVwiICE9PSBuICYmIChsW2NdID0gXCJub25lXCIsIFEuc2V0KHIsIFwiZGlzcGxheVwiLCBuKSkpOyBmb3IgKGMgPSAwOyBjIDwgZjsgYysrKW51bGwgIT0gbFtjXSAmJiAoZVtjXS5zdHlsZS5kaXNwbGF5ID0gbFtjXSk7IHJldHVybiBlIH0gay5mbi5leHRlbmQoeyBzaG93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmZSh0aGlzLCAhMCkgfSwgaGlkZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmUodGhpcykgfSwgdG9nZ2xlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXCJib29sZWFuXCIgPT0gdHlwZW9mIGUgPyBlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKSA6IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7IHNlKHRoaXMpID8gayh0aGlzKS5zaG93KCkgOiBrKHRoaXMpLmhpZGUoKSB9KSB9IH0pOyB2YXIgcGUgPSAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSwgZGUgPSAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2ksIGhlID0gL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSwgZ2UgPSB7IG9wdGlvbjogWzEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiXSwgdGhlYWQ6IFsxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiXSwgY29sOiBbMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sIHRyOiBbMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIl0sIHRkOiBbMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sIF9kZWZhdWx0OiBbMCwgXCJcIiwgXCJcIl0gfTsgZnVuY3Rpb24gdmUoZSwgdCkgeyB2YXIgbjsgcmV0dXJuIG4gPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0IHx8IFwiKlwiKSA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbCA/IGUucXVlcnlTZWxlY3RvckFsbCh0IHx8IFwiKlwiKSA6IFtdLCB2b2lkIDAgPT09IHQgfHwgdCAmJiBBKGUsIHQpID8gay5tZXJnZShbZV0sIG4pIDogbiB9IGZ1bmN0aW9uIHllKGUsIHQpIHsgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgbiA8IHI7IG4rKylRLnNldChlW25dLCBcImdsb2JhbEV2YWxcIiwgIXQgfHwgUS5nZXQodFtuXSwgXCJnbG9iYWxFdmFsXCIpKSB9IGdlLm9wdGdyb3VwID0gZ2Uub3B0aW9uLCBnZS50Ym9keSA9IGdlLnRmb290ID0gZ2UuY29sZ3JvdXAgPSBnZS5jYXB0aW9uID0gZ2UudGhlYWQsIGdlLnRoID0gZ2UudGQ7IHZhciBtZSwgeGUsIGJlID0gLzx8JiM/XFx3KzsvOyBmdW5jdGlvbiB3ZShlLCB0LCBuLCByLCBpKSB7IGZvciAodmFyIG8sIGEsIHMsIHUsIGwsIGMsIGYgPSB0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgcCA9IFtdLCBkID0gMCwgaCA9IGUubGVuZ3RoOyBkIDwgaDsgZCsrKWlmICgobyA9IGVbZF0pIHx8IDAgPT09IG8pIGlmIChcIm9iamVjdFwiID09PSB3KG8pKSBrLm1lcmdlKHAsIG8ubm9kZVR5cGUgPyBbb10gOiBvKTsgZWxzZSBpZiAoYmUudGVzdChvKSkgeyBhID0gYSB8fCBmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksIHMgPSAoZGUuZXhlYyhvKSB8fCBbXCJcIiwgXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksIHUgPSBnZVtzXSB8fCBnZS5fZGVmYXVsdCwgYS5pbm5lckhUTUwgPSB1WzFdICsgay5odG1sUHJlZmlsdGVyKG8pICsgdVsyXSwgYyA9IHVbMF07IHdoaWxlIChjLS0pIGEgPSBhLmxhc3RDaGlsZDsgay5tZXJnZShwLCBhLmNoaWxkTm9kZXMpLCAoYSA9IGYuZmlyc3RDaGlsZCkudGV4dENvbnRlbnQgPSBcIlwiIH0gZWxzZSBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7IGYudGV4dENvbnRlbnQgPSBcIlwiLCBkID0gMDsgd2hpbGUgKG8gPSBwW2QrK10pIGlmIChyICYmIC0xIDwgay5pbkFycmF5KG8sIHIpKSBpICYmIGkucHVzaChvKTsgZWxzZSBpZiAobCA9IG9lKG8pLCBhID0gdmUoZi5hcHBlbmRDaGlsZChvKSwgXCJzY3JpcHRcIiksIGwgJiYgeWUoYSksIG4pIHsgYyA9IDA7IHdoaWxlIChvID0gYVtjKytdKSBoZS50ZXN0KG8udHlwZSB8fCBcIlwiKSAmJiBuLnB1c2gobykgfSByZXR1cm4gZiB9IG1lID0gRS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSwgKHhlID0gRS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJyYWRpb1wiKSwgeGUuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiksIHhlLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJ0XCIpLCBtZS5hcHBlbmRDaGlsZCh4ZSksIHkuY2hlY2tDbG9uZSA9IG1lLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCwgbWUuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsIHkubm9DbG9uZUNoZWNrZWQgPSAhIW1lLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTsgdmFyIFRlID0gL15rZXkvLCBDZSA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLywgRWUgPSAvXihbXi5dKikoPzpcXC4oLispfCkvOyBmdW5jdGlvbiBrZSgpIHsgcmV0dXJuICEwIH0gZnVuY3Rpb24gU2UoKSB7IHJldHVybiAhMSB9IGZ1bmN0aW9uIE5lKGUsIHQpIHsgcmV0dXJuIGUgPT09IGZ1bmN0aW9uICgpIHsgdHJ5IHsgcmV0dXJuIEUuYWN0aXZlRWxlbWVudCB9IGNhdGNoIChlKSB7IH0gfSgpID09IChcImZvY3VzXCIgPT09IHQpIH0gZnVuY3Rpb24gQWUoZSwgdCwgbiwgciwgaSwgbykgeyB2YXIgYSwgczsgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHQpIHsgZm9yIChzIGluIFwic3RyaW5nXCIgIT0gdHlwZW9mIG4gJiYgKHIgPSByIHx8IG4sIG4gPSB2b2lkIDApLCB0KSBBZShlLCBzLCBuLCByLCB0W3NdLCBvKTsgcmV0dXJuIGUgfSBpZiAobnVsbCA9PSByICYmIG51bGwgPT0gaSA/IChpID0gbiwgciA9IG4gPSB2b2lkIDApIDogbnVsbCA9PSBpICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBuID8gKGkgPSByLCByID0gdm9pZCAwKSA6IChpID0gciwgciA9IG4sIG4gPSB2b2lkIDApKSwgITEgPT09IGkpIGkgPSBTZTsgZWxzZSBpZiAoIWkpIHJldHVybiBlOyByZXR1cm4gMSA9PT0gbyAmJiAoYSA9IGksIChpID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGsoKS5vZmYoZSksIGEuYXBwbHkodGhpcywgYXJndW1lbnRzKSB9KS5ndWlkID0gYS5ndWlkIHx8IChhLmd1aWQgPSBrLmd1aWQrKykpLCBlLmVhY2goZnVuY3Rpb24gKCkgeyBrLmV2ZW50LmFkZCh0aGlzLCB0LCBpLCByLCBuKSB9KSB9IGZ1bmN0aW9uIERlKGUsIGksIG8pIHsgbyA/IChRLnNldChlLCBpLCAhMSksIGsuZXZlbnQuYWRkKGUsIGksIHsgbmFtZXNwYWNlOiAhMSwgaGFuZGxlcjogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4sIHIgPSBRLmdldCh0aGlzLCBpKTsgaWYgKDEgJiBlLmlzVHJpZ2dlciAmJiB0aGlzW2ldKSB7IGlmIChyLmxlbmd0aCkgKGsuZXZlbnQuc3BlY2lhbFtpXSB8fCB7fSkuZGVsZWdhdGVUeXBlICYmIGUuc3RvcFByb3BhZ2F0aW9uKCk7IGVsc2UgaWYgKHIgPSBzLmNhbGwoYXJndW1lbnRzKSwgUS5zZXQodGhpcywgaSwgciksIHQgPSBvKHRoaXMsIGkpLCB0aGlzW2ldKCksIHIgIT09IChuID0gUS5nZXQodGhpcywgaSkpIHx8IHQgPyBRLnNldCh0aGlzLCBpLCAhMSkgOiBuID0ge30sIHIgIT09IG4pIHJldHVybiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCBlLnByZXZlbnREZWZhdWx0KCksIG4udmFsdWUgfSBlbHNlIHIubGVuZ3RoICYmIChRLnNldCh0aGlzLCBpLCB7IHZhbHVlOiBrLmV2ZW50LnRyaWdnZXIoay5leHRlbmQoclswXSwgay5FdmVudC5wcm90b3R5cGUpLCByLnNsaWNlKDEpLCB0aGlzKSB9KSwgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSkgfSB9KSkgOiB2b2lkIDAgPT09IFEuZ2V0KGUsIGkpICYmIGsuZXZlbnQuYWRkKGUsIGksIGtlKSB9IGsuZXZlbnQgPSB7IGdsb2JhbDoge30sIGFkZDogZnVuY3Rpb24gKHQsIGUsIG4sIHIsIGkpIHsgdmFyIG8sIGEsIHMsIHUsIGwsIGMsIGYsIHAsIGQsIGgsIGcsIHYgPSBRLmdldCh0KTsgaWYgKHYpIHsgbi5oYW5kbGVyICYmIChuID0gKG8gPSBuKS5oYW5kbGVyLCBpID0gby5zZWxlY3RvciksIGkgJiYgay5maW5kLm1hdGNoZXNTZWxlY3RvcihpZSwgaSksIG4uZ3VpZCB8fCAobi5ndWlkID0gay5ndWlkKyspLCAodSA9IHYuZXZlbnRzKSB8fCAodSA9IHYuZXZlbnRzID0ge30pLCAoYSA9IHYuaGFuZGxlKSB8fCAoYSA9IHYuaGFuZGxlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGsgJiYgay5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/IGsuZXZlbnQuZGlzcGF0Y2guYXBwbHkodCwgYXJndW1lbnRzKSA6IHZvaWQgMCB9KSwgbCA9IChlID0gKGUgfHwgXCJcIikubWF0Y2goUikgfHwgW1wiXCJdKS5sZW5ndGg7IHdoaWxlIChsLS0pIGQgPSBnID0gKHMgPSBFZS5leGVjKGVbbF0pIHx8IFtdKVsxXSwgaCA9IChzWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksIGQgJiYgKGYgPSBrLmV2ZW50LnNwZWNpYWxbZF0gfHwge30sIGQgPSAoaSA/IGYuZGVsZWdhdGVUeXBlIDogZi5iaW5kVHlwZSkgfHwgZCwgZiA9IGsuZXZlbnQuc3BlY2lhbFtkXSB8fCB7fSwgYyA9IGsuZXh0ZW5kKHsgdHlwZTogZCwgb3JpZ1R5cGU6IGcsIGRhdGE6IHIsIGhhbmRsZXI6IG4sIGd1aWQ6IG4uZ3VpZCwgc2VsZWN0b3I6IGksIG5lZWRzQ29udGV4dDogaSAmJiBrLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoaSksIG5hbWVzcGFjZTogaC5qb2luKFwiLlwiKSB9LCBvKSwgKHAgPSB1W2RdKSB8fCAoKHAgPSB1W2RdID0gW10pLmRlbGVnYXRlQ291bnQgPSAwLCBmLnNldHVwICYmICExICE9PSBmLnNldHVwLmNhbGwodCwgciwgaCwgYSkgfHwgdC5hZGRFdmVudExpc3RlbmVyICYmIHQuYWRkRXZlbnRMaXN0ZW5lcihkLCBhKSksIGYuYWRkICYmIChmLmFkZC5jYWxsKHQsIGMpLCBjLmhhbmRsZXIuZ3VpZCB8fCAoYy5oYW5kbGVyLmd1aWQgPSBuLmd1aWQpKSwgaSA/IHAuc3BsaWNlKHAuZGVsZWdhdGVDb3VudCsrLCAwLCBjKSA6IHAucHVzaChjKSwgay5ldmVudC5nbG9iYWxbZF0gPSAhMCkgfSB9LCByZW1vdmU6IGZ1bmN0aW9uIChlLCB0LCBuLCByLCBpKSB7IHZhciBvLCBhLCBzLCB1LCBsLCBjLCBmLCBwLCBkLCBoLCBnLCB2ID0gUS5oYXNEYXRhKGUpICYmIFEuZ2V0KGUpOyBpZiAodiAmJiAodSA9IHYuZXZlbnRzKSkgeyBsID0gKHQgPSAodCB8fCBcIlwiKS5tYXRjaChSKSB8fCBbXCJcIl0pLmxlbmd0aDsgd2hpbGUgKGwtLSkgaWYgKGQgPSBnID0gKHMgPSBFZS5leGVjKHRbbF0pIHx8IFtdKVsxXSwgaCA9IChzWzJdIHx8IFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksIGQpIHsgZiA9IGsuZXZlbnQuc3BlY2lhbFtkXSB8fCB7fSwgcCA9IHVbZCA9IChyID8gZi5kZWxlZ2F0ZVR5cGUgOiBmLmJpbmRUeXBlKSB8fCBkXSB8fCBbXSwgcyA9IHNbMl0gJiYgbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgaC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKSwgYSA9IG8gPSBwLmxlbmd0aDsgd2hpbGUgKG8tLSkgYyA9IHBbb10sICFpICYmIGcgIT09IGMub3JpZ1R5cGUgfHwgbiAmJiBuLmd1aWQgIT09IGMuZ3VpZCB8fCBzICYmICFzLnRlc3QoYy5uYW1lc3BhY2UpIHx8IHIgJiYgciAhPT0gYy5zZWxlY3RvciAmJiAoXCIqKlwiICE9PSByIHx8ICFjLnNlbGVjdG9yKSB8fCAocC5zcGxpY2UobywgMSksIGMuc2VsZWN0b3IgJiYgcC5kZWxlZ2F0ZUNvdW50LS0gLCBmLnJlbW92ZSAmJiBmLnJlbW92ZS5jYWxsKGUsIGMpKTsgYSAmJiAhcC5sZW5ndGggJiYgKGYudGVhcmRvd24gJiYgITEgIT09IGYudGVhcmRvd24uY2FsbChlLCBoLCB2LmhhbmRsZSkgfHwgay5yZW1vdmVFdmVudChlLCBkLCB2LmhhbmRsZSksIGRlbGV0ZSB1W2RdKSB9IGVsc2UgZm9yIChkIGluIHUpIGsuZXZlbnQucmVtb3ZlKGUsIGQgKyB0W2xdLCBuLCByLCAhMCk7IGsuaXNFbXB0eU9iamVjdCh1KSAmJiBRLnJlbW92ZShlLCBcImhhbmRsZSBldmVudHNcIikgfSB9LCBkaXNwYXRjaDogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4sIHIsIGksIG8sIGEsIHMgPSBrLmV2ZW50LmZpeChlKSwgdSA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSwgbCA9IChRLmdldCh0aGlzLCBcImV2ZW50c1wiKSB8fCB7fSlbcy50eXBlXSB8fCBbXSwgYyA9IGsuZXZlbnQuc3BlY2lhbFtzLnR5cGVdIHx8IHt9OyBmb3IgKHVbMF0gPSBzLCB0ID0gMTsgdCA8IGFyZ3VtZW50cy5sZW5ndGg7IHQrKyl1W3RdID0gYXJndW1lbnRzW3RdOyBpZiAocy5kZWxlZ2F0ZVRhcmdldCA9IHRoaXMsICFjLnByZURpc3BhdGNoIHx8ICExICE9PSBjLnByZURpc3BhdGNoLmNhbGwodGhpcywgcykpIHsgYSA9IGsuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLCBzLCBsKSwgdCA9IDA7IHdoaWxlICgoaSA9IGFbdCsrXSkgJiYgIXMuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkgeyBzLmN1cnJlbnRUYXJnZXQgPSBpLmVsZW0sIG4gPSAwOyB3aGlsZSAoKG8gPSBpLmhhbmRsZXJzW24rK10pICYmICFzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHMucm5hbWVzcGFjZSAmJiAhMSAhPT0gby5uYW1lc3BhY2UgJiYgIXMucm5hbWVzcGFjZS50ZXN0KG8ubmFtZXNwYWNlKSB8fCAocy5oYW5kbGVPYmogPSBvLCBzLmRhdGEgPSBvLmRhdGEsIHZvaWQgMCAhPT0gKHIgPSAoKGsuZXZlbnQuc3BlY2lhbFtvLm9yaWdUeXBlXSB8fCB7fSkuaGFuZGxlIHx8IG8uaGFuZGxlcikuYXBwbHkoaS5lbGVtLCB1KSkgJiYgITEgPT09IChzLnJlc3VsdCA9IHIpICYmIChzLnByZXZlbnREZWZhdWx0KCksIHMuc3RvcFByb3BhZ2F0aW9uKCkpKSB9IHJldHVybiBjLnBvc3REaXNwYXRjaCAmJiBjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMsIHMpLCBzLnJlc3VsdCB9IH0sIGhhbmRsZXJzOiBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciwgaSwgbywgYSwgcyA9IFtdLCB1ID0gdC5kZWxlZ2F0ZUNvdW50LCBsID0gZS50YXJnZXQ7IGlmICh1ICYmIGwubm9kZVR5cGUgJiYgIShcImNsaWNrXCIgPT09IGUudHlwZSAmJiAxIDw9IGUuYnV0dG9uKSkgZm9yICg7IGwgIT09IHRoaXM7IGwgPSBsLnBhcmVudE5vZGUgfHwgdGhpcylpZiAoMSA9PT0gbC5ub2RlVHlwZSAmJiAoXCJjbGlja1wiICE9PSBlLnR5cGUgfHwgITAgIT09IGwuZGlzYWJsZWQpKSB7IGZvciAobyA9IFtdLCBhID0ge30sIG4gPSAwOyBuIDwgdTsgbisrKXZvaWQgMCA9PT0gYVtpID0gKHIgPSB0W25dKS5zZWxlY3RvciArIFwiIFwiXSAmJiAoYVtpXSA9IHIubmVlZHNDb250ZXh0ID8gLTEgPCBrKGksIHRoaXMpLmluZGV4KGwpIDogay5maW5kKGksIHRoaXMsIG51bGwsIFtsXSkubGVuZ3RoKSwgYVtpXSAmJiBvLnB1c2gocik7IG8ubGVuZ3RoICYmIHMucHVzaCh7IGVsZW06IGwsIGhhbmRsZXJzOiBvIH0pIH0gcmV0dXJuIGwgPSB0aGlzLCB1IDwgdC5sZW5ndGggJiYgcy5wdXNoKHsgZWxlbTogbCwgaGFuZGxlcnM6IHQuc2xpY2UodSkgfSksIHMgfSwgYWRkUHJvcDogZnVuY3Rpb24gKHQsIGUpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGsuRXZlbnQucHJvdG90eXBlLCB0LCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCBnZXQ6IG0oZSkgPyBmdW5jdGlvbiAoKSB7IGlmICh0aGlzLm9yaWdpbmFsRXZlbnQpIHJldHVybiBlKHRoaXMub3JpZ2luYWxFdmVudCkgfSA6IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXMub3JpZ2luYWxFdmVudCkgcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XSB9LCBzZXQ6IGZ1bmN0aW9uIChlKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB0LCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAsIHZhbHVlOiBlIH0pIH0gfSkgfSwgZml4OiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZVtrLmV4cGFuZG9dID8gZSA6IG5ldyBrLkV2ZW50KGUpIH0sIHNwZWNpYWw6IHsgbG9hZDogeyBub0J1YmJsZTogITAgfSwgY2xpY2s6IHsgc2V0dXA6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gdGhpcyB8fCBlOyByZXR1cm4gcGUudGVzdCh0LnR5cGUpICYmIHQuY2xpY2sgJiYgQSh0LCBcImlucHV0XCIpICYmIERlKHQsIFwiY2xpY2tcIiwga2UpLCAhMSB9LCB0cmlnZ2VyOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IHRoaXMgfHwgZTsgcmV0dXJuIHBlLnRlc3QodC50eXBlKSAmJiB0LmNsaWNrICYmIEEodCwgXCJpbnB1dFwiKSAmJiBEZSh0LCBcImNsaWNrXCIpLCAhMCB9LCBfZGVmYXVsdDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlLnRhcmdldDsgcmV0dXJuIHBlLnRlc3QodC50eXBlKSAmJiB0LmNsaWNrICYmIEEodCwgXCJpbnB1dFwiKSAmJiBRLmdldCh0LCBcImNsaWNrXCIpIHx8IEEodCwgXCJhXCIpIH0gfSwgYmVmb3JldW5sb2FkOiB7IHBvc3REaXNwYXRjaDogZnVuY3Rpb24gKGUpIHsgdm9pZCAwICE9PSBlLnJlc3VsdCAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgKGUub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGUucmVzdWx0KSB9IH0gfSB9LCBrLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgZS5yZW1vdmVFdmVudExpc3RlbmVyICYmIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCBuKSB9LCBrLkV2ZW50ID0gZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGsuRXZlbnQpKSByZXR1cm4gbmV3IGsuRXZlbnQoZSwgdCk7IGUgJiYgZS50eXBlID8gKHRoaXMub3JpZ2luYWxFdmVudCA9IGUsIHRoaXMudHlwZSA9IGUudHlwZSwgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlLmRlZmF1bHRQcmV2ZW50ZWQgfHwgdm9pZCAwID09PSBlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgITEgPT09IGUucmV0dXJuVmFsdWUgPyBrZSA6IFNlLCB0aGlzLnRhcmdldCA9IGUudGFyZ2V0ICYmIDMgPT09IGUudGFyZ2V0Lm5vZGVUeXBlID8gZS50YXJnZXQucGFyZW50Tm9kZSA6IGUudGFyZ2V0LCB0aGlzLmN1cnJlbnRUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQsIHRoaXMucmVsYXRlZFRhcmdldCA9IGUucmVsYXRlZFRhcmdldCkgOiB0aGlzLnR5cGUgPSBlLCB0ICYmIGsuZXh0ZW5kKHRoaXMsIHQpLCB0aGlzLnRpbWVTdGFtcCA9IGUgJiYgZS50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKSwgdGhpc1trLmV4cGFuZG9dID0gITAgfSwgay5FdmVudC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBrLkV2ZW50LCBpc0RlZmF1bHRQcmV2ZW50ZWQ6IFNlLCBpc1Byb3BhZ2F0aW9uU3RvcHBlZDogU2UsIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBTZSwgaXNTaW11bGF0ZWQ6ICExLCBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDsgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBrZSwgZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBlLnByZXZlbnREZWZhdWx0KCkgfSwgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7IHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50OyB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0ga2UsIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgJiYgZS5zdG9wUHJvcGFnYXRpb24oKSB9LCBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHsgdmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7IHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBrZSwgZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0aGlzLnN0b3BQcm9wYWdhdGlvbigpIH0gfSwgay5lYWNoKHsgYWx0S2V5OiAhMCwgYnViYmxlczogITAsIGNhbmNlbGFibGU6ICEwLCBjaGFuZ2VkVG91Y2hlczogITAsIGN0cmxLZXk6ICEwLCBkZXRhaWw6ICEwLCBldmVudFBoYXNlOiAhMCwgbWV0YUtleTogITAsIHBhZ2VYOiAhMCwgcGFnZVk6ICEwLCBzaGlmdEtleTogITAsIHZpZXc6ICEwLCBcImNoYXJcIjogITAsIGNvZGU6ICEwLCBjaGFyQ29kZTogITAsIGtleTogITAsIGtleUNvZGU6ICEwLCBidXR0b246ICEwLCBidXR0b25zOiAhMCwgY2xpZW50WDogITAsIGNsaWVudFk6ICEwLCBvZmZzZXRYOiAhMCwgb2Zmc2V0WTogITAsIHBvaW50ZXJJZDogITAsIHBvaW50ZXJUeXBlOiAhMCwgc2NyZWVuWDogITAsIHNjcmVlblk6ICEwLCB0YXJnZXRUb3VjaGVzOiAhMCwgdG9FbGVtZW50OiAhMCwgdG91Y2hlczogITAsIHdoaWNoOiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuYnV0dG9uOyByZXR1cm4gbnVsbCA9PSBlLndoaWNoICYmIFRlLnRlc3QoZS50eXBlKSA/IG51bGwgIT0gZS5jaGFyQ29kZSA/IGUuY2hhckNvZGUgOiBlLmtleUNvZGUgOiAhZS53aGljaCAmJiB2b2lkIDAgIT09IHQgJiYgQ2UudGVzdChlLnR5cGUpID8gMSAmIHQgPyAxIDogMiAmIHQgPyAzIDogNCAmIHQgPyAyIDogMCA6IGUud2hpY2ggfSB9LCBrLmV2ZW50LmFkZFByb3ApLCBrLmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiAoZSwgdCkgeyBrLmV2ZW50LnNwZWNpYWxbZV0gPSB7IHNldHVwOiBmdW5jdGlvbiAoKSB7IHJldHVybiBEZSh0aGlzLCBlLCBOZSksICExIH0sIHRyaWdnZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIERlKHRoaXMsIGUpLCAhMCB9LCBkZWxlZ2F0ZVR5cGU6IHQgfSB9KSwgay5lYWNoKHsgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIiwgcG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIiB9LCBmdW5jdGlvbiAoZSwgaSkgeyBrLmV2ZW50LnNwZWNpYWxbZV0gPSB7IGRlbGVnYXRlVHlwZTogaSwgYmluZFR5cGU6IGksIGhhbmRsZTogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4gPSBlLnJlbGF0ZWRUYXJnZXQsIHIgPSBlLmhhbmRsZU9iajsgcmV0dXJuIG4gJiYgKG4gPT09IHRoaXMgfHwgay5jb250YWlucyh0aGlzLCBuKSkgfHwgKGUudHlwZSA9IHIub3JpZ1R5cGUsIHQgPSByLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgZS50eXBlID0gaSksIHQgfSB9IH0pLCBrLmZuLmV4dGVuZCh7IG9uOiBmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyByZXR1cm4gQWUodGhpcywgZSwgdCwgbiwgcikgfSwgb25lOiBmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyByZXR1cm4gQWUodGhpcywgZSwgdCwgbiwgciwgMSkgfSwgb2ZmOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaTsgaWYgKGUgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLmhhbmRsZU9iaikgcmV0dXJuIHIgPSBlLmhhbmRsZU9iaiwgayhlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoci5uYW1lc3BhY2UgPyByLm9yaWdUeXBlICsgXCIuXCIgKyByLm5hbWVzcGFjZSA6IHIub3JpZ1R5cGUsIHIuc2VsZWN0b3IsIHIuaGFuZGxlciksIHRoaXM7IGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBlKSB7IGZvciAoaSBpbiBlKSB0aGlzLm9mZihpLCB0LCBlW2ldKTsgcmV0dXJuIHRoaXMgfSByZXR1cm4gITEgIT09IHQgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiB0IHx8IChuID0gdCwgdCA9IHZvaWQgMCksICExID09PSBuICYmIChuID0gU2UpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBrLmV2ZW50LnJlbW92ZSh0aGlzLCBlLCBuLCB0KSB9KSB9IH0pOyB2YXIgamUgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSwgcWUgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSwgTGUgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLCBIZSA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZzsgZnVuY3Rpb24gT2UoZSwgdCkgeyByZXR1cm4gQShlLCBcInRhYmxlXCIpICYmIEEoMTEgIT09IHQubm9kZVR5cGUgPyB0IDogdC5maXJzdENoaWxkLCBcInRyXCIpICYmIGsoZSkuY2hpbGRyZW4oXCJ0Ym9keVwiKVswXSB8fCBlIH0gZnVuY3Rpb24gUGUoZSkgeyByZXR1cm4gZS50eXBlID0gKG51bGwgIT09IGUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgKyBcIi9cIiArIGUudHlwZSwgZSB9IGZ1bmN0aW9uIFJlKGUpIHsgcmV0dXJuIFwidHJ1ZS9cIiA9PT0gKGUudHlwZSB8fCBcIlwiKS5zbGljZSgwLCA1KSA/IGUudHlwZSA9IGUudHlwZS5zbGljZSg1KSA6IGUucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSwgZSB9IGZ1bmN0aW9uIE1lKGUsIHQpIHsgdmFyIG4sIHIsIGksIG8sIGEsIHMsIHUsIGw7IGlmICgxID09PSB0Lm5vZGVUeXBlKSB7IGlmIChRLmhhc0RhdGEoZSkgJiYgKG8gPSBRLmFjY2VzcyhlKSwgYSA9IFEuc2V0KHQsIG8pLCBsID0gby5ldmVudHMpKSBmb3IgKGkgaW4gZGVsZXRlIGEuaGFuZGxlLCBhLmV2ZW50cyA9IHt9LCBsKSBmb3IgKG4gPSAwLCByID0gbFtpXS5sZW5ndGg7IG4gPCByOyBuKyspay5ldmVudC5hZGQodCwgaSwgbFtpXVtuXSk7IEouaGFzRGF0YShlKSAmJiAocyA9IEouYWNjZXNzKGUpLCB1ID0gay5leHRlbmQoe30sIHMpLCBKLnNldCh0LCB1KSkgfSB9IGZ1bmN0aW9uIEllKG4sIHIsIGksIG8pIHsgciA9IGcuYXBwbHkoW10sIHIpOyB2YXIgZSwgdCwgYSwgcywgdSwgbCwgYyA9IDAsIGYgPSBuLmxlbmd0aCwgcCA9IGYgLSAxLCBkID0gclswXSwgaCA9IG0oZCk7IGlmIChoIHx8IDEgPCBmICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGQgJiYgIXkuY2hlY2tDbG9uZSAmJiBMZS50ZXN0KGQpKSByZXR1cm4gbi5lYWNoKGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gbi5lcShlKTsgaCAmJiAoclswXSA9IGQuY2FsbCh0aGlzLCBlLCB0Lmh0bWwoKSkpLCBJZSh0LCByLCBpLCBvKSB9KTsgaWYgKGYgJiYgKHQgPSAoZSA9IHdlKHIsIG5bMF0ub3duZXJEb2N1bWVudCwgITEsIG4sIG8pKS5maXJzdENoaWxkLCAxID09PSBlLmNoaWxkTm9kZXMubGVuZ3RoICYmIChlID0gdCksIHQgfHwgbykpIHsgZm9yIChzID0gKGEgPSBrLm1hcCh2ZShlLCBcInNjcmlwdFwiKSwgUGUpKS5sZW5ndGg7IGMgPCBmOyBjKyspdSA9IGUsIGMgIT09IHAgJiYgKHUgPSBrLmNsb25lKHUsICEwLCAhMCksIHMgJiYgay5tZXJnZShhLCB2ZSh1LCBcInNjcmlwdFwiKSkpLCBpLmNhbGwobltjXSwgdSwgYyk7IGlmIChzKSBmb3IgKGwgPSBhW2EubGVuZ3RoIC0gMV0ub3duZXJEb2N1bWVudCwgay5tYXAoYSwgUmUpLCBjID0gMDsgYyA8IHM7IGMrKyl1ID0gYVtjXSwgaGUudGVzdCh1LnR5cGUgfHwgXCJcIikgJiYgIVEuYWNjZXNzKHUsIFwiZ2xvYmFsRXZhbFwiKSAmJiBrLmNvbnRhaW5zKGwsIHUpICYmICh1LnNyYyAmJiBcIm1vZHVsZVwiICE9PSAodS50eXBlIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkgPyBrLl9ldmFsVXJsICYmICF1Lm5vTW9kdWxlICYmIGsuX2V2YWxVcmwodS5zcmMsIHsgbm9uY2U6IHUubm9uY2UgfHwgdS5nZXRBdHRyaWJ1dGUoXCJub25jZVwiKSB9KSA6IGIodS50ZXh0Q29udGVudC5yZXBsYWNlKEhlLCBcIlwiKSwgdSwgbCkpIH0gcmV0dXJuIG4gfSBmdW5jdGlvbiBXZShlLCB0LCBuKSB7IGZvciAodmFyIHIsIGkgPSB0ID8gay5maWx0ZXIodCwgZSkgOiBlLCBvID0gMDsgbnVsbCAhPSAociA9IGlbb10pOyBvKyspbiB8fCAxICE9PSByLm5vZGVUeXBlIHx8IGsuY2xlYW5EYXRhKHZlKHIpKSwgci5wYXJlbnROb2RlICYmIChuICYmIG9lKHIpICYmIHllKHZlKHIsIFwic2NyaXB0XCIpKSwgci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpKTsgcmV0dXJuIGUgfSBrLmV4dGVuZCh7IGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnJlcGxhY2UoamUsIFwiPCQxPjwvJDI+XCIpIH0sIGNsb25lOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbywgYSwgcywgdSwgbCwgYyA9IGUuY2xvbmVOb2RlKCEwKSwgZiA9IG9lKGUpOyBpZiAoISh5Lm5vQ2xvbmVDaGVja2VkIHx8IDEgIT09IGUubm9kZVR5cGUgJiYgMTEgIT09IGUubm9kZVR5cGUgfHwgay5pc1hNTERvYyhlKSkpIGZvciAoYSA9IHZlKGMpLCByID0gMCwgaSA9IChvID0gdmUoZSkpLmxlbmd0aDsgciA8IGk7IHIrKylzID0gb1tyXSwgdSA9IGFbcl0sIHZvaWQgMCwgXCJpbnB1dFwiID09PSAobCA9IHUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgJiYgcGUudGVzdChzLnR5cGUpID8gdS5jaGVja2VkID0gcy5jaGVja2VkIDogXCJpbnB1dFwiICE9PSBsICYmIFwidGV4dGFyZWFcIiAhPT0gbCB8fCAodS5kZWZhdWx0VmFsdWUgPSBzLmRlZmF1bHRWYWx1ZSk7IGlmICh0KSBpZiAobikgZm9yIChvID0gbyB8fCB2ZShlKSwgYSA9IGEgfHwgdmUoYyksIHIgPSAwLCBpID0gby5sZW5ndGg7IHIgPCBpOyByKyspTWUob1tyXSwgYVtyXSk7IGVsc2UgTWUoZSwgYyk7IHJldHVybiAwIDwgKGEgPSB2ZShjLCBcInNjcmlwdFwiKSkubGVuZ3RoICYmIHllKGEsICFmICYmIHZlKGUsIFwic2NyaXB0XCIpKSwgYyB9LCBjbGVhbkRhdGE6IGZ1bmN0aW9uIChlKSB7IGZvciAodmFyIHQsIG4sIHIsIGkgPSBrLmV2ZW50LnNwZWNpYWwsIG8gPSAwOyB2b2lkIDAgIT09IChuID0gZVtvXSk7IG8rKylpZiAoRyhuKSkgeyBpZiAodCA9IG5bUS5leHBhbmRvXSkgeyBpZiAodC5ldmVudHMpIGZvciAociBpbiB0LmV2ZW50cykgaVtyXSA/IGsuZXZlbnQucmVtb3ZlKG4sIHIpIDogay5yZW1vdmVFdmVudChuLCByLCB0LmhhbmRsZSk7IG5bUS5leHBhbmRvXSA9IHZvaWQgMCB9IG5bSi5leHBhbmRvXSAmJiAobltKLmV4cGFuZG9dID0gdm9pZCAwKSB9IH0gfSksIGsuZm4uZXh0ZW5kKHsgZGV0YWNoOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gV2UodGhpcywgZSwgITApIH0sIHJlbW92ZTogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFdlKHRoaXMsIGUpIH0sIHRleHQ6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBfKHRoaXMsIGZ1bmN0aW9uIChlKSB7IHJldHVybiB2b2lkIDAgPT09IGUgPyBrLnRleHQodGhpcykgOiB0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbiAoKSB7IDEgIT09IHRoaXMubm9kZVR5cGUgJiYgMTEgIT09IHRoaXMubm9kZVR5cGUgJiYgOSAhPT0gdGhpcy5ub2RlVHlwZSB8fCAodGhpcy50ZXh0Q29udGVudCA9IGUpIH0pIH0sIG51bGwsIGUsIGFyZ3VtZW50cy5sZW5ndGgpIH0sIGFwcGVuZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSWUodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZSkgeyAxICE9PSB0aGlzLm5vZGVUeXBlICYmIDExICE9PSB0aGlzLm5vZGVUeXBlICYmIDkgIT09IHRoaXMubm9kZVR5cGUgfHwgT2UodGhpcywgZSkuYXBwZW5kQ2hpbGQoZSkgfSkgfSwgcHJlcGVuZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSWUodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiAoZSkgeyBpZiAoMSA9PT0gdGhpcy5ub2RlVHlwZSB8fCAxMSA9PT0gdGhpcy5ub2RlVHlwZSB8fCA5ID09PSB0aGlzLm5vZGVUeXBlKSB7IHZhciB0ID0gT2UodGhpcywgZSk7IHQuaW5zZXJ0QmVmb3JlKGUsIHQuZmlyc3RDaGlsZCkgfSB9KSB9LCBiZWZvcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEllKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHsgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSwgdGhpcykgfSkgfSwgYWZ0ZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEllKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHsgdGhpcy5wYXJlbnROb2RlICYmIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSwgdGhpcy5uZXh0U2libGluZykgfSkgfSwgZW1wdHk6IGZ1bmN0aW9uICgpIHsgZm9yICh2YXIgZSwgdCA9IDA7IG51bGwgIT0gKGUgPSB0aGlzW3RdKTsgdCsrKTEgPT09IGUubm9kZVR5cGUgJiYgKGsuY2xlYW5EYXRhKHZlKGUsICExKSksIGUudGV4dENvbnRlbnQgPSBcIlwiKTsgcmV0dXJuIHRoaXMgfSwgY2xvbmU6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBlID0gbnVsbCAhPSBlICYmIGUsIHQgPSBudWxsID09IHQgPyBlIDogdCwgdGhpcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gay5jbG9uZSh0aGlzLCBlLCB0KSB9KSB9LCBodG1sOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gXyh0aGlzLCBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IHRoaXNbMF0gfHwge30sIG4gPSAwLCByID0gdGhpcy5sZW5ndGg7IGlmICh2b2lkIDAgPT09IGUgJiYgMSA9PT0gdC5ub2RlVHlwZSkgcmV0dXJuIHQuaW5uZXJIVE1MOyBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSAmJiAhcWUudGVzdChlKSAmJiAhZ2VbKGRlLmV4ZWMoZSkgfHwgW1wiXCIsIFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSkgeyBlID0gay5odG1sUHJlZmlsdGVyKGUpOyB0cnkgeyBmb3IgKDsgbiA8IHI7IG4rKykxID09PSAodCA9IHRoaXNbbl0gfHwge30pLm5vZGVUeXBlICYmIChrLmNsZWFuRGF0YSh2ZSh0LCAhMSkpLCB0LmlubmVySFRNTCA9IGUpOyB0ID0gMCB9IGNhdGNoIChlKSB7IH0gfSB0ICYmIHRoaXMuZW1wdHkoKS5hcHBlbmQoZSkgfSwgbnVsbCwgZSwgYXJndW1lbnRzLmxlbmd0aCkgfSwgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uICgpIHsgdmFyIG4gPSBbXTsgcmV0dXJuIEllKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSB0aGlzLnBhcmVudE5vZGU7IGsuaW5BcnJheSh0aGlzLCBuKSA8IDAgJiYgKGsuY2xlYW5EYXRhKHZlKHRoaXMpKSwgdCAmJiB0LnJlcGxhY2VDaGlsZChlLCB0aGlzKSkgfSwgbikgfSB9KSwgay5lYWNoKHsgYXBwZW5kVG86IFwiYXBwZW5kXCIsIHByZXBlbmRUbzogXCJwcmVwZW5kXCIsIGluc2VydEJlZm9yZTogXCJiZWZvcmVcIiwgaW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIiwgcmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiIH0sIGZ1bmN0aW9uIChlLCBhKSB7IGsuZm5bZV0gPSBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0LCBuID0gW10sIHIgPSBrKGUpLCBpID0gci5sZW5ndGggLSAxLCBvID0gMDsgbyA8PSBpOyBvKyspdCA9IG8gPT09IGkgPyB0aGlzIDogdGhpcy5jbG9uZSghMCksIGsocltvXSlbYV0odCksIHUuYXBwbHkobiwgdC5nZXQoKSk7IHJldHVybiB0aGlzLnB1c2hTdGFjayhuKSB9IH0pOyB2YXIgJGUgPSBuZXcgUmVnRXhwKFwiXihcIiArIHRlICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIpLCBGZSA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3OyByZXR1cm4gdCAmJiB0Lm9wZW5lciB8fCAodCA9IEMpLCB0LmdldENvbXB1dGVkU3R5bGUoZSkgfSwgQmUgPSBuZXcgUmVnRXhwKHJlLmpvaW4oXCJ8XCIpLCBcImlcIik7IGZ1bmN0aW9uIF9lKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEsIHMgPSBlLnN0eWxlOyByZXR1cm4gKG4gPSBuIHx8IEZlKGUpKSAmJiAoXCJcIiAhPT0gKGEgPSBuLmdldFByb3BlcnR5VmFsdWUodCkgfHwgblt0XSkgfHwgb2UoZSkgfHwgKGEgPSBrLnN0eWxlKGUsIHQpKSwgIXkucGl4ZWxCb3hTdHlsZXMoKSAmJiAkZS50ZXN0KGEpICYmIEJlLnRlc3QodCkgJiYgKHIgPSBzLndpZHRoLCBpID0gcy5taW5XaWR0aCwgbyA9IHMubWF4V2lkdGgsIHMubWluV2lkdGggPSBzLm1heFdpZHRoID0gcy53aWR0aCA9IGEsIGEgPSBuLndpZHRoLCBzLndpZHRoID0gciwgcy5taW5XaWR0aCA9IGksIHMubWF4V2lkdGggPSBvKSksIHZvaWQgMCAhPT0gYSA/IGEgKyBcIlwiIDogYSB9IGZ1bmN0aW9uIHplKGUsIHQpIHsgcmV0dXJuIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IGlmICghZSgpKSByZXR1cm4gKHRoaXMuZ2V0ID0gdCkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgZGVsZXRlIHRoaXMuZ2V0IH0gfSB9ICFmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGUoKSB7IGlmICh1KSB7IHMuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O21hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiLCB1LnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSVcIiwgaWUuYXBwZW5kQ2hpbGQocykuYXBwZW5kQ2hpbGQodSk7IHZhciBlID0gQy5nZXRDb21wdXRlZFN0eWxlKHUpOyBuID0gXCIxJVwiICE9PSBlLnRvcCwgYSA9IDEyID09PSB0KGUubWFyZ2luTGVmdCksIHUuc3R5bGUucmlnaHQgPSBcIjYwJVwiLCBvID0gMzYgPT09IHQoZS5yaWdodCksIHIgPSAzNiA9PT0gdChlLndpZHRoKSwgdS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIiwgaSA9IDEyID09PSB0KHUub2Zmc2V0V2lkdGggLyAzKSwgaWUucmVtb3ZlQ2hpbGQocyksIHUgPSBudWxsIH0gfSBmdW5jdGlvbiB0KGUpIHsgcmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChlKSkgfSB2YXIgbiwgciwgaSwgbywgYSwgcyA9IEUuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgdSA9IEUuY3JlYXRlRWxlbWVudChcImRpdlwiKTsgdS5zdHlsZSAmJiAodS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIiwgdS5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIiwgeS5jbGVhckNsb25lU3R5bGUgPSBcImNvbnRlbnQtYm94XCIgPT09IHUuc3R5bGUuYmFja2dyb3VuZENsaXAsIGsuZXh0ZW5kKHksIHsgYm94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGUoKSwgciB9LCBwaXhlbEJveFN0eWxlczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZSgpLCBvIH0sIHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGUoKSwgbiB9LCByZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGUoKSwgYSB9LCBzY3JvbGxib3hTaXplOiBmdW5jdGlvbiAoKSB7IHJldHVybiBlKCksIGkgfSB9KSkgfSgpOyB2YXIgVWUgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXSwgWGUgPSBFLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsIFZlID0ge307IGZ1bmN0aW9uIEdlKGUpIHsgdmFyIHQgPSBrLmNzc1Byb3BzW2VdIHx8IFZlW2VdOyByZXR1cm4gdCB8fCAoZSBpbiBYZSA/IGUgOiBWZVtlXSA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZVswXS50b1VwcGVyQ2FzZSgpICsgZS5zbGljZSgxKSwgbiA9IFVlLmxlbmd0aDsgd2hpbGUgKG4tLSkgaWYgKChlID0gVWVbbl0gKyB0KSBpbiBYZSkgcmV0dXJuIGUgfShlKSB8fCBlKSB9IHZhciBZZSA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLywgUWUgPSAvXi0tLywgSmUgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LCBLZSA9IHsgbGV0dGVyU3BhY2luZzogXCIwXCIsIGZvbnRXZWlnaHQ6IFwiNDAwXCIgfTsgZnVuY3Rpb24gWmUoZSwgdCwgbikgeyB2YXIgciA9IG5lLmV4ZWModCk7IHJldHVybiByID8gTWF0aC5tYXgoMCwgclsyXSAtIChuIHx8IDApKSArIChyWzNdIHx8IFwicHhcIikgOiB0IH0gZnVuY3Rpb24gZXQoZSwgdCwgbiwgciwgaSwgbykgeyB2YXIgYSA9IFwid2lkdGhcIiA9PT0gdCA/IDEgOiAwLCBzID0gMCwgdSA9IDA7IGlmIChuID09PSAociA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIikpIHJldHVybiAwOyBmb3IgKDsgYSA8IDQ7IGEgKz0gMilcIm1hcmdpblwiID09PSBuICYmICh1ICs9IGsuY3NzKGUsIG4gKyByZVthXSwgITAsIGkpKSwgciA/IChcImNvbnRlbnRcIiA9PT0gbiAmJiAodSAtPSBrLmNzcyhlLCBcInBhZGRpbmdcIiArIHJlW2FdLCAhMCwgaSkpLCBcIm1hcmdpblwiICE9PSBuICYmICh1IC09IGsuY3NzKGUsIFwiYm9yZGVyXCIgKyByZVthXSArIFwiV2lkdGhcIiwgITAsIGkpKSkgOiAodSArPSBrLmNzcyhlLCBcInBhZGRpbmdcIiArIHJlW2FdLCAhMCwgaSksIFwicGFkZGluZ1wiICE9PSBuID8gdSArPSBrLmNzcyhlLCBcImJvcmRlclwiICsgcmVbYV0gKyBcIldpZHRoXCIsICEwLCBpKSA6IHMgKz0gay5jc3MoZSwgXCJib3JkZXJcIiArIHJlW2FdICsgXCJXaWR0aFwiLCAhMCwgaSkpOyByZXR1cm4gIXIgJiYgMCA8PSBvICYmICh1ICs9IE1hdGgubWF4KDAsIE1hdGguY2VpbChlW1wib2Zmc2V0XCIgKyB0WzBdLnRvVXBwZXJDYXNlKCkgKyB0LnNsaWNlKDEpXSAtIG8gLSB1IC0gcyAtIC41KSkgfHwgMCksIHUgfSBmdW5jdGlvbiB0dChlLCB0LCBuKSB7IHZhciByID0gRmUoZSksIGkgPSAoIXkuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBuKSAmJiBcImJvcmRlci1ib3hcIiA9PT0gay5jc3MoZSwgXCJib3hTaXppbmdcIiwgITEsIHIpLCBvID0gaSwgYSA9IF9lKGUsIHQsIHIpLCBzID0gXCJvZmZzZXRcIiArIHRbMF0udG9VcHBlckNhc2UoKSArIHQuc2xpY2UoMSk7IGlmICgkZS50ZXN0KGEpKSB7IGlmICghbikgcmV0dXJuIGE7IGEgPSBcImF1dG9cIiB9IHJldHVybiAoIXkuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpIHx8IFwiYXV0b1wiID09PSBhIHx8ICFwYXJzZUZsb2F0KGEpICYmIFwiaW5saW5lXCIgPT09IGsuY3NzKGUsIFwiZGlzcGxheVwiLCAhMSwgcikpICYmIGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiYgKGkgPSBcImJvcmRlci1ib3hcIiA9PT0gay5jc3MoZSwgXCJib3hTaXppbmdcIiwgITEsIHIpLCAobyA9IHMgaW4gZSkgJiYgKGEgPSBlW3NdKSksIChhID0gcGFyc2VGbG9hdChhKSB8fCAwKSArIGV0KGUsIHQsIG4gfHwgKGkgPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIpLCBvLCByLCBhKSArIFwicHhcIiB9IGZ1bmN0aW9uIG50KGUsIHQsIG4sIHIsIGkpIHsgcmV0dXJuIG5ldyBudC5wcm90b3R5cGUuaW5pdChlLCB0LCBuLCByLCBpKSB9IGsuZXh0ZW5kKHsgY3NzSG9va3M6IHsgb3BhY2l0eTogeyBnZXQ6IGZ1bmN0aW9uIChlLCB0KSB7IGlmICh0KSB7IHZhciBuID0gX2UoZSwgXCJvcGFjaXR5XCIpOyByZXR1cm4gXCJcIiA9PT0gbiA/IFwiMVwiIDogbiB9IH0gfSB9LCBjc3NOdW1iZXI6IHsgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ICEwLCBjb2x1bW5Db3VudDogITAsIGZpbGxPcGFjaXR5OiAhMCwgZmxleEdyb3c6ICEwLCBmbGV4U2hyaW5rOiAhMCwgZm9udFdlaWdodDogITAsIGdyaWRBcmVhOiAhMCwgZ3JpZENvbHVtbjogITAsIGdyaWRDb2x1bW5FbmQ6ICEwLCBncmlkQ29sdW1uU3RhcnQ6ICEwLCBncmlkUm93OiAhMCwgZ3JpZFJvd0VuZDogITAsIGdyaWRSb3dTdGFydDogITAsIGxpbmVIZWlnaHQ6ICEwLCBvcGFjaXR5OiAhMCwgb3JkZXI6ICEwLCBvcnBoYW5zOiAhMCwgd2lkb3dzOiAhMCwgekluZGV4OiAhMCwgem9vbTogITAgfSwgY3NzUHJvcHM6IHt9LCBzdHlsZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgaWYgKGUgJiYgMyAhPT0gZS5ub2RlVHlwZSAmJiA4ICE9PSBlLm5vZGVUeXBlICYmIGUuc3R5bGUpIHsgdmFyIGksIG8sIGEsIHMgPSBWKHQpLCB1ID0gUWUudGVzdCh0KSwgbCA9IGUuc3R5bGU7IGlmICh1IHx8ICh0ID0gR2UocykpLCBhID0gay5jc3NIb29rc1t0XSB8fCBrLmNzc0hvb2tzW3NdLCB2b2lkIDAgPT09IG4pIHJldHVybiBhICYmIFwiZ2V0XCIgaW4gYSAmJiB2b2lkIDAgIT09IChpID0gYS5nZXQoZSwgITEsIHIpKSA/IGkgOiBsW3RdOyBcInN0cmluZ1wiID09PSAobyA9IHR5cGVvZiBuKSAmJiAoaSA9IG5lLmV4ZWMobikpICYmIGlbMV0gJiYgKG4gPSBsZShlLCB0LCBpKSwgbyA9IFwibnVtYmVyXCIpLCBudWxsICE9IG4gJiYgbiA9PSBuICYmIChcIm51bWJlclwiICE9PSBvIHx8IHUgfHwgKG4gKz0gaSAmJiBpWzNdIHx8IChrLmNzc051bWJlcltzXSA/IFwiXCIgOiBcInB4XCIpKSwgeS5jbGVhckNsb25lU3R5bGUgfHwgXCJcIiAhPT0gbiB8fCAwICE9PSB0LmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpIHx8IChsW3RdID0gXCJpbmhlcml0XCIpLCBhICYmIFwic2V0XCIgaW4gYSAmJiB2b2lkIDAgPT09IChuID0gYS5zZXQoZSwgbiwgcikpIHx8ICh1ID8gbC5zZXRQcm9wZXJ0eSh0LCBuKSA6IGxbdF0gPSBuKSkgfSB9LCBjc3M6IGZ1bmN0aW9uIChlLCB0LCBuLCByKSB7IHZhciBpLCBvLCBhLCBzID0gVih0KTsgcmV0dXJuIFFlLnRlc3QodCkgfHwgKHQgPSBHZShzKSksIChhID0gay5jc3NIb29rc1t0XSB8fCBrLmNzc0hvb2tzW3NdKSAmJiBcImdldFwiIGluIGEgJiYgKGkgPSBhLmdldChlLCAhMCwgbikpLCB2b2lkIDAgPT09IGkgJiYgKGkgPSBfZShlLCB0LCByKSksIFwibm9ybWFsXCIgPT09IGkgJiYgdCBpbiBLZSAmJiAoaSA9IEtlW3RdKSwgXCJcIiA9PT0gbiB8fCBuID8gKG8gPSBwYXJzZUZsb2F0KGkpLCAhMCA9PT0gbiB8fCBpc0Zpbml0ZShvKSA/IG8gfHwgMCA6IGkpIDogaSB9IH0pLCBrLmVhY2goW1wiaGVpZ2h0XCIsIFwid2lkdGhcIl0sIGZ1bmN0aW9uIChlLCB1KSB7IGsuY3NzSG9va3NbdV0gPSB7IGdldDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgaWYgKHQpIHJldHVybiAhWWUudGVzdChrLmNzcyhlLCBcImRpc3BsYXlcIikpIHx8IGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggJiYgZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA/IHR0KGUsIHUsIG4pIDogdWUoZSwgSmUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHR0KGUsIHUsIG4pIH0pIH0sIHNldDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGkgPSBGZShlKSwgbyA9ICF5LnNjcm9sbGJveFNpemUoKSAmJiBcImFic29sdXRlXCIgPT09IGkucG9zaXRpb24sIGEgPSAobyB8fCBuKSAmJiBcImJvcmRlci1ib3hcIiA9PT0gay5jc3MoZSwgXCJib3hTaXppbmdcIiwgITEsIGkpLCBzID0gbiA/IGV0KGUsIHUsIG4sIGEsIGkpIDogMDsgcmV0dXJuIGEgJiYgbyAmJiAocyAtPSBNYXRoLmNlaWwoZVtcIm9mZnNldFwiICsgdVswXS50b1VwcGVyQ2FzZSgpICsgdS5zbGljZSgxKV0gLSBwYXJzZUZsb2F0KGlbdV0pIC0gZXQoZSwgdSwgXCJib3JkZXJcIiwgITEsIGkpIC0gLjUpKSwgcyAmJiAociA9IG5lLmV4ZWModCkpICYmIFwicHhcIiAhPT0gKHJbM10gfHwgXCJweFwiKSAmJiAoZS5zdHlsZVt1XSA9IHQsIHQgPSBrLmNzcyhlLCB1KSksIFplKDAsIHQsIHMpIH0gfSB9KSwgay5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gemUoeS5yZWxpYWJsZU1hcmdpbkxlZnQsIGZ1bmN0aW9uIChlLCB0KSB7IGlmICh0KSByZXR1cm4gKHBhcnNlRmxvYXQoX2UoZSwgXCJtYXJnaW5MZWZ0XCIpKSB8fCBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB1ZShlLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IH0pKSArIFwicHhcIiB9KSwgay5lYWNoKHsgbWFyZ2luOiBcIlwiLCBwYWRkaW5nOiBcIlwiLCBib3JkZXI6IFwiV2lkdGhcIiB9LCBmdW5jdGlvbiAoaSwgbykgeyBrLmNzc0hvb2tzW2kgKyBvXSA9IHsgZXhwYW5kOiBmdW5jdGlvbiAoZSkgeyBmb3IgKHZhciB0ID0gMCwgbiA9IHt9LCByID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZSA/IGUuc3BsaXQoXCIgXCIpIDogW2VdOyB0IDwgNDsgdCsrKW5baSArIHJlW3RdICsgb10gPSByW3RdIHx8IHJbdCAtIDJdIHx8IHJbMF07IHJldHVybiBuIH0gfSwgXCJtYXJnaW5cIiAhPT0gaSAmJiAoay5jc3NIb29rc1tpICsgb10uc2V0ID0gWmUpIH0pLCBrLmZuLmV4dGVuZCh7IGNzczogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIF8odGhpcywgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8gPSB7fSwgYSA9IDA7IGlmIChBcnJheS5pc0FycmF5KHQpKSB7IGZvciAociA9IEZlKGUpLCBpID0gdC5sZW5ndGg7IGEgPCBpOyBhKyspb1t0W2FdXSA9IGsuY3NzKGUsIHRbYV0sICExLCByKTsgcmV0dXJuIG8gfSByZXR1cm4gdm9pZCAwICE9PSBuID8gay5zdHlsZShlLCB0LCBuKSA6IGsuY3NzKGUsIHQpIH0sIGUsIHQsIDEgPCBhcmd1bWVudHMubGVuZ3RoKSB9IH0pLCAoKGsuVHdlZW4gPSBudCkucHJvdG90eXBlID0geyBjb25zdHJ1Y3RvcjogbnQsIGluaXQ6IGZ1bmN0aW9uIChlLCB0LCBuLCByLCBpLCBvKSB7IHRoaXMuZWxlbSA9IGUsIHRoaXMucHJvcCA9IG4sIHRoaXMuZWFzaW5nID0gaSB8fCBrLmVhc2luZy5fZGVmYXVsdCwgdGhpcy5vcHRpb25zID0gdCwgdGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKSwgdGhpcy5lbmQgPSByLCB0aGlzLnVuaXQgPSBvIHx8IChrLmNzc051bWJlcltuXSA/IFwiXCIgOiBcInB4XCIpIH0sIGN1cjogZnVuY3Rpb24gKCkgeyB2YXIgZSA9IG50LnByb3BIb29rc1t0aGlzLnByb3BdOyByZXR1cm4gZSAmJiBlLmdldCA/IGUuZ2V0KHRoaXMpIDogbnQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKSB9LCBydW46IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuID0gbnQucHJvcEhvb2tzW3RoaXMucHJvcF07IHJldHVybiB0aGlzLm9wdGlvbnMuZHVyYXRpb24gPyB0aGlzLnBvcyA9IHQgPSBrLmVhc2luZ1t0aGlzLmVhc2luZ10oZSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogZSwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uKSA6IHRoaXMucG9zID0gdCA9IGUsIHRoaXMubm93ID0gKHRoaXMuZW5kIC0gdGhpcy5zdGFydCkgKiB0ICsgdGhpcy5zdGFydCwgdGhpcy5vcHRpb25zLnN0ZXAgJiYgdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzKSwgbiAmJiBuLnNldCA/IG4uc2V0KHRoaXMpIDogbnQucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSwgdGhpcyB9IH0pLmluaXQucHJvdG90eXBlID0gbnQucHJvdG90eXBlLCAobnQucHJvcEhvb2tzID0geyBfZGVmYXVsdDogeyBnZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0OyByZXR1cm4gMSAhPT0gZS5lbGVtLm5vZGVUeXBlIHx8IG51bGwgIT0gZS5lbGVtW2UucHJvcF0gJiYgbnVsbCA9PSBlLmVsZW0uc3R5bGVbZS5wcm9wXSA/IGUuZWxlbVtlLnByb3BdIDogKHQgPSBrLmNzcyhlLmVsZW0sIGUucHJvcCwgXCJcIikpICYmIFwiYXV0b1wiICE9PSB0ID8gdCA6IDAgfSwgc2V0OiBmdW5jdGlvbiAoZSkgeyBrLmZ4LnN0ZXBbZS5wcm9wXSA/IGsuZnguc3RlcFtlLnByb3BdKGUpIDogMSAhPT0gZS5lbGVtLm5vZGVUeXBlIHx8ICFrLmNzc0hvb2tzW2UucHJvcF0gJiYgbnVsbCA9PSBlLmVsZW0uc3R5bGVbR2UoZS5wcm9wKV0gPyBlLmVsZW1bZS5wcm9wXSA9IGUubm93IDogay5zdHlsZShlLmVsZW0sIGUucHJvcCwgZS5ub3cgKyBlLnVuaXQpIH0gfSB9KS5zY3JvbGxUb3AgPSBudC5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHsgc2V0OiBmdW5jdGlvbiAoZSkgeyBlLmVsZW0ubm9kZVR5cGUgJiYgZS5lbGVtLnBhcmVudE5vZGUgJiYgKGUuZWxlbVtlLnByb3BdID0gZS5ub3cpIH0gfSwgay5lYXNpbmcgPSB7IGxpbmVhcjogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgfSwgc3dpbmc6IGZ1bmN0aW9uIChlKSB7IHJldHVybiAuNSAtIE1hdGguY29zKGUgKiBNYXRoLlBJKSAvIDIgfSwgX2RlZmF1bHQ6IFwic3dpbmdcIiB9LCBrLmZ4ID0gbnQucHJvdG90eXBlLmluaXQsIGsuZnguc3RlcCA9IHt9OyB2YXIgcnQsIGl0LCBvdCwgYXQsIHN0ID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLCB1dCA9IC9xdWV1ZUhvb2tzJC87IGZ1bmN0aW9uIGx0KCkgeyBpdCAmJiAoITEgPT09IEUuaGlkZGVuICYmIEMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gQy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobHQpIDogQy5zZXRUaW1lb3V0KGx0LCBrLmZ4LmludGVydmFsKSwgay5meC50aWNrKCkpIH0gZnVuY3Rpb24gY3QoKSB7IHJldHVybiBDLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBydCA9IHZvaWQgMCB9KSwgcnQgPSBEYXRlLm5vdygpIH0gZnVuY3Rpb24gZnQoZSwgdCkgeyB2YXIgbiwgciA9IDAsIGkgPSB7IGhlaWdodDogZSB9OyBmb3IgKHQgPSB0ID8gMSA6IDA7IHIgPCA0OyByICs9IDIgLSB0KWlbXCJtYXJnaW5cIiArIChuID0gcmVbcl0pXSA9IGlbXCJwYWRkaW5nXCIgKyBuXSA9IGU7IHJldHVybiB0ICYmIChpLm9wYWNpdHkgPSBpLndpZHRoID0gZSksIGkgfSBmdW5jdGlvbiBwdChlLCB0LCBuKSB7IGZvciAodmFyIHIsIGkgPSAoZHQudHdlZW5lcnNbdF0gfHwgW10pLmNvbmNhdChkdC50d2VlbmVyc1tcIipcIl0pLCBvID0gMCwgYSA9IGkubGVuZ3RoOyBvIDwgYTsgbysrKWlmIChyID0gaVtvXS5jYWxsKG4sIHQsIGUpKSByZXR1cm4gciB9IGZ1bmN0aW9uIGR0KG8sIGUsIHQpIHsgdmFyIG4sIGEsIHIgPSAwLCBpID0gZHQucHJlZmlsdGVycy5sZW5ndGgsIHMgPSBrLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uICgpIHsgZGVsZXRlIHUuZWxlbSB9KSwgdSA9IGZ1bmN0aW9uICgpIHsgaWYgKGEpIHJldHVybiAhMTsgZm9yICh2YXIgZSA9IHJ0IHx8IGN0KCksIHQgPSBNYXRoLm1heCgwLCBsLnN0YXJ0VGltZSArIGwuZHVyYXRpb24gLSBlKSwgbiA9IDEgLSAodCAvIGwuZHVyYXRpb24gfHwgMCksIHIgPSAwLCBpID0gbC50d2VlbnMubGVuZ3RoOyByIDwgaTsgcisrKWwudHdlZW5zW3JdLnJ1bihuKTsgcmV0dXJuIHMubm90aWZ5V2l0aChvLCBbbCwgbiwgdF0pLCBuIDwgMSAmJiBpID8gdCA6IChpIHx8IHMubm90aWZ5V2l0aChvLCBbbCwgMSwgMF0pLCBzLnJlc29sdmVXaXRoKG8sIFtsXSksICExKSB9LCBsID0gcy5wcm9taXNlKHsgZWxlbTogbywgcHJvcHM6IGsuZXh0ZW5kKHt9LCBlKSwgb3B0czogay5leHRlbmQoITAsIHsgc3BlY2lhbEVhc2luZzoge30sIGVhc2luZzogay5lYXNpbmcuX2RlZmF1bHQgfSwgdCksIG9yaWdpbmFsUHJvcGVydGllczogZSwgb3JpZ2luYWxPcHRpb25zOiB0LCBzdGFydFRpbWU6IHJ0IHx8IGN0KCksIGR1cmF0aW9uOiB0LmR1cmF0aW9uLCB0d2VlbnM6IFtdLCBjcmVhdGVUd2VlbjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSBrLlR3ZWVuKG8sIGwub3B0cywgZSwgdCwgbC5vcHRzLnNwZWNpYWxFYXNpbmdbZV0gfHwgbC5vcHRzLmVhc2luZyk7IHJldHVybiBsLnR3ZWVucy5wdXNoKG4pLCBuIH0sIHN0b3A6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gMCwgbiA9IGUgPyBsLnR3ZWVucy5sZW5ndGggOiAwOyBpZiAoYSkgcmV0dXJuIHRoaXM7IGZvciAoYSA9ICEwOyB0IDwgbjsgdCsrKWwudHdlZW5zW3RdLnJ1bigxKTsgcmV0dXJuIGUgPyAocy5ub3RpZnlXaXRoKG8sIFtsLCAxLCAwXSksIHMucmVzb2x2ZVdpdGgobywgW2wsIGVdKSkgOiBzLnJlamVjdFdpdGgobywgW2wsIGVdKSwgdGhpcyB9IH0pLCBjID0gbC5wcm9wczsgZm9yICghZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIsIGksIG8sIGE7IGZvciAobiBpbiBlKSBpZiAoaSA9IHRbciA9IFYobildLCBvID0gZVtuXSwgQXJyYXkuaXNBcnJheShvKSAmJiAoaSA9IG9bMV0sIG8gPSBlW25dID0gb1swXSksIG4gIT09IHIgJiYgKGVbcl0gPSBvLCBkZWxldGUgZVtuXSksIChhID0gay5jc3NIb29rc1tyXSkgJiYgXCJleHBhbmRcIiBpbiBhKSBmb3IgKG4gaW4gbyA9IGEuZXhwYW5kKG8pLCBkZWxldGUgZVtyXSwgbykgbiBpbiBlIHx8IChlW25dID0gb1tuXSwgdFtuXSA9IGkpOyBlbHNlIHRbcl0gPSBpIH0oYywgbC5vcHRzLnNwZWNpYWxFYXNpbmcpOyByIDwgaTsgcisrKWlmIChuID0gZHQucHJlZmlsdGVyc1tyXS5jYWxsKGwsIG8sIGMsIGwub3B0cykpIHJldHVybiBtKG4uc3RvcCkgJiYgKGsuX3F1ZXVlSG9va3MobC5lbGVtLCBsLm9wdHMucXVldWUpLnN0b3AgPSBuLnN0b3AuYmluZChuKSksIG47IHJldHVybiBrLm1hcChjLCBwdCwgbCksIG0obC5vcHRzLnN0YXJ0KSAmJiBsLm9wdHMuc3RhcnQuY2FsbChvLCBsKSwgbC5wcm9ncmVzcyhsLm9wdHMucHJvZ3Jlc3MpLmRvbmUobC5vcHRzLmRvbmUsIGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpLCBrLmZ4LnRpbWVyKGsuZXh0ZW5kKHUsIHsgZWxlbTogbywgYW5pbTogbCwgcXVldWU6IGwub3B0cy5xdWV1ZSB9KSksIGwgfSBrLkFuaW1hdGlvbiA9IGsuZXh0ZW5kKGR0LCB7IHR3ZWVuZXJzOiB7IFwiKlwiOiBbZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4gPSB0aGlzLmNyZWF0ZVR3ZWVuKGUsIHQpOyByZXR1cm4gbGUobi5lbGVtLCBlLCBuZS5leGVjKHQpLCBuKSwgbiB9XSB9LCB0d2VlbmVyOiBmdW5jdGlvbiAoZSwgdCkgeyBtKGUpID8gKHQgPSBlLCBlID0gW1wiKlwiXSkgOiBlID0gZS5tYXRjaChSKTsgZm9yICh2YXIgbiwgciA9IDAsIGkgPSBlLmxlbmd0aDsgciA8IGk7IHIrKyluID0gZVtyXSwgZHQudHdlZW5lcnNbbl0gPSBkdC50d2VlbmVyc1tuXSB8fCBbXSwgZHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KSB9LCBwcmVmaWx0ZXJzOiBbZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEsIHMsIHUsIGwsIGMsIGYgPSBcIndpZHRoXCIgaW4gdCB8fCBcImhlaWdodFwiIGluIHQsIHAgPSB0aGlzLCBkID0ge30sIGggPSBlLnN0eWxlLCBnID0gZS5ub2RlVHlwZSAmJiBzZShlKSwgdiA9IFEuZ2V0KGUsIFwiZnhzaG93XCIpOyBmb3IgKHIgaW4gbi5xdWV1ZSB8fCAobnVsbCA9PSAoYSA9IGsuX3F1ZXVlSG9va3MoZSwgXCJmeFwiKSkudW5xdWV1ZWQgJiYgKGEudW5xdWV1ZWQgPSAwLCBzID0gYS5lbXB0eS5maXJlLCBhLmVtcHR5LmZpcmUgPSBmdW5jdGlvbiAoKSB7IGEudW5xdWV1ZWQgfHwgcygpIH0pLCBhLnVucXVldWVkKysgLCBwLmFsd2F5cyhmdW5jdGlvbiAoKSB7IHAuYWx3YXlzKGZ1bmN0aW9uICgpIHsgYS51bnF1ZXVlZC0tICwgay5xdWV1ZShlLCBcImZ4XCIpLmxlbmd0aCB8fCBhLmVtcHR5LmZpcmUoKSB9KSB9KSksIHQpIGlmIChpID0gdFtyXSwgc3QudGVzdChpKSkgeyBpZiAoZGVsZXRlIHRbcl0sIG8gPSBvIHx8IFwidG9nZ2xlXCIgPT09IGksIGkgPT09IChnID8gXCJoaWRlXCIgOiBcInNob3dcIikpIHsgaWYgKFwic2hvd1wiICE9PSBpIHx8ICF2IHx8IHZvaWQgMCA9PT0gdltyXSkgY29udGludWU7IGcgPSAhMCB9IGRbcl0gPSB2ICYmIHZbcl0gfHwgay5zdHlsZShlLCByKSB9IGlmICgodSA9ICFrLmlzRW1wdHlPYmplY3QodCkpIHx8ICFrLmlzRW1wdHlPYmplY3QoZCkpIGZvciAociBpbiBmICYmIDEgPT09IGUubm9kZVR5cGUgJiYgKG4ub3ZlcmZsb3cgPSBbaC5vdmVyZmxvdywgaC5vdmVyZmxvd1gsIGgub3ZlcmZsb3dZXSwgbnVsbCA9PSAobCA9IHYgJiYgdi5kaXNwbGF5KSAmJiAobCA9IFEuZ2V0KGUsIFwiZGlzcGxheVwiKSksIFwibm9uZVwiID09PSAoYyA9IGsuY3NzKGUsIFwiZGlzcGxheVwiKSkgJiYgKGwgPyBjID0gbCA6IChmZShbZV0sICEwKSwgbCA9IGUuc3R5bGUuZGlzcGxheSB8fCBsLCBjID0gay5jc3MoZSwgXCJkaXNwbGF5XCIpLCBmZShbZV0pKSksIChcImlubGluZVwiID09PSBjIHx8IFwiaW5saW5lLWJsb2NrXCIgPT09IGMgJiYgbnVsbCAhPSBsKSAmJiBcIm5vbmVcIiA9PT0gay5jc3MoZSwgXCJmbG9hdFwiKSAmJiAodSB8fCAocC5kb25lKGZ1bmN0aW9uICgpIHsgaC5kaXNwbGF5ID0gbCB9KSwgbnVsbCA9PSBsICYmIChjID0gaC5kaXNwbGF5LCBsID0gXCJub25lXCIgPT09IGMgPyBcIlwiIDogYykpLCBoLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiKSksIG4ub3ZlcmZsb3cgJiYgKGgub3ZlcmZsb3cgPSBcImhpZGRlblwiLCBwLmFsd2F5cyhmdW5jdGlvbiAoKSB7IGgub3ZlcmZsb3cgPSBuLm92ZXJmbG93WzBdLCBoLm92ZXJmbG93WCA9IG4ub3ZlcmZsb3dbMV0sIGgub3ZlcmZsb3dZID0gbi5vdmVyZmxvd1syXSB9KSksIHUgPSAhMSwgZCkgdSB8fCAodiA/IFwiaGlkZGVuXCIgaW4gdiAmJiAoZyA9IHYuaGlkZGVuKSA6IHYgPSBRLmFjY2VzcyhlLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IGwgfSksIG8gJiYgKHYuaGlkZGVuID0gIWcpLCBnICYmIGZlKFtlXSwgITApLCBwLmRvbmUoZnVuY3Rpb24gKCkgeyBmb3IgKHIgaW4gZyB8fCBmZShbZV0pLCBRLnJlbW92ZShlLCBcImZ4c2hvd1wiKSwgZCkgay5zdHlsZShlLCByLCBkW3JdKSB9KSksIHUgPSBwdChnID8gdltyXSA6IDAsIHIsIHApLCByIGluIHYgfHwgKHZbcl0gPSB1LnN0YXJ0LCBnICYmICh1LmVuZCA9IHUuc3RhcnQsIHUuc3RhcnQgPSAwKSkgfV0sIHByZWZpbHRlcjogZnVuY3Rpb24gKGUsIHQpIHsgdCA/IGR0LnByZWZpbHRlcnMudW5zaGlmdChlKSA6IGR0LnByZWZpbHRlcnMucHVzaChlKSB9IH0pLCBrLnNwZWVkID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIgPSBlICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgPyBrLmV4dGVuZCh7fSwgZSkgOiB7IGNvbXBsZXRlOiBuIHx8ICFuICYmIHQgfHwgbShlKSAmJiBlLCBkdXJhdGlvbjogZSwgZWFzaW5nOiBuICYmIHQgfHwgdCAmJiAhbSh0KSAmJiB0IH07IHJldHVybiBrLmZ4Lm9mZiA/IHIuZHVyYXRpb24gPSAwIDogXCJudW1iZXJcIiAhPSB0eXBlb2Ygci5kdXJhdGlvbiAmJiAoci5kdXJhdGlvbiBpbiBrLmZ4LnNwZWVkcyA/IHIuZHVyYXRpb24gPSBrLmZ4LnNwZWVkc1tyLmR1cmF0aW9uXSA6IHIuZHVyYXRpb24gPSBrLmZ4LnNwZWVkcy5fZGVmYXVsdCksIG51bGwgIT0gci5xdWV1ZSAmJiAhMCAhPT0gci5xdWV1ZSB8fCAoci5xdWV1ZSA9IFwiZnhcIiksIHIub2xkID0gci5jb21wbGV0ZSwgci5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgbShyLm9sZCkgJiYgci5vbGQuY2FsbCh0aGlzKSwgci5xdWV1ZSAmJiBrLmRlcXVldWUodGhpcywgci5xdWV1ZSkgfSwgciB9LCBrLmZuLmV4dGVuZCh7IGZhZGVUbzogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgcmV0dXJuIHRoaXMuZmlsdGVyKHNlKS5jc3MoXCJvcGFjaXR5XCIsIDApLnNob3coKS5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdCB9LCBlLCBuLCByKSB9LCBhbmltYXRlOiBmdW5jdGlvbiAodCwgZSwgbiwgcikgeyB2YXIgaSA9IGsuaXNFbXB0eU9iamVjdCh0KSwgbyA9IGsuc3BlZWQoZSwgbiwgciksIGEgPSBmdW5jdGlvbiAoKSB7IHZhciBlID0gZHQodGhpcywgay5leHRlbmQoe30sIHQpLCBvKTsgKGkgfHwgUS5nZXQodGhpcywgXCJmaW5pc2hcIikpICYmIGUuc3RvcCghMCkgfTsgcmV0dXJuIGEuZmluaXNoID0gYSwgaSB8fCAhMSA9PT0gby5xdWV1ZSA/IHRoaXMuZWFjaChhKSA6IHRoaXMucXVldWUoby5xdWV1ZSwgYSkgfSwgc3RvcDogZnVuY3Rpb24gKGksIGUsIG8pIHsgdmFyIGEgPSBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUuc3RvcDsgZGVsZXRlIGUuc3RvcCwgdChvKSB9OyByZXR1cm4gXCJzdHJpbmdcIiAhPSB0eXBlb2YgaSAmJiAobyA9IGUsIGUgPSBpLCBpID0gdm9pZCAwKSwgZSAmJiAhMSAhPT0gaSAmJiB0aGlzLnF1ZXVlKGkgfHwgXCJmeFwiLCBbXSksIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7IHZhciBlID0gITAsIHQgPSBudWxsICE9IGkgJiYgaSArIFwicXVldWVIb29rc1wiLCBuID0gay50aW1lcnMsIHIgPSBRLmdldCh0aGlzKTsgaWYgKHQpIHJbdF0gJiYgclt0XS5zdG9wICYmIGEoclt0XSk7IGVsc2UgZm9yICh0IGluIHIpIHJbdF0gJiYgclt0XS5zdG9wICYmIHV0LnRlc3QodCkgJiYgYShyW3RdKTsgZm9yICh0ID0gbi5sZW5ndGg7IHQtLTspblt0XS5lbGVtICE9PSB0aGlzIHx8IG51bGwgIT0gaSAmJiBuW3RdLnF1ZXVlICE9PSBpIHx8IChuW3RdLmFuaW0uc3RvcChvKSwgZSA9ICExLCBuLnNwbGljZSh0LCAxKSk7ICFlICYmIG8gfHwgay5kZXF1ZXVlKHRoaXMsIGkpIH0pIH0sIGZpbmlzaDogZnVuY3Rpb24gKGEpIHsgcmV0dXJuICExICE9PSBhICYmIChhID0gYSB8fCBcImZ4XCIpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyB2YXIgZSwgdCA9IFEuZ2V0KHRoaXMpLCBuID0gdFthICsgXCJxdWV1ZVwiXSwgciA9IHRbYSArIFwicXVldWVIb29rc1wiXSwgaSA9IGsudGltZXJzLCBvID0gbiA/IG4ubGVuZ3RoIDogMDsgZm9yICh0LmZpbmlzaCA9ICEwLCBrLnF1ZXVlKHRoaXMsIGEsIFtdKSwgciAmJiByLnN0b3AgJiYgci5zdG9wLmNhbGwodGhpcywgITApLCBlID0gaS5sZW5ndGg7IGUtLTspaVtlXS5lbGVtID09PSB0aGlzICYmIGlbZV0ucXVldWUgPT09IGEgJiYgKGlbZV0uYW5pbS5zdG9wKCEwKSwgaS5zcGxpY2UoZSwgMSkpOyBmb3IgKGUgPSAwOyBlIDwgbzsgZSsrKW5bZV0gJiYgbltlXS5maW5pc2ggJiYgbltlXS5maW5pc2guY2FsbCh0aGlzKTsgZGVsZXRlIHQuZmluaXNoIH0pIH0gfSksIGsuZWFjaChbXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiXSwgZnVuY3Rpb24gKGUsIHIpIHsgdmFyIGkgPSBrLmZuW3JdOyBrLmZuW3JdID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIG51bGwgPT0gZSB8fCBcImJvb2xlYW5cIiA9PSB0eXBlb2YgZSA/IGkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRoaXMuYW5pbWF0ZShmdChyLCAhMCksIGUsIHQsIG4pIH0gfSksIGsuZWFjaCh7IHNsaWRlRG93bjogZnQoXCJzaG93XCIpLCBzbGlkZVVwOiBmdChcImhpZGVcIiksIHNsaWRlVG9nZ2xlOiBmdChcInRvZ2dsZVwiKSwgZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sIGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSwgZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH0gfSwgZnVuY3Rpb24gKGUsIHIpIHsgay5mbltlXSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiB0aGlzLmFuaW1hdGUociwgZSwgdCwgbikgfSB9KSwgay50aW1lcnMgPSBbXSwgay5meC50aWNrID0gZnVuY3Rpb24gKCkgeyB2YXIgZSwgdCA9IDAsIG4gPSBrLnRpbWVyczsgZm9yIChydCA9IERhdGUubm93KCk7IHQgPCBuLmxlbmd0aDsgdCsrKShlID0gblt0XSkoKSB8fCBuW3RdICE9PSBlIHx8IG4uc3BsaWNlKHQtLSwgMSk7IG4ubGVuZ3RoIHx8IGsuZnguc3RvcCgpLCBydCA9IHZvaWQgMCB9LCBrLmZ4LnRpbWVyID0gZnVuY3Rpb24gKGUpIHsgay50aW1lcnMucHVzaChlKSwgay5meC5zdGFydCgpIH0sIGsuZnguaW50ZXJ2YWwgPSAxMywgay5meC5zdGFydCA9IGZ1bmN0aW9uICgpIHsgaXQgfHwgKGl0ID0gITAsIGx0KCkpIH0sIGsuZnguc3RvcCA9IGZ1bmN0aW9uICgpIHsgaXQgPSBudWxsIH0sIGsuZnguc3BlZWRzID0geyBzbG93OiA2MDAsIGZhc3Q6IDIwMCwgX2RlZmF1bHQ6IDQwMCB9LCBrLmZuLmRlbGF5ID0gZnVuY3Rpb24gKHIsIGUpIHsgcmV0dXJuIHIgPSBrLmZ4ICYmIGsuZnguc3BlZWRzW3JdIHx8IHIsIGUgPSBlIHx8IFwiZnhcIiwgdGhpcy5xdWV1ZShlLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IEMuc2V0VGltZW91dChlLCByKTsgdC5zdG9wID0gZnVuY3Rpb24gKCkgeyBDLmNsZWFyVGltZW91dChuKSB9IH0pIH0sIG90ID0gRS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksIGF0ID0gRS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLmFwcGVuZENoaWxkKEUuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSksIG90LnR5cGUgPSBcImNoZWNrYm94XCIsIHkuY2hlY2tPbiA9IFwiXCIgIT09IG90LnZhbHVlLCB5Lm9wdFNlbGVjdGVkID0gYXQuc2VsZWN0ZWQsIChvdCA9IEUuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS52YWx1ZSA9IFwidFwiLCBvdC50eXBlID0gXCJyYWRpb1wiLCB5LnJhZGlvVmFsdWUgPSBcInRcIiA9PT0gb3QudmFsdWU7IHZhciBodCwgZ3QgPSBrLmV4cHIuYXR0ckhhbmRsZTsgay5mbi5leHRlbmQoeyBhdHRyOiBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gXyh0aGlzLCBrLmF0dHIsIGUsIHQsIDEgPCBhcmd1bWVudHMubGVuZ3RoKSB9LCByZW1vdmVBdHRyOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgay5yZW1vdmVBdHRyKHRoaXMsIGUpIH0pIH0gfSksIGsuZXh0ZW5kKHsgYXR0cjogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8gPSBlLm5vZGVUeXBlOyBpZiAoMyAhPT0gbyAmJiA4ICE9PSBvICYmIDIgIT09IG8pIHJldHVybiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBlLmdldEF0dHJpYnV0ZSA/IGsucHJvcChlLCB0LCBuKSA6ICgxID09PSBvICYmIGsuaXNYTUxEb2MoZSkgfHwgKGkgPSBrLmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldIHx8IChrLmV4cHIubWF0Y2guYm9vbC50ZXN0KHQpID8gaHQgOiB2b2lkIDApKSwgdm9pZCAwICE9PSBuID8gbnVsbCA9PT0gbiA/IHZvaWQgay5yZW1vdmVBdHRyKGUsIHQpIDogaSAmJiBcInNldFwiIGluIGkgJiYgdm9pZCAwICE9PSAociA9IGkuc2V0KGUsIG4sIHQpKSA/IHIgOiAoZS5zZXRBdHRyaWJ1dGUodCwgbiArIFwiXCIpLCBuKSA6IGkgJiYgXCJnZXRcIiBpbiBpICYmIG51bGwgIT09IChyID0gaS5nZXQoZSwgdCkpID8gciA6IG51bGwgPT0gKHIgPSBrLmZpbmQuYXR0cihlLCB0KSkgPyB2b2lkIDAgOiByKSB9LCBhdHRySG9va3M6IHsgdHlwZTogeyBzZXQ6IGZ1bmN0aW9uIChlLCB0KSB7IGlmICgheS5yYWRpb1ZhbHVlICYmIFwicmFkaW9cIiA9PT0gdCAmJiBBKGUsIFwiaW5wdXRcIikpIHsgdmFyIG4gPSBlLnZhbHVlOyByZXR1cm4gZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHQpLCBuICYmIChlLnZhbHVlID0gbiksIHQgfSB9IH0gfSwgcmVtb3ZlQXR0cjogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIgPSAwLCBpID0gdCAmJiB0Lm1hdGNoKFIpOyBpZiAoaSAmJiAxID09PSBlLm5vZGVUeXBlKSB3aGlsZSAobiA9IGlbcisrXSkgZS5yZW1vdmVBdHRyaWJ1dGUobikgfSB9KSwgaHQgPSB7IHNldDogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuICExID09PSB0ID8gay5yZW1vdmVBdHRyKGUsIG4pIDogZS5zZXRBdHRyaWJ1dGUobiwgbiksIG4gfSB9LCBrLmVhY2goay5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgYSA9IGd0W3RdIHx8IGsuZmluZC5hdHRyOyBndFt0XSA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHZhciByLCBpLCBvID0gdC50b0xvd2VyQ2FzZSgpOyByZXR1cm4gbiB8fCAoaSA9IGd0W29dLCBndFtvXSA9IHIsIHIgPSBudWxsICE9IGEoZSwgdCwgbikgPyBvIDogbnVsbCwgZ3Rbb10gPSBpKSwgciB9IH0pOyB2YXIgdnQgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLCB5dCA9IC9eKD86YXxhcmVhKSQvaTsgZnVuY3Rpb24gbXQoZSkgeyByZXR1cm4gKGUubWF0Y2goUikgfHwgW10pLmpvaW4oXCIgXCIpIH0gZnVuY3Rpb24geHQoZSkgeyByZXR1cm4gZS5nZXRBdHRyaWJ1dGUgJiYgZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiIH0gZnVuY3Rpb24gYnQoZSkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShlKSA/IGUgOiBcInN0cmluZ1wiID09IHR5cGVvZiBlICYmIGUubWF0Y2goUikgfHwgW10gfSBrLmZuLmV4dGVuZCh7IHByb3A6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBfKHRoaXMsIGsucHJvcCwgZSwgdCwgMSA8IGFyZ3VtZW50cy5sZW5ndGgpIH0sIHJlbW92ZVByb3A6IGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBkZWxldGUgdGhpc1trLnByb3BGaXhbZV0gfHwgZV0gfSkgfSB9KSwgay5leHRlbmQoeyBwcm9wOiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbyA9IGUubm9kZVR5cGU7IGlmICgzICE9PSBvICYmIDggIT09IG8gJiYgMiAhPT0gbykgcmV0dXJuIDEgPT09IG8gJiYgay5pc1hNTERvYyhlKSB8fCAodCA9IGsucHJvcEZpeFt0XSB8fCB0LCBpID0gay5wcm9wSG9va3NbdF0pLCB2b2lkIDAgIT09IG4gPyBpICYmIFwic2V0XCIgaW4gaSAmJiB2b2lkIDAgIT09IChyID0gaS5zZXQoZSwgbiwgdCkpID8gciA6IGVbdF0gPSBuIDogaSAmJiBcImdldFwiIGluIGkgJiYgbnVsbCAhPT0gKHIgPSBpLmdldChlLCB0KSkgPyByIDogZVt0XSB9LCBwcm9wSG9va3M6IHsgdGFiSW5kZXg6IHsgZ2V0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGsuZmluZC5hdHRyKGUsIFwidGFiaW5kZXhcIik7IHJldHVybiB0ID8gcGFyc2VJbnQodCwgMTApIDogdnQudGVzdChlLm5vZGVOYW1lKSB8fCB5dC50ZXN0KGUubm9kZU5hbWUpICYmIGUuaHJlZiA/IDAgOiAtMSB9IH0gfSwgcHJvcEZpeDogeyBcImZvclwiOiBcImh0bWxGb3JcIiwgXCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiIH0gfSksIHkub3B0U2VsZWN0ZWQgfHwgKGsucHJvcEhvb2tzLnNlbGVjdGVkID0geyBnZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gZS5wYXJlbnROb2RlOyByZXR1cm4gdCAmJiB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsIG51bGwgfSwgc2V0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGUucGFyZW50Tm9kZTsgdCAmJiAodC5zZWxlY3RlZEluZGV4LCB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgpIH0gfSksIGsuZWFjaChbXCJ0YWJJbmRleFwiLCBcInJlYWRPbmx5XCIsIFwibWF4TGVuZ3RoXCIsIFwiY2VsbFNwYWNpbmdcIiwgXCJjZWxsUGFkZGluZ1wiLCBcInJvd1NwYW5cIiwgXCJjb2xTcGFuXCIsIFwidXNlTWFwXCIsIFwiZnJhbWVCb3JkZXJcIiwgXCJjb250ZW50RWRpdGFibGVcIl0sIGZ1bmN0aW9uICgpIHsgay5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV0gPSB0aGlzIH0pLCBrLmZuLmV4dGVuZCh7IGFkZENsYXNzOiBmdW5jdGlvbiAodCkgeyB2YXIgZSwgbiwgciwgaSwgbywgYSwgcywgdSA9IDA7IGlmIChtKHQpKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlKSB7IGsodGhpcykuYWRkQ2xhc3ModC5jYWxsKHRoaXMsIGUsIHh0KHRoaXMpKSkgfSk7IGlmICgoZSA9IGJ0KHQpKS5sZW5ndGgpIHdoaWxlIChuID0gdGhpc1t1KytdKSBpZiAoaSA9IHh0KG4pLCByID0gMSA9PT0gbi5ub2RlVHlwZSAmJiBcIiBcIiArIG10KGkpICsgXCIgXCIpIHsgYSA9IDA7IHdoaWxlIChvID0gZVthKytdKSByLmluZGV4T2YoXCIgXCIgKyBvICsgXCIgXCIpIDwgMCAmJiAociArPSBvICsgXCIgXCIpOyBpICE9PSAocyA9IG10KHIpKSAmJiBuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHMpIH0gcmV0dXJuIHRoaXMgfSwgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICh0KSB7IHZhciBlLCBuLCByLCBpLCBvLCBhLCBzLCB1ID0gMDsgaWYgKG0odCkpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHsgayh0aGlzKS5yZW1vdmVDbGFzcyh0LmNhbGwodGhpcywgZSwgeHQodGhpcykpKSB9KTsgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5hdHRyKFwiY2xhc3NcIiwgXCJcIik7IGlmICgoZSA9IGJ0KHQpKS5sZW5ndGgpIHdoaWxlIChuID0gdGhpc1t1KytdKSBpZiAoaSA9IHh0KG4pLCByID0gMSA9PT0gbi5ub2RlVHlwZSAmJiBcIiBcIiArIG10KGkpICsgXCIgXCIpIHsgYSA9IDA7IHdoaWxlIChvID0gZVthKytdKSB3aGlsZSAoLTEgPCByLmluZGV4T2YoXCIgXCIgKyBvICsgXCIgXCIpKSByID0gci5yZXBsYWNlKFwiIFwiICsgbyArIFwiIFwiLCBcIiBcIik7IGkgIT09IChzID0gbXQocikpICYmIG4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcykgfSByZXR1cm4gdGhpcyB9LCB0b2dnbGVDbGFzczogZnVuY3Rpb24gKGksIHQpIHsgdmFyIG8gPSB0eXBlb2YgaSwgYSA9IFwic3RyaW5nXCIgPT09IG8gfHwgQXJyYXkuaXNBcnJheShpKTsgcmV0dXJuIFwiYm9vbGVhblwiID09IHR5cGVvZiB0ICYmIGEgPyB0ID8gdGhpcy5hZGRDbGFzcyhpKSA6IHRoaXMucmVtb3ZlQ2xhc3MoaSkgOiBtKGkpID8gdGhpcy5lYWNoKGZ1bmN0aW9uIChlKSB7IGsodGhpcykudG9nZ2xlQ2xhc3MoaS5jYWxsKHRoaXMsIGUsIHh0KHRoaXMpLCB0KSwgdCkgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyB2YXIgZSwgdCwgbiwgcjsgaWYgKGEpIHsgdCA9IDAsIG4gPSBrKHRoaXMpLCByID0gYnQoaSk7IHdoaWxlIChlID0gclt0KytdKSBuLmhhc0NsYXNzKGUpID8gbi5yZW1vdmVDbGFzcyhlKSA6IG4uYWRkQ2xhc3MoZSkgfSBlbHNlIHZvaWQgMCAhPT0gaSAmJiBcImJvb2xlYW5cIiAhPT0gbyB8fCAoKGUgPSB4dCh0aGlzKSkgJiYgUS5zZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGUpLCB0aGlzLnNldEF0dHJpYnV0ZSAmJiB0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGUgfHwgITEgPT09IGkgPyBcIlwiIDogUS5nZXQodGhpcywgXCJfX2NsYXNzTmFtZV9fXCIpIHx8IFwiXCIpKSB9KSB9LCBoYXNDbGFzczogZnVuY3Rpb24gKGUpIHsgdmFyIHQsIG4sIHIgPSAwOyB0ID0gXCIgXCIgKyBlICsgXCIgXCI7IHdoaWxlIChuID0gdGhpc1tyKytdKSBpZiAoMSA9PT0gbi5ub2RlVHlwZSAmJiAtMSA8IChcIiBcIiArIG10KHh0KG4pKSArIFwiIFwiKS5pbmRleE9mKHQpKSByZXR1cm4gITA7IHJldHVybiAhMSB9IH0pOyB2YXIgd3QgPSAvXFxyL2c7IGsuZm4uZXh0ZW5kKHsgdmFsOiBmdW5jdGlvbiAobikgeyB2YXIgciwgZSwgaSwgdCA9IHRoaXNbMF07IHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGkgPSBtKG4pLCB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IDEgPT09IHRoaXMubm9kZVR5cGUgJiYgKG51bGwgPT0gKHQgPSBpID8gbi5jYWxsKHRoaXMsIGUsIGsodGhpcykudmFsKCkpIDogbikgPyB0ID0gXCJcIiA6IFwibnVtYmVyXCIgPT0gdHlwZW9mIHQgPyB0ICs9IFwiXCIgOiBBcnJheS5pc0FycmF5KHQpICYmICh0ID0gay5tYXAodCwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgPT0gZSA/IFwiXCIgOiBlICsgXCJcIiB9KSksIChyID0gay52YWxIb29rc1t0aGlzLnR5cGVdIHx8IGsudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkgJiYgXCJzZXRcIiBpbiByICYmIHZvaWQgMCAhPT0gci5zZXQodGhpcywgdCwgXCJ2YWx1ZVwiKSB8fCAodGhpcy52YWx1ZSA9IHQpKSB9KSkgOiB0ID8gKHIgPSBrLnZhbEhvb2tzW3QudHlwZV0gfHwgay52YWxIb29rc1t0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSAmJiBcImdldFwiIGluIHIgJiYgdm9pZCAwICE9PSAoZSA9IHIuZ2V0KHQsIFwidmFsdWVcIikpID8gZSA6IFwic3RyaW5nXCIgPT0gdHlwZW9mIChlID0gdC52YWx1ZSkgPyBlLnJlcGxhY2Uod3QsIFwiXCIpIDogbnVsbCA9PSBlID8gXCJcIiA6IGUgOiB2b2lkIDAgfSB9KSwgay5leHRlbmQoeyB2YWxIb29rczogeyBvcHRpb246IHsgZ2V0OiBmdW5jdGlvbiAoZSkgeyB2YXIgdCA9IGsuZmluZC5hdHRyKGUsIFwidmFsdWVcIik7IHJldHVybiBudWxsICE9IHQgPyB0IDogbXQoay50ZXh0KGUpKSB9IH0sIHNlbGVjdDogeyBnZXQ6IGZ1bmN0aW9uIChlKSB7IHZhciB0LCBuLCByLCBpID0gZS5vcHRpb25zLCBvID0gZS5zZWxlY3RlZEluZGV4LCBhID0gXCJzZWxlY3Qtb25lXCIgPT09IGUudHlwZSwgcyA9IGEgPyBudWxsIDogW10sIHUgPSBhID8gbyArIDEgOiBpLmxlbmd0aDsgZm9yIChyID0gbyA8IDAgPyB1IDogYSA/IG8gOiAwOyByIDwgdTsgcisrKWlmICgoKG4gPSBpW3JdKS5zZWxlY3RlZCB8fCByID09PSBvKSAmJiAhbi5kaXNhYmxlZCAmJiAoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhQShuLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIikpKSB7IGlmICh0ID0gayhuKS52YWwoKSwgYSkgcmV0dXJuIHQ7IHMucHVzaCh0KSB9IHJldHVybiBzIH0sIHNldDogZnVuY3Rpb24gKGUsIHQpIHsgdmFyIG4sIHIsIGkgPSBlLm9wdGlvbnMsIG8gPSBrLm1ha2VBcnJheSh0KSwgYSA9IGkubGVuZ3RoOyB3aGlsZSAoYS0tKSAoKHIgPSBpW2FdKS5zZWxlY3RlZCA9IC0xIDwgay5pbkFycmF5KGsudmFsSG9va3Mub3B0aW9uLmdldChyKSwgbykpICYmIChuID0gITApOyByZXR1cm4gbiB8fCAoZS5zZWxlY3RlZEluZGV4ID0gLTEpLCBvIH0gfSB9IH0pLCBrLmVhY2goW1wicmFkaW9cIiwgXCJjaGVja2JveFwiXSwgZnVuY3Rpb24gKCkgeyBrLnZhbEhvb2tzW3RoaXNdID0geyBzZXQ6IGZ1bmN0aW9uIChlLCB0KSB7IGlmIChBcnJheS5pc0FycmF5KHQpKSByZXR1cm4gZS5jaGVja2VkID0gLTEgPCBrLmluQXJyYXkoayhlKS52YWwoKSwgdCkgfSB9LCB5LmNoZWNrT24gfHwgKGsudmFsSG9va3NbdGhpc10uZ2V0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG51bGwgPT09IGUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPyBcIm9uXCIgOiBlLnZhbHVlIH0pIH0pLCB5LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIEM7IHZhciBUdCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLywgQ3QgPSBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH07IGsuZXh0ZW5kKGsuZXZlbnQsIHsgdHJpZ2dlcjogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEsIHMsIHUsIGwsIGMsIGYsIHAgPSBbbiB8fCBFXSwgZCA9IHYuY2FsbChlLCBcInR5cGVcIikgPyBlLnR5cGUgOiBlLCBoID0gdi5jYWxsKGUsIFwibmFtZXNwYWNlXCIpID8gZS5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpIDogW107IGlmIChvID0gZiA9IGEgPSBuID0gbiB8fCBFLCAzICE9PSBuLm5vZGVUeXBlICYmIDggIT09IG4ubm9kZVR5cGUgJiYgIVR0LnRlc3QoZCArIGsuZXZlbnQudHJpZ2dlcmVkKSAmJiAoLTEgPCBkLmluZGV4T2YoXCIuXCIpICYmIChkID0gKGggPSBkLnNwbGl0KFwiLlwiKSkuc2hpZnQoKSwgaC5zb3J0KCkpLCB1ID0gZC5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgZCwgKGUgPSBlW2suZXhwYW5kb10gPyBlIDogbmV3IGsuRXZlbnQoZCwgXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBlKSkuaXNUcmlnZ2VyID0gciA/IDIgOiAzLCBlLm5hbWVzcGFjZSA9IGguam9pbihcIi5cIiksIGUucm5hbWVzcGFjZSA9IGUubmFtZXNwYWNlID8gbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiICsgaC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikgKyBcIihcXFxcLnwkKVwiKSA6IG51bGwsIGUucmVzdWx0ID0gdm9pZCAwLCBlLnRhcmdldCB8fCAoZS50YXJnZXQgPSBuKSwgdCA9IG51bGwgPT0gdCA/IFtlXSA6IGsubWFrZUFycmF5KHQsIFtlXSksIGMgPSBrLmV2ZW50LnNwZWNpYWxbZF0gfHwge30sIHIgfHwgIWMudHJpZ2dlciB8fCAhMSAhPT0gYy50cmlnZ2VyLmFwcGx5KG4sIHQpKSkgeyBpZiAoIXIgJiYgIWMubm9CdWJibGUgJiYgIXgobikpIHsgZm9yIChzID0gYy5kZWxlZ2F0ZVR5cGUgfHwgZCwgVHQudGVzdChzICsgZCkgfHwgKG8gPSBvLnBhcmVudE5vZGUpOyBvOyBvID0gby5wYXJlbnROb2RlKXAucHVzaChvKSwgYSA9IG87IGEgPT09IChuLm93bmVyRG9jdW1lbnQgfHwgRSkgJiYgcC5wdXNoKGEuZGVmYXVsdFZpZXcgfHwgYS5wYXJlbnRXaW5kb3cgfHwgQykgfSBpID0gMDsgd2hpbGUgKChvID0gcFtpKytdKSAmJiAhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSBmID0gbywgZS50eXBlID0gMSA8IGkgPyBzIDogYy5iaW5kVHlwZSB8fCBkLCAobCA9IChRLmdldChvLCBcImV2ZW50c1wiKSB8fCB7fSlbZS50eXBlXSAmJiBRLmdldChvLCBcImhhbmRsZVwiKSkgJiYgbC5hcHBseShvLCB0KSwgKGwgPSB1ICYmIG9bdV0pICYmIGwuYXBwbHkgJiYgRyhvKSAmJiAoZS5yZXN1bHQgPSBsLmFwcGx5KG8sIHQpLCAhMSA9PT0gZS5yZXN1bHQgJiYgZS5wcmV2ZW50RGVmYXVsdCgpKTsgcmV0dXJuIGUudHlwZSA9IGQsIHIgfHwgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBjLl9kZWZhdWx0ICYmICExICE9PSBjLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksIHQpIHx8ICFHKG4pIHx8IHUgJiYgbShuW2RdKSAmJiAheChuKSAmJiAoKGEgPSBuW3VdKSAmJiAoblt1XSA9IG51bGwpLCBrLmV2ZW50LnRyaWdnZXJlZCA9IGQsIGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSAmJiBmLmFkZEV2ZW50TGlzdGVuZXIoZCwgQ3QpLCBuW2RdKCksIGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSAmJiBmLnJlbW92ZUV2ZW50TGlzdGVuZXIoZCwgQ3QpLCBrLmV2ZW50LnRyaWdnZXJlZCA9IHZvaWQgMCwgYSAmJiAoblt1XSA9IGEpKSwgZS5yZXN1bHQgfSB9LCBzaW11bGF0ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIgPSBrLmV4dGVuZChuZXcgay5FdmVudCwgbiwgeyB0eXBlOiBlLCBpc1NpbXVsYXRlZDogITAgfSk7IGsuZXZlbnQudHJpZ2dlcihyLCBudWxsLCB0KSB9IH0pLCBrLmZuLmV4dGVuZCh7IHRyaWdnZXI6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgeyBrLmV2ZW50LnRyaWdnZXIoZSwgdCwgdGhpcykgfSkgfSwgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdGhpc1swXTsgaWYgKG4pIHJldHVybiBrLmV2ZW50LnRyaWdnZXIoZSwgdCwgbiwgITApIH0gfSksIHkuZm9jdXNpbiB8fCBrLmVhY2goeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiAobiwgcikgeyB2YXIgaSA9IGZ1bmN0aW9uIChlKSB7IGsuZXZlbnQuc2ltdWxhdGUociwgZS50YXJnZXQsIGsuZXZlbnQuZml4KGUpKSB9OyBrLmV2ZW50LnNwZWNpYWxbcl0gPSB7IHNldHVwOiBmdW5jdGlvbiAoKSB7IHZhciBlID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsIHQgPSBRLmFjY2VzcyhlLCByKTsgdCB8fCBlLmFkZEV2ZW50TGlzdGVuZXIobiwgaSwgITApLCBRLmFjY2VzcyhlLCByLCAodCB8fCAwKSArIDEpIH0sIHRlYXJkb3duOiBmdW5jdGlvbiAoKSB7IHZhciBlID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsIHQgPSBRLmFjY2VzcyhlLCByKSAtIDE7IHQgPyBRLmFjY2VzcyhlLCByLCB0KSA6IChlLnJlbW92ZUV2ZW50TGlzdGVuZXIobiwgaSwgITApLCBRLnJlbW92ZShlLCByKSkgfSB9IH0pOyB2YXIgRXQgPSBDLmxvY2F0aW9uLCBrdCA9IERhdGUubm93KCksIFN0ID0gL1xcPy87IGsucGFyc2VYTUwgPSBmdW5jdGlvbiAoZSkgeyB2YXIgdDsgaWYgKCFlIHx8IFwic3RyaW5nXCIgIT0gdHlwZW9mIGUpIHJldHVybiBudWxsOyB0cnkgeyB0ID0gKG5ldyBDLkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKGUsIFwidGV4dC94bWxcIikgfSBjYXRjaCAoZSkgeyB0ID0gdm9pZCAwIH0gcmV0dXJuIHQgJiYgIXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwYXJzZXJlcnJvclwiKS5sZW5ndGggfHwgay5lcnJvcihcIkludmFsaWQgWE1MOiBcIiArIGUpLCB0IH07IHZhciBOdCA9IC9cXFtcXF0kLywgQXQgPSAvXFxyP1xcbi9nLCBEdCA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSwganQgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7IGZ1bmN0aW9uIHF0KG4sIGUsIHIsIGkpIHsgdmFyIHQ7IGlmIChBcnJheS5pc0FycmF5KGUpKSBrLmVhY2goZSwgZnVuY3Rpb24gKGUsIHQpIHsgciB8fCBOdC50ZXN0KG4pID8gaShuLCB0KSA6IHF0KG4gKyBcIltcIiArIChcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIG51bGwgIT0gdCA/IGUgOiBcIlwiKSArIFwiXVwiLCB0LCByLCBpKSB9KTsgZWxzZSBpZiAociB8fCBcIm9iamVjdFwiICE9PSB3KGUpKSBpKG4sIGUpOyBlbHNlIGZvciAodCBpbiBlKSBxdChuICsgXCJbXCIgKyB0ICsgXCJdXCIsIGVbdF0sIHIsIGkpIH0gay5wYXJhbSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gW10sIGkgPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IG0odCkgPyB0KCkgOiB0OyByW3IubGVuZ3RoXSA9IGVuY29kZVVSSUNvbXBvbmVudChlKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG51bGwgPT0gbiA/IFwiXCIgOiBuKSB9OyBpZiAobnVsbCA9PSBlKSByZXR1cm4gXCJcIjsgaWYgKEFycmF5LmlzQXJyYXkoZSkgfHwgZS5qcXVlcnkgJiYgIWsuaXNQbGFpbk9iamVjdChlKSkgay5lYWNoKGUsIGZ1bmN0aW9uICgpIHsgaSh0aGlzLm5hbWUsIHRoaXMudmFsdWUpIH0pOyBlbHNlIGZvciAobiBpbiBlKSBxdChuLCBlW25dLCB0LCBpKTsgcmV0dXJuIHIuam9pbihcIiZcIikgfSwgay5mbi5leHRlbmQoeyBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGsucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKSB9LCBzZXJpYWxpemVBcnJheTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkgeyB2YXIgZSA9IGsucHJvcCh0aGlzLCBcImVsZW1lbnRzXCIpOyByZXR1cm4gZSA/IGsubWFrZUFycmF5KGUpIDogdGhpcyB9KS5maWx0ZXIoZnVuY3Rpb24gKCkgeyB2YXIgZSA9IHRoaXMudHlwZTsgcmV0dXJuIHRoaXMubmFtZSAmJiAhayh0aGlzKS5pcyhcIjpkaXNhYmxlZFwiKSAmJiBqdC50ZXN0KHRoaXMubm9kZU5hbWUpICYmICFEdC50ZXN0KGUpICYmICh0aGlzLmNoZWNrZWQgfHwgIXBlLnRlc3QoZSkpIH0pLm1hcChmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IGsodGhpcykudmFsKCk7IHJldHVybiBudWxsID09IG4gPyBudWxsIDogQXJyYXkuaXNBcnJheShuKSA/IGsubWFwKG4sIGZ1bmN0aW9uIChlKSB7IHJldHVybiB7IG5hbWU6IHQubmFtZSwgdmFsdWU6IGUucmVwbGFjZShBdCwgXCJcXHJcXG5cIikgfSB9KSA6IHsgbmFtZTogdC5uYW1lLCB2YWx1ZTogbi5yZXBsYWNlKEF0LCBcIlxcclxcblwiKSB9IH0pLmdldCgpIH0gfSk7IHZhciBMdCA9IC8lMjAvZywgSHQgPSAvIy4qJC8sIE90ID0gLyhbPyZdKV89W14mXSovLCBQdCA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvZ20sIFJ0ID0gL14oPzpHRVR8SEVBRCkkLywgTXQgPSAvXlxcL1xcLy8sIEl0ID0ge30sIFd0ID0ge30sICR0ID0gXCIqL1wiLmNvbmNhdChcIipcIiksIEZ0ID0gRS5jcmVhdGVFbGVtZW50KFwiYVwiKTsgZnVuY3Rpb24gQnQobykgeyByZXR1cm4gZnVuY3Rpb24gKGUsIHQpIHsgXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSAmJiAodCA9IGUsIGUgPSBcIipcIik7IHZhciBuLCByID0gMCwgaSA9IGUudG9Mb3dlckNhc2UoKS5tYXRjaChSKSB8fCBbXTsgaWYgKG0odCkpIHdoaWxlIChuID0gaVtyKytdKSBcIitcIiA9PT0gblswXSA/IChuID0gbi5zbGljZSgxKSB8fCBcIipcIiwgKG9bbl0gPSBvW25dIHx8IFtdKS51bnNoaWZ0KHQpKSA6IChvW25dID0gb1tuXSB8fCBbXSkucHVzaCh0KSB9IH0gZnVuY3Rpb24gX3QodCwgaSwgbywgYSkgeyB2YXIgcyA9IHt9LCB1ID0gdCA9PT0gV3Q7IGZ1bmN0aW9uIGwoZSkgeyB2YXIgcjsgcmV0dXJuIHNbZV0gPSAhMCwgay5lYWNoKHRbZV0gfHwgW10sIGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gdChpLCBvLCBhKTsgcmV0dXJuIFwic3RyaW5nXCIgIT0gdHlwZW9mIG4gfHwgdSB8fCBzW25dID8gdSA/ICEociA9IG4pIDogdm9pZCAwIDogKGkuZGF0YVR5cGVzLnVuc2hpZnQobiksIGwobiksICExKSB9KSwgciB9IHJldHVybiBsKGkuZGF0YVR5cGVzWzBdKSB8fCAhc1tcIipcIl0gJiYgbChcIipcIikgfSBmdW5jdGlvbiB6dChlLCB0KSB7IHZhciBuLCByLCBpID0gay5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307IGZvciAobiBpbiB0KSB2b2lkIDAgIT09IHRbbl0gJiYgKChpW25dID8gZSA6IHIgfHwgKHIgPSB7fSkpW25dID0gdFtuXSk7IHJldHVybiByICYmIGsuZXh0ZW5kKCEwLCBlLCByKSwgZSB9IEZ0LmhyZWYgPSBFdC5ocmVmLCBrLmV4dGVuZCh7IGFjdGl2ZTogMCwgbGFzdE1vZGlmaWVkOiB7fSwgZXRhZzoge30sIGFqYXhTZXR0aW5nczogeyB1cmw6IEV0LmhyZWYsIHR5cGU6IFwiR0VUXCIsIGlzTG9jYWw6IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoRXQucHJvdG9jb2wpLCBnbG9iYWw6ICEwLCBwcm9jZXNzRGF0YTogITAsIGFzeW5jOiAhMCwgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsIGFjY2VwdHM6IHsgXCIqXCI6ICR0LCB0ZXh0OiBcInRleHQvcGxhaW5cIiwgaHRtbDogXCJ0ZXh0L2h0bWxcIiwgeG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIiwganNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIiB9LCBjb250ZW50czogeyB4bWw6IC9cXGJ4bWxcXGIvLCBodG1sOiAvXFxiaHRtbC8sIGpzb246IC9cXGJqc29uXFxiLyB9LCByZXNwb25zZUZpZWxkczogeyB4bWw6IFwicmVzcG9uc2VYTUxcIiwgdGV4dDogXCJyZXNwb25zZVRleHRcIiwganNvbjogXCJyZXNwb25zZUpTT05cIiB9LCBjb252ZXJ0ZXJzOiB7IFwiKiB0ZXh0XCI6IFN0cmluZywgXCJ0ZXh0IGh0bWxcIjogITAsIFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsIFwidGV4dCB4bWxcIjogay5wYXJzZVhNTCB9LCBmbGF0T3B0aW9uczogeyB1cmw6ICEwLCBjb250ZXh0OiAhMCB9IH0sIGFqYXhTZXR1cDogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIHQgPyB6dCh6dChlLCBrLmFqYXhTZXR0aW5ncyksIHQpIDogenQoay5hamF4U2V0dGluZ3MsIGUpIH0sIGFqYXhQcmVmaWx0ZXI6IEJ0KEl0KSwgYWpheFRyYW5zcG9ydDogQnQoV3QpLCBhamF4OiBmdW5jdGlvbiAoZSwgdCkgeyBcIm9iamVjdFwiID09IHR5cGVvZiBlICYmICh0ID0gZSwgZSA9IHZvaWQgMCksIHQgPSB0IHx8IHt9OyB2YXIgYywgZiwgcCwgbiwgZCwgciwgaCwgZywgaSwgbywgdiA9IGsuYWpheFNldHVwKHt9LCB0KSwgeSA9IHYuY29udGV4dCB8fCB2LCBtID0gdi5jb250ZXh0ICYmICh5Lm5vZGVUeXBlIHx8IHkuanF1ZXJ5KSA/IGsoeSkgOiBrLmV2ZW50LCB4ID0gay5EZWZlcnJlZCgpLCBiID0gay5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwgdyA9IHYuc3RhdHVzQ29kZSB8fCB7fSwgYSA9IHt9LCBzID0ge30sIHUgPSBcImNhbmNlbGVkXCIsIFQgPSB7IHJlYWR5U3RhdGU6IDAsIGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbiAoZSkgeyB2YXIgdDsgaWYgKGgpIHsgaWYgKCFuKSB7IG4gPSB7fTsgd2hpbGUgKHQgPSBQdC5leGVjKHApKSBuW3RbMV0udG9Mb3dlckNhc2UoKSArIFwiIFwiXSA9IChuW3RbMV0udG9Mb3dlckNhc2UoKSArIFwiIFwiXSB8fCBbXSkuY29uY2F0KHRbMl0pIH0gdCA9IG5bZS50b0xvd2VyQ2FzZSgpICsgXCIgXCJdIH0gcmV0dXJuIG51bGwgPT0gdCA/IG51bGwgOiB0LmpvaW4oXCIsIFwiKSB9LCBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGggPyBwIDogbnVsbCB9LCBzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gbnVsbCA9PSBoICYmIChlID0gc1tlLnRvTG93ZXJDYXNlKCldID0gc1tlLnRvTG93ZXJDYXNlKCldIHx8IGUsIGFbZV0gPSB0KSwgdGhpcyB9LCBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gbnVsbCA9PSBoICYmICh2Lm1pbWVUeXBlID0gZSksIHRoaXMgfSwgc3RhdHVzQ29kZTogZnVuY3Rpb24gKGUpIHsgdmFyIHQ7IGlmIChlKSBpZiAoaCkgVC5hbHdheXMoZVtULnN0YXR1c10pOyBlbHNlIGZvciAodCBpbiBlKSB3W3RdID0gW3dbdF0sIGVbdF1dOyByZXR1cm4gdGhpcyB9LCBhYm9ydDogZnVuY3Rpb24gKGUpIHsgdmFyIHQgPSBlIHx8IHU7IHJldHVybiBjICYmIGMuYWJvcnQodCksIGwoMCwgdCksIHRoaXMgfSB9OyBpZiAoeC5wcm9taXNlKFQpLCB2LnVybCA9ICgoZSB8fCB2LnVybCB8fCBFdC5ocmVmKSArIFwiXCIpLnJlcGxhY2UoTXQsIEV0LnByb3RvY29sICsgXCIvL1wiKSwgdi50eXBlID0gdC5tZXRob2QgfHwgdC50eXBlIHx8IHYubWV0aG9kIHx8IHYudHlwZSwgdi5kYXRhVHlwZXMgPSAodi5kYXRhVHlwZSB8fCBcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChSKSB8fCBbXCJcIl0sIG51bGwgPT0gdi5jcm9zc0RvbWFpbikgeyByID0gRS5jcmVhdGVFbGVtZW50KFwiYVwiKTsgdHJ5IHsgci5ocmVmID0gdi51cmwsIHIuaHJlZiA9IHIuaHJlZiwgdi5jcm9zc0RvbWFpbiA9IEZ0LnByb3RvY29sICsgXCIvL1wiICsgRnQuaG9zdCAhPSByLnByb3RvY29sICsgXCIvL1wiICsgci5ob3N0IH0gY2F0Y2ggKGUpIHsgdi5jcm9zc0RvbWFpbiA9ICEwIH0gfSBpZiAodi5kYXRhICYmIHYucHJvY2Vzc0RhdGEgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2Ygdi5kYXRhICYmICh2LmRhdGEgPSBrLnBhcmFtKHYuZGF0YSwgdi50cmFkaXRpb25hbCkpLCBfdChJdCwgdiwgdCwgVCksIGgpIHJldHVybiBUOyBmb3IgKGkgaW4gKGcgPSBrLmV2ZW50ICYmIHYuZ2xvYmFsKSAmJiAwID09IGsuYWN0aXZlKysgJiYgay5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpLCB2LnR5cGUgPSB2LnR5cGUudG9VcHBlckNhc2UoKSwgdi5oYXNDb250ZW50ID0gIVJ0LnRlc3Qodi50eXBlKSwgZiA9IHYudXJsLnJlcGxhY2UoSHQsIFwiXCIpLCB2Lmhhc0NvbnRlbnQgPyB2LmRhdGEgJiYgdi5wcm9jZXNzRGF0YSAmJiAwID09PSAodi5jb250ZW50VHlwZSB8fCBcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmICh2LmRhdGEgPSB2LmRhdGEucmVwbGFjZShMdCwgXCIrXCIpKSA6IChvID0gdi51cmwuc2xpY2UoZi5sZW5ndGgpLCB2LmRhdGEgJiYgKHYucHJvY2Vzc0RhdGEgfHwgXCJzdHJpbmdcIiA9PSB0eXBlb2Ygdi5kYXRhKSAmJiAoZiArPSAoU3QudGVzdChmKSA/IFwiJlwiIDogXCI/XCIpICsgdi5kYXRhLCBkZWxldGUgdi5kYXRhKSwgITEgPT09IHYuY2FjaGUgJiYgKGYgPSBmLnJlcGxhY2UoT3QsIFwiJDFcIiksIG8gPSAoU3QudGVzdChmKSA/IFwiJlwiIDogXCI/XCIpICsgXCJfPVwiICsga3QrKyArIG8pLCB2LnVybCA9IGYgKyBvKSwgdi5pZk1vZGlmaWVkICYmIChrLmxhc3RNb2RpZmllZFtmXSAmJiBULnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBrLmxhc3RNb2RpZmllZFtmXSksIGsuZXRhZ1tmXSAmJiBULnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsIGsuZXRhZ1tmXSkpLCAodi5kYXRhICYmIHYuaGFzQ29udGVudCAmJiAhMSAhPT0gdi5jb250ZW50VHlwZSB8fCB0LmNvbnRlbnRUeXBlKSAmJiBULnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgdi5jb250ZW50VHlwZSksIFQuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCB2LmRhdGFUeXBlc1swXSAmJiB2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dID8gdi5hY2NlcHRzW3YuZGF0YVR5cGVzWzBdXSArIChcIipcIiAhPT0gdi5kYXRhVHlwZXNbMF0gPyBcIiwgXCIgKyAkdCArIFwiOyBxPTAuMDFcIiA6IFwiXCIpIDogdi5hY2NlcHRzW1wiKlwiXSksIHYuaGVhZGVycykgVC5zZXRSZXF1ZXN0SGVhZGVyKGksIHYuaGVhZGVyc1tpXSk7IGlmICh2LmJlZm9yZVNlbmQgJiYgKCExID09PSB2LmJlZm9yZVNlbmQuY2FsbCh5LCBULCB2KSB8fCBoKSkgcmV0dXJuIFQuYWJvcnQoKTsgaWYgKHUgPSBcImFib3J0XCIsIGIuYWRkKHYuY29tcGxldGUpLCBULmRvbmUodi5zdWNjZXNzKSwgVC5mYWlsKHYuZXJyb3IpLCBjID0gX3QoV3QsIHYsIHQsIFQpKSB7IGlmIChULnJlYWR5U3RhdGUgPSAxLCBnICYmIG0udHJpZ2dlcihcImFqYXhTZW5kXCIsIFtULCB2XSksIGgpIHJldHVybiBUOyB2LmFzeW5jICYmIDAgPCB2LnRpbWVvdXQgJiYgKGQgPSBDLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBULmFib3J0KFwidGltZW91dFwiKSB9LCB2LnRpbWVvdXQpKTsgdHJ5IHsgaCA9ICExLCBjLnNlbmQoYSwgbCkgfSBjYXRjaCAoZSkgeyBpZiAoaCkgdGhyb3cgZTsgbCgtMSwgZSkgfSB9IGVsc2UgbCgtMSwgXCJObyBUcmFuc3BvcnRcIik7IGZ1bmN0aW9uIGwoZSwgdCwgbiwgcikgeyB2YXIgaSwgbywgYSwgcywgdSwgbCA9IHQ7IGggfHwgKGggPSAhMCwgZCAmJiBDLmNsZWFyVGltZW91dChkKSwgYyA9IHZvaWQgMCwgcCA9IHIgfHwgXCJcIiwgVC5yZWFkeVN0YXRlID0gMCA8IGUgPyA0IDogMCwgaSA9IDIwMCA8PSBlICYmIGUgPCAzMDAgfHwgMzA0ID09PSBlLCBuICYmIChzID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEsIHMgPSBlLmNvbnRlbnRzLCB1ID0gZS5kYXRhVHlwZXM7IHdoaWxlIChcIipcIiA9PT0gdVswXSkgdS5zaGlmdCgpLCB2b2lkIDAgPT09IHIgJiYgKHIgPSBlLm1pbWVUeXBlIHx8IHQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpOyBpZiAocikgZm9yIChpIGluIHMpIGlmIChzW2ldICYmIHNbaV0udGVzdChyKSkgeyB1LnVuc2hpZnQoaSk7IGJyZWFrIH0gaWYgKHVbMF0gaW4gbikgbyA9IHVbMF07IGVsc2UgeyBmb3IgKGkgaW4gbikgeyBpZiAoIXVbMF0gfHwgZS5jb252ZXJ0ZXJzW2kgKyBcIiBcIiArIHVbMF1dKSB7IG8gPSBpOyBicmVhayB9IGEgfHwgKGEgPSBpKSB9IG8gPSBvIHx8IGEgfSBpZiAobykgcmV0dXJuIG8gIT09IHVbMF0gJiYgdS51bnNoaWZ0KG8pLCBuW29dIH0odiwgVCwgbikpLCBzID0gZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgdmFyIGksIG8sIGEsIHMsIHUsIGwgPSB7fSwgYyA9IGUuZGF0YVR5cGVzLnNsaWNlKCk7IGlmIChjWzFdKSBmb3IgKGEgaW4gZS5jb252ZXJ0ZXJzKSBsW2EudG9Mb3dlckNhc2UoKV0gPSBlLmNvbnZlcnRlcnNbYV07IG8gPSBjLnNoaWZ0KCk7IHdoaWxlIChvKSBpZiAoZS5yZXNwb25zZUZpZWxkc1tvXSAmJiAobltlLnJlc3BvbnNlRmllbGRzW29dXSA9IHQpLCAhdSAmJiByICYmIGUuZGF0YUZpbHRlciAmJiAodCA9IGUuZGF0YUZpbHRlcih0LCBlLmRhdGFUeXBlKSksIHUgPSBvLCBvID0gYy5zaGlmdCgpKSBpZiAoXCIqXCIgPT09IG8pIG8gPSB1OyBlbHNlIGlmIChcIipcIiAhPT0gdSAmJiB1ICE9PSBvKSB7IGlmICghKGEgPSBsW3UgKyBcIiBcIiArIG9dIHx8IGxbXCIqIFwiICsgb10pKSBmb3IgKGkgaW4gbCkgaWYgKChzID0gaS5zcGxpdChcIiBcIikpWzFdID09PSBvICYmIChhID0gbFt1ICsgXCIgXCIgKyBzWzBdXSB8fCBsW1wiKiBcIiArIHNbMF1dKSkgeyAhMCA9PT0gYSA/IGEgPSBsW2ldIDogITAgIT09IGxbaV0gJiYgKG8gPSBzWzBdLCBjLnVuc2hpZnQoc1sxXSkpOyBicmVhayB9IGlmICghMCAhPT0gYSkgaWYgKGEgJiYgZVtcInRocm93c1wiXSkgdCA9IGEodCk7IGVsc2UgdHJ5IHsgdCA9IGEodCkgfSBjYXRjaCAoZSkgeyByZXR1cm4geyBzdGF0ZTogXCJwYXJzZXJlcnJvclwiLCBlcnJvcjogYSA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHUgKyBcIiB0byBcIiArIG8gfSB9IH0gcmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiB0IH0gfSh2LCBzLCBULCBpKSwgaSA/ICh2LmlmTW9kaWZpZWQgJiYgKCh1ID0gVC5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIikpICYmIChrLmxhc3RNb2RpZmllZFtmXSA9IHUpLCAodSA9IFQuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSAmJiAoay5ldGFnW2ZdID0gdSkpLCAyMDQgPT09IGUgfHwgXCJIRUFEXCIgPT09IHYudHlwZSA/IGwgPSBcIm5vY29udGVudFwiIDogMzA0ID09PSBlID8gbCA9IFwibm90bW9kaWZpZWRcIiA6IChsID0gcy5zdGF0ZSwgbyA9IHMuZGF0YSwgaSA9ICEoYSA9IHMuZXJyb3IpKSkgOiAoYSA9IGwsICFlICYmIGwgfHwgKGwgPSBcImVycm9yXCIsIGUgPCAwICYmIChlID0gMCkpKSwgVC5zdGF0dXMgPSBlLCBULnN0YXR1c1RleHQgPSAodCB8fCBsKSArIFwiXCIsIGkgPyB4LnJlc29sdmVXaXRoKHksIFtvLCBsLCBUXSkgOiB4LnJlamVjdFdpdGgoeSwgW1QsIGwsIGFdKSwgVC5zdGF0dXNDb2RlKHcpLCB3ID0gdm9pZCAwLCBnICYmIG0udHJpZ2dlcihpID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIiwgW1QsIHYsIGkgPyBvIDogYV0pLCBiLmZpcmVXaXRoKHksIFtULCBsXSksIGcgJiYgKG0udHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLCBbVCwgdl0pLCAtLWsuYWN0aXZlIHx8IGsuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSkgfSByZXR1cm4gVCB9LCBnZXRKU09OOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gay5nZXQoZSwgdCwgbiwgXCJqc29uXCIpIH0sIGdldFNjcmlwdDogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIGsuZ2V0KGUsIHZvaWQgMCwgdCwgXCJzY3JpcHRcIikgfSB9KSwgay5lYWNoKFtcImdldFwiLCBcInBvc3RcIl0sIGZ1bmN0aW9uIChlLCBpKSB7IGtbaV0gPSBmdW5jdGlvbiAoZSwgdCwgbiwgcikgeyByZXR1cm4gbSh0KSAmJiAociA9IHIgfHwgbiwgbiA9IHQsIHQgPSB2b2lkIDApLCBrLmFqYXgoay5leHRlbmQoeyB1cmw6IGUsIHR5cGU6IGksIGRhdGFUeXBlOiByLCBkYXRhOiB0LCBzdWNjZXNzOiBuIH0sIGsuaXNQbGFpbk9iamVjdChlKSAmJiBlKSkgfSB9KSwgay5fZXZhbFVybCA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiBrLmFqYXgoeyB1cmw6IGUsIHR5cGU6IFwiR0VUXCIsIGRhdGFUeXBlOiBcInNjcmlwdFwiLCBjYWNoZTogITAsIGFzeW5jOiAhMSwgZ2xvYmFsOiAhMSwgY29udmVydGVyczogeyBcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uICgpIHsgfSB9LCBkYXRhRmlsdGVyOiBmdW5jdGlvbiAoZSkgeyBrLmdsb2JhbEV2YWwoZSwgdCkgfSB9KSB9LCBrLmZuLmV4dGVuZCh7IHdyYXBBbGw6IGZ1bmN0aW9uIChlKSB7IHZhciB0OyByZXR1cm4gdGhpc1swXSAmJiAobShlKSAmJiAoZSA9IGUuY2FsbCh0aGlzWzBdKSksIHQgPSBrKGUsIHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLCB0aGlzWzBdLnBhcmVudE5vZGUgJiYgdC5pbnNlcnRCZWZvcmUodGhpc1swXSksIHQubWFwKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSB0aGlzOyB3aGlsZSAoZS5maXJzdEVsZW1lbnRDaGlsZCkgZSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7IHJldHVybiBlIH0pLmFwcGVuZCh0aGlzKSksIHRoaXMgfSwgd3JhcElubmVyOiBmdW5jdGlvbiAobikgeyByZXR1cm4gbShuKSA/IHRoaXMuZWFjaChmdW5jdGlvbiAoZSkgeyBrKHRoaXMpLndyYXBJbm5lcihuLmNhbGwodGhpcywgZSkpIH0pIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSBrKHRoaXMpLCB0ID0gZS5jb250ZW50cygpOyB0Lmxlbmd0aCA/IHQud3JhcEFsbChuKSA6IGUuYXBwZW5kKG4pIH0pIH0sIHdyYXA6IGZ1bmN0aW9uICh0KSB7IHZhciBuID0gbSh0KTsgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZSkgeyBrKHRoaXMpLndyYXBBbGwobiA/IHQuY2FsbCh0aGlzLCBlKSA6IHQpIH0pIH0sIHVud3JhcDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMucGFyZW50KGUpLm5vdChcImJvZHlcIikuZWFjaChmdW5jdGlvbiAoKSB7IGsodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKSB9KSwgdGhpcyB9IH0pLCBrLmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gIWsuZXhwci5wc2V1ZG9zLnZpc2libGUoZSkgfSwgay5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiAhIShlLm9mZnNldFdpZHRoIHx8IGUub2Zmc2V0SGVpZ2h0IHx8IGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpIH0sIGsuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uICgpIHsgdHJ5IHsgcmV0dXJuIG5ldyBDLlhNTEh0dHBSZXF1ZXN0IH0gY2F0Y2ggKGUpIHsgfSB9OyB2YXIgVXQgPSB7IDA6IDIwMCwgMTIyMzogMjA0IH0sIFh0ID0gay5hamF4U2V0dGluZ3MueGhyKCk7IHkuY29ycyA9ICEhWHQgJiYgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiBYdCwgeS5hamF4ID0gWHQgPSAhIVh0LCBrLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24gKGkpIHsgdmFyIG8sIGE7IGlmICh5LmNvcnMgfHwgWHQgJiYgIWkuY3Jvc3NEb21haW4pIHJldHVybiB7IHNlbmQ6IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuLCByID0gaS54aHIoKTsgaWYgKHIub3BlbihpLnR5cGUsIGkudXJsLCBpLmFzeW5jLCBpLnVzZXJuYW1lLCBpLnBhc3N3b3JkKSwgaS54aHJGaWVsZHMpIGZvciAobiBpbiBpLnhockZpZWxkcykgcltuXSA9IGkueGhyRmllbGRzW25dOyBmb3IgKG4gaW4gaS5taW1lVHlwZSAmJiByLm92ZXJyaWRlTWltZVR5cGUgJiYgci5vdmVycmlkZU1pbWVUeXBlKGkubWltZVR5cGUpLCBpLmNyb3NzRG9tYWluIHx8IGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdIHx8IChlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIiksIGUpIHIuc2V0UmVxdWVzdEhlYWRlcihuLCBlW25dKTsgbyA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IG8gJiYgKG8gPSBhID0gci5vbmxvYWQgPSByLm9uZXJyb3IgPSByLm9uYWJvcnQgPSByLm9udGltZW91dCA9IHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbCwgXCJhYm9ydFwiID09PSBlID8gci5hYm9ydCgpIDogXCJlcnJvclwiID09PSBlID8gXCJudW1iZXJcIiAhPSB0eXBlb2Ygci5zdGF0dXMgPyB0KDAsIFwiZXJyb3JcIikgOiB0KHIuc3RhdHVzLCByLnN0YXR1c1RleHQpIDogdChVdFtyLnN0YXR1c10gfHwgci5zdGF0dXMsIHIuc3RhdHVzVGV4dCwgXCJ0ZXh0XCIgIT09IChyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIikgfHwgXCJzdHJpbmdcIiAhPSB0eXBlb2Ygci5yZXNwb25zZVRleHQgPyB7IGJpbmFyeTogci5yZXNwb25zZSB9IDogeyB0ZXh0OiByLnJlc3BvbnNlVGV4dCB9LCByLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSkgfSB9LCByLm9ubG9hZCA9IG8oKSwgYSA9IHIub25lcnJvciA9IHIub250aW1lb3V0ID0gbyhcImVycm9yXCIpLCB2b2lkIDAgIT09IHIub25hYm9ydCA/IHIub25hYm9ydCA9IGEgOiByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgNCA9PT0gci5yZWFkeVN0YXRlICYmIEMuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IG8gJiYgYSgpIH0pIH0sIG8gPSBvKFwiYWJvcnRcIik7IHRyeSB7IHIuc2VuZChpLmhhc0NvbnRlbnQgJiYgaS5kYXRhIHx8IG51bGwpIH0gY2F0Y2ggKGUpIHsgaWYgKG8pIHRocm93IGUgfSB9LCBhYm9ydDogZnVuY3Rpb24gKCkgeyBvICYmIG8oKSB9IH0gfSksIGsuYWpheFByZWZpbHRlcihmdW5jdGlvbiAoZSkgeyBlLmNyb3NzRG9tYWluICYmIChlLmNvbnRlbnRzLnNjcmlwdCA9ICExKSB9KSwgay5hamF4U2V0dXAoeyBhY2NlcHRzOiB7IHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiIH0sIGNvbnRlbnRzOiB7IHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvIH0sIGNvbnZlcnRlcnM6IHsgXCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiAoZSkgeyByZXR1cm4gay5nbG9iYWxFdmFsKGUpLCBlIH0gfSB9KSwgay5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsIGZ1bmN0aW9uIChlKSB7IHZvaWQgMCA9PT0gZS5jYWNoZSAmJiAoZS5jYWNoZSA9ICExKSwgZS5jcm9zc0RvbWFpbiAmJiAoZS50eXBlID0gXCJHRVRcIikgfSksIGsuYWpheFRyYW5zcG9ydChcInNjcmlwdFwiLCBmdW5jdGlvbiAobikgeyB2YXIgciwgaTsgaWYgKG4uY3Jvc3NEb21haW4gfHwgbi5zY3JpcHRBdHRycykgcmV0dXJuIHsgc2VuZDogZnVuY3Rpb24gKGUsIHQpIHsgciA9IGsoXCI8c2NyaXB0PlwiKS5hdHRyKG4uc2NyaXB0QXR0cnMgfHwge30pLnByb3AoeyBjaGFyc2V0OiBuLnNjcmlwdENoYXJzZXQsIHNyYzogbi51cmwgfSkub24oXCJsb2FkIGVycm9yXCIsIGkgPSBmdW5jdGlvbiAoZSkgeyByLnJlbW92ZSgpLCBpID0gbnVsbCwgZSAmJiB0KFwiZXJyb3JcIiA9PT0gZS50eXBlID8gNDA0IDogMjAwLCBlLnR5cGUpIH0pLCBFLmhlYWQuYXBwZW5kQ2hpbGQoclswXSkgfSwgYWJvcnQ6IGZ1bmN0aW9uICgpIHsgaSAmJiBpKCkgfSB9IH0pOyB2YXIgVnQsIEd0ID0gW10sIFl0ID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/Lzsgay5hamF4U2V0dXAoeyBqc29ucDogXCJjYWxsYmFja1wiLCBqc29ucENhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHZhciBlID0gR3QucG9wKCkgfHwgay5leHBhbmRvICsgXCJfXCIgKyBrdCsrOyByZXR1cm4gdGhpc1tlXSA9ICEwLCBlIH0gfSksIGsuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIiwgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEgPSAhMSAhPT0gZS5qc29ucCAmJiAoWXQudGVzdChlLnVybCkgPyBcInVybFwiIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5kYXRhICYmIDAgPT09IChlLmNvbnRlbnRUeXBlIHx8IFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgWXQudGVzdChlLmRhdGEpICYmIFwiZGF0YVwiKTsgaWYgKGEgfHwgXCJqc29ucFwiID09PSBlLmRhdGFUeXBlc1swXSkgcmV0dXJuIHIgPSBlLmpzb25wQ2FsbGJhY2sgPSBtKGUuanNvbnBDYWxsYmFjaykgPyBlLmpzb25wQ2FsbGJhY2soKSA6IGUuanNvbnBDYWxsYmFjaywgYSA/IGVbYV0gPSBlW2FdLnJlcGxhY2UoWXQsIFwiJDFcIiArIHIpIDogITEgIT09IGUuanNvbnAgJiYgKGUudXJsICs9IChTdC50ZXN0KGUudXJsKSA/IFwiJlwiIDogXCI/XCIpICsgZS5qc29ucCArIFwiPVwiICsgciksIGUuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbyB8fCBrLmVycm9yKHIgKyBcIiB3YXMgbm90IGNhbGxlZFwiKSwgb1swXSB9LCBlLmRhdGFUeXBlc1swXSA9IFwianNvblwiLCBpID0gQ1tyXSwgQ1tyXSA9IGZ1bmN0aW9uICgpIHsgbyA9IGFyZ3VtZW50cyB9LCBuLmFsd2F5cyhmdW5jdGlvbiAoKSB7IHZvaWQgMCA9PT0gaSA/IGsoQykucmVtb3ZlUHJvcChyKSA6IENbcl0gPSBpLCBlW3JdICYmIChlLmpzb25wQ2FsbGJhY2sgPSB0Lmpzb25wQ2FsbGJhY2ssIEd0LnB1c2gocikpLCBvICYmIG0oaSkgJiYgaShvWzBdKSwgbyA9IGkgPSB2b2lkIDAgfSksIFwic2NyaXB0XCIgfSksIHkuY3JlYXRlSFRNTERvY3VtZW50ID0gKChWdCA9IEUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHkpLmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwgMiA9PT0gVnQuY2hpbGROb2Rlcy5sZW5ndGgpLCBrLnBhcnNlSFRNTCA9IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHJldHVybiBcInN0cmluZ1wiICE9IHR5cGVvZiBlID8gW10gOiAoXCJib29sZWFuXCIgPT0gdHlwZW9mIHQgJiYgKG4gPSB0LCB0ID0gITEpLCB0IHx8ICh5LmNyZWF0ZUhUTUxEb2N1bWVudCA/ICgociA9ICh0ID0gRS5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIikpLmNyZWF0ZUVsZW1lbnQoXCJiYXNlXCIpKS5ocmVmID0gRS5sb2NhdGlvbi5ocmVmLCB0LmhlYWQuYXBwZW5kQ2hpbGQocikpIDogdCA9IEUpLCBvID0gIW4gJiYgW10sIChpID0gRC5leGVjKGUpKSA/IFt0LmNyZWF0ZUVsZW1lbnQoaVsxXSldIDogKGkgPSB3ZShbZV0sIHQsIG8pLCBvICYmIG8ubGVuZ3RoICYmIGsobykucmVtb3ZlKCksIGsubWVyZ2UoW10sIGkuY2hpbGROb2RlcykpKTsgdmFyIHIsIGksIG8gfSwgay5mbi5sb2FkID0gZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHIsIGksIG8sIGEgPSB0aGlzLCBzID0gZS5pbmRleE9mKFwiIFwiKTsgcmV0dXJuIC0xIDwgcyAmJiAociA9IG10KGUuc2xpY2UocykpLCBlID0gZS5zbGljZSgwLCBzKSksIG0odCkgPyAobiA9IHQsIHQgPSB2b2lkIDApIDogdCAmJiBcIm9iamVjdFwiID09IHR5cGVvZiB0ICYmIChpID0gXCJQT1NUXCIpLCAwIDwgYS5sZW5ndGggJiYgay5hamF4KHsgdXJsOiBlLCB0eXBlOiBpIHx8IFwiR0VUXCIsIGRhdGFUeXBlOiBcImh0bWxcIiwgZGF0YTogdCB9KS5kb25lKGZ1bmN0aW9uIChlKSB7IG8gPSBhcmd1bWVudHMsIGEuaHRtbChyID8gayhcIjxkaXY+XCIpLmFwcGVuZChrLnBhcnNlSFRNTChlKSkuZmluZChyKSA6IGUpIH0pLmFsd2F5cyhuICYmIGZ1bmN0aW9uIChlLCB0KSB7IGEuZWFjaChmdW5jdGlvbiAoKSB7IG4uYXBwbHkodGhpcywgbyB8fCBbZS5yZXNwb25zZVRleHQsIHQsIGVdKSB9KSB9KSwgdGhpcyB9LCBrLmVhY2goW1wiYWpheFN0YXJ0XCIsIFwiYWpheFN0b3BcIiwgXCJhamF4Q29tcGxldGVcIiwgXCJhamF4RXJyb3JcIiwgXCJhamF4U3VjY2Vzc1wiLCBcImFqYXhTZW5kXCJdLCBmdW5jdGlvbiAoZSwgdCkgeyBrLmZuW3RdID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMub24odCwgZSkgfSB9KSwgay5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiAodCkgeyByZXR1cm4gay5ncmVwKGsudGltZXJzLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdCA9PT0gZS5lbGVtIH0pLmxlbmd0aCB9LCBrLm9mZnNldCA9IHsgc2V0T2Zmc2V0OiBmdW5jdGlvbiAoZSwgdCwgbikgeyB2YXIgciwgaSwgbywgYSwgcywgdSwgbCA9IGsuY3NzKGUsIFwicG9zaXRpb25cIiksIGMgPSBrKGUpLCBmID0ge307IFwic3RhdGljXCIgPT09IGwgJiYgKGUuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCIpLCBzID0gYy5vZmZzZXQoKSwgbyA9IGsuY3NzKGUsIFwidG9wXCIpLCB1ID0gay5jc3MoZSwgXCJsZWZ0XCIpLCAoXCJhYnNvbHV0ZVwiID09PSBsIHx8IFwiZml4ZWRcIiA9PT0gbCkgJiYgLTEgPCAobyArIHUpLmluZGV4T2YoXCJhdXRvXCIpID8gKGEgPSAociA9IGMucG9zaXRpb24oKSkudG9wLCBpID0gci5sZWZ0KSA6IChhID0gcGFyc2VGbG9hdChvKSB8fCAwLCBpID0gcGFyc2VGbG9hdCh1KSB8fCAwKSwgbSh0KSAmJiAodCA9IHQuY2FsbChlLCBuLCBrLmV4dGVuZCh7fSwgcykpKSwgbnVsbCAhPSB0LnRvcCAmJiAoZi50b3AgPSB0LnRvcCAtIHMudG9wICsgYSksIG51bGwgIT0gdC5sZWZ0ICYmIChmLmxlZnQgPSB0LmxlZnQgLSBzLmxlZnQgKyBpKSwgXCJ1c2luZ1wiIGluIHQgPyB0LnVzaW5nLmNhbGwoZSwgZikgOiBjLmNzcyhmKSB9IH0sIGsuZm4uZXh0ZW5kKHsgb2Zmc2V0OiBmdW5jdGlvbiAodCkgeyBpZiAoYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHZvaWQgMCA9PT0gdCA/IHRoaXMgOiB0aGlzLmVhY2goZnVuY3Rpb24gKGUpIHsgay5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsIHQsIGUpIH0pOyB2YXIgZSwgbiwgciA9IHRoaXNbMF07IHJldHVybiByID8gci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA/IChlID0gci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbiA9IHIub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldywgeyB0b3A6IGUudG9wICsgbi5wYWdlWU9mZnNldCwgbGVmdDogZS5sZWZ0ICsgbi5wYWdlWE9mZnNldCB9KSA6IHsgdG9wOiAwLCBsZWZ0OiAwIH0gOiB2b2lkIDAgfSwgcG9zaXRpb246IGZ1bmN0aW9uICgpIHsgaWYgKHRoaXNbMF0pIHsgdmFyIGUsIHQsIG4sIHIgPSB0aGlzWzBdLCBpID0geyB0b3A6IDAsIGxlZnQ6IDAgfTsgaWYgKFwiZml4ZWRcIiA9PT0gay5jc3MociwgXCJwb3NpdGlvblwiKSkgdCA9IHIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IGVsc2UgeyB0ID0gdGhpcy5vZmZzZXQoKSwgbiA9IHIub3duZXJEb2N1bWVudCwgZSA9IHIub2Zmc2V0UGFyZW50IHx8IG4uZG9jdW1lbnRFbGVtZW50OyB3aGlsZSAoZSAmJiAoZSA9PT0gbi5ib2R5IHx8IGUgPT09IG4uZG9jdW1lbnRFbGVtZW50KSAmJiBcInN0YXRpY1wiID09PSBrLmNzcyhlLCBcInBvc2l0aW9uXCIpKSBlID0gZS5wYXJlbnROb2RlOyBlICYmIGUgIT09IHIgJiYgMSA9PT0gZS5ub2RlVHlwZSAmJiAoKGkgPSBrKGUpLm9mZnNldCgpKS50b3AgKz0gay5jc3MoZSwgXCJib3JkZXJUb3BXaWR0aFwiLCAhMCksIGkubGVmdCArPSBrLmNzcyhlLCBcImJvcmRlckxlZnRXaWR0aFwiLCAhMCkpIH0gcmV0dXJuIHsgdG9wOiB0LnRvcCAtIGkudG9wIC0gay5jc3MociwgXCJtYXJnaW5Ub3BcIiwgITApLCBsZWZ0OiB0LmxlZnQgLSBpLmxlZnQgLSBrLmNzcyhyLCBcIm1hcmdpbkxlZnRcIiwgITApIH0gfSB9LCBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICgpIHsgdmFyIGUgPSB0aGlzLm9mZnNldFBhcmVudDsgd2hpbGUgKGUgJiYgXCJzdGF0aWNcIiA9PT0gay5jc3MoZSwgXCJwb3NpdGlvblwiKSkgZSA9IGUub2Zmc2V0UGFyZW50OyByZXR1cm4gZSB8fCBpZSB9KSB9IH0pLCBrLmVhY2goeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uICh0LCBpKSB7IHZhciBvID0gXCJwYWdlWU9mZnNldFwiID09PSBpOyBrLmZuW3RdID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF8odGhpcywgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHI7IGlmICh4KGUpID8gciA9IGUgOiA5ID09PSBlLm5vZGVUeXBlICYmIChyID0gZS5kZWZhdWx0VmlldyksIHZvaWQgMCA9PT0gbikgcmV0dXJuIHIgPyByW2ldIDogZVt0XTsgciA/IHIuc2Nyb2xsVG8obyA/IHIucGFnZVhPZmZzZXQgOiBuLCBvID8gbiA6IHIucGFnZVlPZmZzZXQpIDogZVt0XSA9IG4gfSwgdCwgZSwgYXJndW1lbnRzLmxlbmd0aCkgfSB9KSwgay5lYWNoKFtcInRvcFwiLCBcImxlZnRcIl0sIGZ1bmN0aW9uIChlLCBuKSB7IGsuY3NzSG9va3Nbbl0gPSB6ZSh5LnBpeGVsUG9zaXRpb24sIGZ1bmN0aW9uIChlLCB0KSB7IGlmICh0KSByZXR1cm4gdCA9IF9lKGUsIG4pLCAkZS50ZXN0KHQpID8gayhlKS5wb3NpdGlvbigpW25dICsgXCJweFwiIDogdCB9KSB9KSwgay5lYWNoKHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uIChhLCBzKSB7IGsuZWFjaCh7IHBhZGRpbmc6IFwiaW5uZXJcIiArIGEsIGNvbnRlbnQ6IHMsIFwiXCI6IFwib3V0ZXJcIiArIGEgfSwgZnVuY3Rpb24gKHIsIG8pIHsgay5mbltvXSA9IGZ1bmN0aW9uIChlLCB0KSB7IHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCAmJiAociB8fCBcImJvb2xlYW5cIiAhPSB0eXBlb2YgZSksIGkgPSByIHx8ICghMCA9PT0gZSB8fCAhMCA9PT0gdCA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiKTsgcmV0dXJuIF8odGhpcywgZnVuY3Rpb24gKGUsIHQsIG4pIHsgdmFyIHI7IHJldHVybiB4KGUpID8gMCA9PT0gby5pbmRleE9mKFwib3V0ZXJcIikgPyBlW1wiaW5uZXJcIiArIGFdIDogZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIGFdIDogOSA9PT0gZS5ub2RlVHlwZSA/IChyID0gZS5kb2N1bWVudEVsZW1lbnQsIE1hdGgubWF4KGUuYm9keVtcInNjcm9sbFwiICsgYV0sIHJbXCJzY3JvbGxcIiArIGFdLCBlLmJvZHlbXCJvZmZzZXRcIiArIGFdLCByW1wib2Zmc2V0XCIgKyBhXSwgcltcImNsaWVudFwiICsgYV0pKSA6IHZvaWQgMCA9PT0gbiA/IGsuY3NzKGUsIHQsIGkpIDogay5zdHlsZShlLCB0LCBuLCBpKSB9LCBzLCBuID8gZSA6IHZvaWQgMCwgbikgfSB9KSB9KSwgay5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSwgZnVuY3Rpb24gKGUsIG4pIHsgay5mbltuXSA9IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiAwIDwgYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMub24obiwgbnVsbCwgZSwgdCkgOiB0aGlzLnRyaWdnZXIobikgfSB9KSwgay5mbi5leHRlbmQoeyBob3ZlcjogZnVuY3Rpb24gKGUsIHQpIHsgcmV0dXJuIHRoaXMubW91c2VlbnRlcihlKS5tb3VzZWxlYXZlKHQgfHwgZSkgfSB9KSwgay5mbi5leHRlbmQoeyBiaW5kOiBmdW5jdGlvbiAoZSwgdCwgbikgeyByZXR1cm4gdGhpcy5vbihlLCBudWxsLCB0LCBuKSB9LCB1bmJpbmQ6IGZ1bmN0aW9uIChlLCB0KSB7IHJldHVybiB0aGlzLm9mZihlLCBudWxsLCB0KSB9LCBkZWxlZ2F0ZTogZnVuY3Rpb24gKGUsIHQsIG4sIHIpIHsgcmV0dXJuIHRoaXMub24odCwgZSwgbiwgcikgfSwgdW5kZWxlZ2F0ZTogZnVuY3Rpb24gKGUsIHQsIG4pIHsgcmV0dXJuIDEgPT09IGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLm9mZihlLCBcIioqXCIpIDogdGhpcy5vZmYodCwgZSB8fCBcIioqXCIsIG4pIH0gfSksIGsucHJveHkgPSBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiwgciwgaTsgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgJiYgKG4gPSBlW3RdLCB0ID0gZSwgZSA9IG4pLCBtKGUpKSByZXR1cm4gciA9IHMuY2FsbChhcmd1bWVudHMsIDIpLCAoaSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGUuYXBwbHkodCB8fCB0aGlzLCByLmNvbmNhdChzLmNhbGwoYXJndW1lbnRzKSkpIH0pLmd1aWQgPSBlLmd1aWQgPSBlLmd1aWQgfHwgay5ndWlkKysgLCBpIH0sIGsuaG9sZFJlYWR5ID0gZnVuY3Rpb24gKGUpIHsgZSA/IGsucmVhZHlXYWl0KysgOiBrLnJlYWR5KCEwKSB9LCBrLmlzQXJyYXkgPSBBcnJheS5pc0FycmF5LCBrLnBhcnNlSlNPTiA9IEpTT04ucGFyc2UsIGsubm9kZU5hbWUgPSBBLCBrLmlzRnVuY3Rpb24gPSBtLCBrLmlzV2luZG93ID0geCwgay5jYW1lbENhc2UgPSBWLCBrLnR5cGUgPSB3LCBrLm5vdyA9IERhdGUubm93LCBrLmlzTnVtZXJpYyA9IGZ1bmN0aW9uIChlKSB7IHZhciB0ID0gay50eXBlKGUpOyByZXR1cm4gKFwibnVtYmVyXCIgPT09IHQgfHwgXCJzdHJpbmdcIiA9PT0gdCkgJiYgIWlzTmFOKGUgLSBwYXJzZUZsb2F0KGUpKSB9LCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kICYmIGRlZmluZShcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gayB9KTsgdmFyIFF0ID0gQy5qUXVlcnksIEp0ID0gQy4kOyByZXR1cm4gay5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIEMuJCA9PT0gayAmJiAoQy4kID0gSnQpLCBlICYmIEMualF1ZXJ5ID09PSBrICYmIChDLmpRdWVyeSA9IFF0KSwgayB9LCBlIHx8IChDLmpRdWVyeSA9IEMuJCA9IGspLCBrIH0pO1xyXG5cclxuLyohQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMTMsIEhlaW5yaWNoIEdvZWJsLCBMaWNlbnNlOiBNSVQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaGdvZWJsL21vYmlsZS1kZXRlY3QuanMqL1xyXG4hZnVuY3Rpb24oYSxiKXthKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYShhLGIpe3JldHVybiBudWxsIT1hJiZudWxsIT1iJiZhLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gYyhhLGIpe3ZhciBjLGQsZT1hLmxlbmd0aDtpZighZXx8IWIpcmV0dXJuITE7Zm9yKGM9Yi50b0xvd2VyQ2FzZSgpLGQ9MDtkPGU7KytkKWlmKGM9PT1hW2RdLnRvTG93ZXJDYXNlKCkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZChhKXtmb3IodmFyIGIgaW4gYSloLmNhbGwoYSxiKSYmKGFbYl09bmV3IFJlZ0V4cChhW2JdLFwiaVwiKSl9ZnVuY3Rpb24gZShhLGIpe3RoaXMudWE9YXx8XCJcIix0aGlzLl9jYWNoZT17fSx0aGlzLm1heFBob25lV2lkdGg9Ynx8NjAwfXZhciBmPXt9O2YubW9iaWxlRGV0ZWN0UnVsZXM9e3Bob25lczp7aVBob25lOlwiXFxcXGJpUGhvbmVcXFxcYnxcXFxcYmlQb2RcXFxcYlwiLEJsYWNrQmVycnk6XCJCbGFja0JlcnJ5fFxcXFxiQkIxMFxcXFxifHJpbVswLTldK1wiLEhUQzpcIkhUQ3xIVEMuKihTZW5zYXRpb258RXZvfFZpc2lvbnxFeHBsb3Jlcnw2ODAwfDgxMDB8ODkwMHxBNzI3MnxTNTEwZXxDMTEwZXxMZWdlbmR8RGVzaXJlfFQ4MjgyKXxBUFg1MTVDS1R8UXRlazkwOTB8QVBBOTI5MktUfEhEX21pbml8U2Vuc2F0aW9uLipaNzEwZXxQRzg2MTAwfFo3MTVlfERlc2lyZS4qKEE4MTgxfEhEKXxBRFI2MjAwfEFEUjY0MDBMfEFEUjY0MjV8MDAxSFR8SW5zcGlyZSA0R3xBbmRyb2lkLipcXFxcYkVWT1xcXFxifFQtTW9iaWxlIEcxfFo1MjBtXCIsTmV4dXM6XCJOZXh1cyBPbmV8TmV4dXMgU3xHYWxheHkuKk5leHVzfEFuZHJvaWQuKk5leHVzLipNb2JpbGV8TmV4dXMgNHxOZXh1cyA1fE5leHVzIDZcIixEZWxsOlwiRGVsbC4qU3RyZWFrfERlbGwuKkFlcm98RGVsbC4qVmVudWV8REVMTC4qVmVudWUgUHJvfERlbGwgRmxhc2h8RGVsbCBTbW9rZXxEZWxsIE1pbmkgM2lYfFhDRDI4fFhDRDM1fFxcXFxiMDAxRExcXFxcYnxcXFxcYjEwMURMXFxcXGJ8XFxcXGJHUzAxXFxcXGJcIixNb3Rvcm9sYTpcIk1vdG9yb2xhfERST0lEWHxEUk9JRCBCSU9OSUN8XFxcXGJEcm9pZFxcXFxiLipCdWlsZHxBbmRyb2lkLipYb29tfEhSSTM5fE1PVC18QTEyNjB8QTE2ODB8QTU1NXxBODUzfEE4NTV8QTk1M3xBOTU1fEE5NTZ8TW90b3JvbGEuKkVMRUNUUklGWXxNb3Rvcm9sYS4qaTF8aTg2N3xpOTQwfE1CMjAwfE1CMzAwfE1CNTAxfE1CNTAyfE1CNTA4fE1CNTExfE1CNTIwfE1CNTI1fE1CNTI2fE1CNjExfE1CNjEyfE1CNjMyfE1CODEwfE1CODU1fE1CODYwfE1CODYxfE1CODY1fE1CODcwfE1FNTAxfE1FNTAyfE1FNTExfE1FNTI1fE1FNjAwfE1FNjMyfE1FNzIyfE1FODExfE1FODYwfE1FODYzfE1FODY1fE1UNjIwfE1UNzEwfE1UNzE2fE1UNzIwfE1UODEwfE1UODcwfE1UOTE3fE1vdG9yb2xhLipUSVRBTklVTXxXWDQzNXxXWDQ0NXxYVDMwMHxYVDMwMXxYVDMxMXxYVDMxNnxYVDMxN3xYVDMxOXxYVDMyMHxYVDM5MHxYVDUwMnxYVDUzMHxYVDUzMXxYVDUzMnxYVDUzNXxYVDYwM3xYVDYxMHxYVDYxMXxYVDYxNXxYVDY4MXxYVDcwMXxYVDcwMnxYVDcxMXxYVDcyMHxYVDgwMHxYVDgwNnxYVDg2MHxYVDg2MnxYVDg3NXxYVDg4MnxYVDg4M3xYVDg5NHxYVDkwMXxYVDkwN3xYVDkwOXxYVDkxMHxYVDkxMnxYVDkyOHxYVDkyNnxYVDkxNXxYVDkxOXxYVDkyNXxYVDEwMjF8XFxcXGJNb3RvIEVcXFxcYlwiLFNhbXN1bmc6XCJcXFxcYlNhbXN1bmdcXFxcYnxTTS1HOTI1MHxHVC0xOTMwMHxTR0gtSTMzN3xCR1QtUzUyMzB8R1QtQjIxMDB8R1QtQjI3MDB8R1QtQjI3MTB8R1QtQjMyMTB8R1QtQjMzMTB8R1QtQjM0MTB8R1QtQjM3MzB8R1QtQjM3NDB8R1QtQjU1MTB8R1QtQjU1MTJ8R1QtQjU3MjJ8R1QtQjY1MjB8R1QtQjczMDB8R1QtQjczMjB8R1QtQjczMzB8R1QtQjczNTB8R1QtQjc1MTB8R1QtQjc3MjJ8R1QtQjc4MDB8R1QtQzMwMTB8R1QtQzMwMTF8R1QtQzMwNjB8R1QtQzMyMDB8R1QtQzMyMTJ8R1QtQzMyMTJJfEdULUMzMjYyfEdULUMzMjIyfEdULUMzMzAwfEdULUMzMzAwS3xHVC1DMzMwM3xHVC1DMzMwM0t8R1QtQzMzMTB8R1QtQzMzMjJ8R1QtQzMzMzB8R1QtQzMzNTB8R1QtQzM1MDB8R1QtQzM1MTB8R1QtQzM1MzB8R1QtQzM2MzB8R1QtQzM3ODB8R1QtQzUwMTB8R1QtQzUyMTJ8R1QtQzY2MjB8R1QtQzY2MjV8R1QtQzY3MTJ8R1QtRTEwNTB8R1QtRTEwNzB8R1QtRTEwNzV8R1QtRTEwODB8R1QtRTEwODF8R1QtRTEwODV8R1QtRTEwODd8R1QtRTExMDB8R1QtRTExMDd8R1QtRTExMTB8R1QtRTExMjB8R1QtRTExMjV8R1QtRTExMzB8R1QtRTExNjB8R1QtRTExNzB8R1QtRTExNzV8R1QtRTExODB8R1QtRTExODJ8R1QtRTEyMDB8R1QtRTEyMTB8R1QtRTEyMjV8R1QtRTEyMzB8R1QtRTEzOTB8R1QtRTIxMDB8R1QtRTIxMjB8R1QtRTIxMjF8R1QtRTIxNTJ8R1QtRTIyMjB8R1QtRTIyMjJ8R1QtRTIyMzB8R1QtRTIyMzJ8R1QtRTIyNTB8R1QtRTIzNzB8R1QtRTI1NTB8R1QtRTI2NTJ8R1QtRTMyMTB8R1QtRTMyMTN8R1QtSTU1MDB8R1QtSTU1MDN8R1QtSTU3MDB8R1QtSTU4MDB8R1QtSTU4MDF8R1QtSTY0MTB8R1QtSTY0MjB8R1QtSTcxMTB8R1QtSTc0MTB8R1QtSTc1MDB8R1QtSTgwMDB8R1QtSTgxNTB8R1QtSTgxNjB8R1QtSTgxOTB8R1QtSTgzMjB8R1QtSTgzMzB8R1QtSTgzNTB8R1QtSTg1MzB8R1QtSTg3MDB8R1QtSTg3MDN8R1QtSTg5MTB8R1QtSTkwMDB8R1QtSTkwMDF8R1QtSTkwMDN8R1QtSTkwMTB8R1QtSTkwMjB8R1QtSTkwMjN8R1QtSTkwNzB8R1QtSTkwODJ8R1QtSTkxMDB8R1QtSTkxMDN8R1QtSTkyMjB8R1QtSTkyNTB8R1QtSTkzMDB8R1QtSTkzMDV8R1QtSTk1MDB8R1QtSTk1MDV8R1QtTTM1MTB8R1QtTTU2NTB8R1QtTTc1MDB8R1QtTTc2MDB8R1QtTTc2MDN8R1QtTTg4MDB8R1QtTTg5MTB8R1QtTjcwMDB8R1QtUzMxMTB8R1QtUzMzMTB8R1QtUzMzNTB8R1QtUzMzNTN8R1QtUzMzNzB8R1QtUzM2NTB8R1QtUzM2NTN8R1QtUzM3NzB8R1QtUzM4NTB8R1QtUzUyMTB8R1QtUzUyMjB8R1QtUzUyMjl8R1QtUzUyMzB8R1QtUzUyMzN8R1QtUzUyNTB8R1QtUzUyNTN8R1QtUzUyNjB8R1QtUzUyNjN8R1QtUzUyNzB8R1QtUzUzMDB8R1QtUzUzMzB8R1QtUzUzNTB8R1QtUzUzNjB8R1QtUzUzNjN8R1QtUzUzNjl8R1QtUzUzODB8R1QtUzUzODBEfEdULVM1NTYwfEdULVM1NTcwfEdULVM1NjAwfEdULVM1NjAzfEdULVM1NjEwfEdULVM1NjIwfEdULVM1NjYwfEdULVM1NjcwfEdULVM1NjkwfEdULVM1NzUwfEdULVM1NzgwfEdULVM1ODMwfEdULVM1ODM5fEdULVM2MTAyfEdULVM2NTAwfEdULVM3MDcwfEdULVM3MjAwfEdULVM3MjIwfEdULVM3MjMwfEdULVM3MjMzfEdULVM3MjUwfEdULVM3NTAwfEdULVM3NTMwfEdULVM3NTUwfEdULVM3NTYyfEdULVM3NzEwfEdULVM4MDAwfEdULVM4MDAzfEdULVM4NTAwfEdULVM4NTMwfEdULVM4NjAwfFNDSC1BMzEwfFNDSC1BNTMwfFNDSC1BNTcwfFNDSC1BNjEwfFNDSC1BNjMwfFNDSC1BNjUwfFNDSC1BNzkwfFNDSC1BNzk1fFNDSC1BODUwfFNDSC1BODcwfFNDSC1BODkwfFNDSC1BOTMwfFNDSC1BOTUwfFNDSC1BOTcwfFNDSC1BOTkwfFNDSC1JMTAwfFNDSC1JMTEwfFNDSC1JNDAwfFNDSC1JNDA1fFNDSC1JNTAwfFNDSC1JNTEwfFNDSC1JNTE1fFNDSC1JNjAwfFNDSC1JNzMwfFNDSC1JNzYwfFNDSC1JNzcwfFNDSC1JODMwfFNDSC1JOTEwfFNDSC1JOTIwfFNDSC1JOTU5fFNDSC1MQzExfFNDSC1OMTUwfFNDSC1OMzAwfFNDSC1SMTAwfFNDSC1SMzAwfFNDSC1SMzUxfFNDSC1SNDAwfFNDSC1SNDEwfFNDSC1UMzAwfFNDSC1VMzEwfFNDSC1VMzIwfFNDSC1VMzUwfFNDSC1VMzYwfFNDSC1VMzY1fFNDSC1VMzcwfFNDSC1VMzgwfFNDSC1VNDEwfFNDSC1VNDMwfFNDSC1VNDUwfFNDSC1VNDYwfFNDSC1VNDcwfFNDSC1VNDkwfFNDSC1VNTQwfFNDSC1VNTUwfFNDSC1VNjIwfFNDSC1VNjQwfFNDSC1VNjUwfFNDSC1VNjYwfFNDSC1VNzAwfFNDSC1VNzQwfFNDSC1VNzUwfFNDSC1VODEwfFNDSC1VODIwfFNDSC1VOTAwfFNDSC1VOTQwfFNDSC1VOTYwfFNDUy0yNlVDfFNHSC1BMTA3fFNHSC1BMTE3fFNHSC1BMTI3fFNHSC1BMTM3fFNHSC1BMTU3fFNHSC1BMTY3fFNHSC1BMTc3fFNHSC1BMTg3fFNHSC1BMTk3fFNHSC1BMjI3fFNHSC1BMjM3fFNHSC1BMjU3fFNHSC1BNDM3fFNHSC1BNTE3fFNHSC1BNTk3fFNHSC1BNjM3fFNHSC1BNjU3fFNHSC1BNjY3fFNHSC1BNjg3fFNHSC1BNjk3fFNHSC1BNzA3fFNHSC1BNzE3fFNHSC1BNzI3fFNHSC1BNzM3fFNHSC1BNzQ3fFNHSC1BNzY3fFNHSC1BNzc3fFNHSC1BNzk3fFNHSC1BODE3fFNHSC1BODI3fFNHSC1BODM3fFNHSC1BODQ3fFNHSC1BODY3fFNHSC1BODc3fFNHSC1BODg3fFNHSC1BODk3fFNHSC1BOTI3fFNHSC1CMTAwfFNHSC1CMTMwfFNHSC1CMjAwfFNHSC1CMjIwfFNHSC1DMTAwfFNHSC1DMTEwfFNHSC1DMTIwfFNHSC1DMTMwfFNHSC1DMTQwfFNHSC1DMTYwfFNHSC1DMTcwfFNHSC1DMTgwfFNHSC1DMjAwfFNHSC1DMjA3fFNHSC1DMjEwfFNHSC1DMjI1fFNHSC1DMjMwfFNHSC1DNDE3fFNHSC1DNDUwfFNHSC1EMzA3fFNHSC1EMzQ3fFNHSC1EMzU3fFNHSC1ENDA3fFNHSC1ENDE1fFNHSC1ENzgwfFNHSC1EODA3fFNHSC1EOTgwfFNHSC1FMTA1fFNHSC1FMjAwfFNHSC1FMzE1fFNHSC1FMzE2fFNHSC1FMzE3fFNHSC1FMzM1fFNHSC1FNTkwfFNHSC1FNjM1fFNHSC1FNzE1fFNHSC1FODkwfFNHSC1GMzAwfFNHSC1GNDgwfFNHSC1JMjAwfFNHSC1JMzAwfFNHSC1JMzIwfFNHSC1JNTUwfFNHSC1JNTc3fFNHSC1JNjAwfFNHSC1JNjA3fFNHSC1JNjE3fFNHSC1JNjI3fFNHSC1JNjM3fFNHSC1JNjc3fFNHSC1JNzAwfFNHSC1JNzE3fFNHSC1JNzI3fFNHSC1pNzQ3TXxTR0gtSTc3N3xTR0gtSTc4MHxTR0gtSTgyN3xTR0gtSTg0N3xTR0gtSTg1N3xTR0gtSTg5NnxTR0gtSTg5N3xTR0gtSTkwMHxTR0gtSTkwN3xTR0gtSTkxN3xTR0gtSTkyN3xTR0gtSTkzN3xTR0gtSTk5N3xTR0gtSjE1MHxTR0gtSjIwMHxTR0gtTDE3MHxTR0gtTDcwMHxTR0gtTTExMHxTR0gtTTE1MHxTR0gtTTIwMHxTR0gtTjEwNXxTR0gtTjUwMHxTR0gtTjYwMHxTR0gtTjYyMHxTR0gtTjYyNXxTR0gtTjcwMHxTR0gtTjcxMHxTR0gtUDEwN3xTR0gtUDIwN3xTR0gtUDMwMHxTR0gtUDMxMHxTR0gtUDUyMHxTR0gtUDczNXxTR0gtUDc3N3xTR0gtUTEwNXxTR0gtUjIxMHxTR0gtUjIyMHxTR0gtUjIyNXxTR0gtUzEwNXxTR0gtUzMwN3xTR0gtVDEwOXxTR0gtVDExOXxTR0gtVDEzOXxTR0gtVDIwOXxTR0gtVDIxOXxTR0gtVDIyOXxTR0gtVDIzOXxTR0gtVDI0OXxTR0gtVDI1OXxTR0gtVDMwOXxTR0gtVDMxOXxTR0gtVDMyOXxTR0gtVDMzOXxTR0gtVDM0OXxTR0gtVDM1OXxTR0gtVDM2OXxTR0gtVDM3OXxTR0gtVDQwOXxTR0gtVDQyOXxTR0gtVDQzOXxTR0gtVDQ1OXxTR0gtVDQ2OXxTR0gtVDQ3OXxTR0gtVDQ5OXxTR0gtVDUwOXxTR0gtVDUxOXxTR0gtVDUzOXxTR0gtVDU1OXxTR0gtVDU4OXxTR0gtVDYwOXxTR0gtVDYxOXxTR0gtVDYyOXxTR0gtVDYzOXxTR0gtVDY1OXxTR0gtVDY2OXxTR0gtVDY3OXxTR0gtVDcwOXxTR0gtVDcxOXxTR0gtVDcyOXxTR0gtVDczOXxTR0gtVDc0NnxTR0gtVDc0OXxTR0gtVDc1OXxTR0gtVDc2OXxTR0gtVDgwOXxTR0gtVDgxOXxTR0gtVDgzOXxTR0gtVDkxOXxTR0gtVDkyOXxTR0gtVDkzOXxTR0gtVDk1OXxTR0gtVDk4OXxTR0gtVTEwMHxTR0gtVTIwMHxTR0gtVTgwMHxTR0gtVjIwNXxTR0gtVjIwNnxTR0gtWDEwMHxTR0gtWDEwNXxTR0gtWDEyMHxTR0gtWDE0MHxTR0gtWDQyNnxTR0gtWDQyN3xTR0gtWDQ3NXxTR0gtWDQ5NXxTR0gtWDQ5N3xTR0gtWDUwN3xTR0gtWDYwMHxTR0gtWDYxMHxTR0gtWDYyMHxTR0gtWDYzMHxTR0gtWDcwMHxTR0gtWDgyMHxTR0gtWDg5MHxTR0gtWjEzMHxTR0gtWjE1MHxTR0gtWjE3MHxTR0gtWlgxMHxTR0gtWlgyMHxTSFctTTExMHxTUEgtQTEyMHxTUEgtQTQwMHxTUEgtQTQyMHxTUEgtQTQ2MHxTUEgtQTUwMHxTUEgtQTU2MHxTUEgtQTYwMHxTUEgtQTYyMHxTUEgtQTY2MHxTUEgtQTcwMHxTUEgtQTc0MHxTUEgtQTc2MHxTUEgtQTc5MHxTUEgtQTgwMHxTUEgtQTgyMHxTUEgtQTg0MHxTUEgtQTg4MHxTUEgtQTkwMHxTUEgtQTk0MHxTUEgtQTk2MHxTUEgtRDYwMHxTUEgtRDcwMHxTUEgtRDcxMHxTUEgtRDcyMHxTUEgtSTMwMHxTUEgtSTMyNXxTUEgtSTMzMHxTUEgtSTM1MHxTUEgtSTUwMHxTUEgtSTYwMHxTUEgtSTcwMHxTUEgtTDcwMHxTUEgtTTEwMHxTUEgtTTIyMHxTUEgtTTI0MHxTUEgtTTMwMHxTUEgtTTMwNXxTUEgtTTMyMHxTUEgtTTMzMHxTUEgtTTM1MHxTUEgtTTM2MHxTUEgtTTM3MHxTUEgtTTM4MHxTUEgtTTUxMHxTUEgtTTU0MHxTUEgtTTU1MHxTUEgtTTU2MHxTUEgtTTU3MHxTUEgtTTU4MHxTUEgtTTYxMHxTUEgtTTYyMHxTUEgtTTYzMHxTUEgtTTgwMHxTUEgtTTgxMHxTUEgtTTg1MHxTUEgtTTkwMHxTUEgtTTkxMHxTUEgtTTkyMHxTUEgtTTkzMHxTUEgtTjEwMHxTUEgtTjIwMHxTUEgtTjI0MHxTUEgtTjMwMHxTUEgtTjQwMHxTUEgtWjQwMHxTV0MtRTEwMHxTQ0gtaTkwOXxHVC1ONzEwMHxHVC1ONzEwNXxTQ0gtSTUzNXxTTS1OOTAwQXxTR0gtSTMxN3xTR0gtVDk5OUx8R1QtUzUzNjBCfEdULUk4MjYyfEdULVM2ODAyfEdULVM2MzEyfEdULVM2MzEwfEdULVM1MzEyfEdULVM1MzEwfEdULUk5MTA1fEdULUk4NTEwfEdULVM2NzkwTnxTTS1HNzEwNXxTTS1OOTAwNXxHVC1TNTMwMXxHVC1JOTI5NXxHVC1JOTE5NXxTTS1DMTAxfEdULVM3MzkyfEdULVM3NTYwfEdULUI3NjEwfEdULUk1NTEwfEdULVM3NTgyfEdULVM3NTMwRXxHVC1JODc1MHxTTS1HOTAwNlZ8U00tRzkwMDhWfFNNLUc5MDA5RHxTTS1HOTAwQXxTTS1HOTAwRHxTTS1HOTAwRnxTTS1HOTAwSHxTTS1HOTAwSXxTTS1HOTAwSnxTTS1HOTAwS3xTTS1HOTAwTHxTTS1HOTAwTXxTTS1HOTAwUHxTTS1HOTAwUjR8U00tRzkwMFN8U00tRzkwMFR8U00tRzkwMFZ8U00tRzkwMFc4fFNIVi1FMTYwS3xTQ0gtUDcwOXxTQ0gtUDcyOXxTTS1UMjU1OHxHVC1JOTIwNXxTTS1HOTM1MHxTTS1KMTIwRnxTTS1HOTIwRnxTTS1HOTIwVnxTTS1HOTMwRnxTTS1OOTEwQ1wiLExHOlwiXFxcXGJMR1xcXFxiO3xMR1stIF0/KEM4MDB8QzkwMHxFNDAwfEU2MTB8RTkwMHxFLTkwMHxGMTYwfEYxODBLfEYxODBMfEYxODBTfDczMHw4NTV8TDE2MHxMUzc0MHxMUzg0MHxMUzk3MHxMVTYyMDB8TVM2OTB8TVM2OTV8TVM3NzB8TVM4NDB8TVM4NzB8TVM5MTB8UDUwMHxQNzAwfFA3MDV8Vk02OTZ8QVM2ODB8QVM2OTV8QVg4NDB8QzcyOXxFOTcwfEdTNTA1fDI3MnxDMzk1fEU3MzlCS3xFOTYwfEw1NUN8TDc1Q3xMUzY5NnxMUzg2MHxQNzY5Qkt8UDM1MHxQNTAwfFA1MDl8UDg3MHxVTjI3MnxVUzczMHxWUzg0MHxWUzk1MHxMTjI3MnxMTjUxMHxMUzY3MHxMUzg1NXxMVzY5MHxNTjI3MHxNTjUxMHxQNTA5fFA3Njl8UDkzMHxVTjIwMHxVTjI3MHxVTjUxMHxVTjYxMHxVUzY3MHxVUzc0MHxVUzc2MHxVWDI2NXxVWDg0MHxWTjI3MXxWTjUzMHxWUzY2MHxWUzcwMHxWUzc0MHxWUzc1MHxWUzkxMHxWUzkyMHxWUzkzMHxWWDkyMDB8VlgxMTAwMHxBWDg0MEF8TFc3NzB8UDUwNnxQOTI1fFA5OTl8RTYxMnxEOTU1fEQ4MDJ8TVMzMjMpXCIsU29ueTpcIlNvbnlTVHxTb255TFR8U29ueUVyaWNzc29ufFNvbnlFcmljc3NvbkxUMTVpdnxMVDE4aXxFMTBpfExUMjhofExUMjZ3fFNvbnlFcmljc3Nvbk1UMjdpfEM1MzAzfEM2OTAyfEM2OTAzfEM2OTA2fEM2OTQzfEQyNTMzXCIsQXN1czpcIkFzdXMuKkdhbGF4eXxQYWRGb25lLipNb2JpbGVcIixOb2tpYUx1bWlhOlwiTHVtaWEgWzAtOV17Myw0fVwiLE1pY3JvbWF4OlwiTWljcm9tYXguKlxcXFxiKEEyMTB8QTkyfEE4OHxBNzJ8QTExMXxBMTEwUXxBMTE1fEExMTZ8QTExMHxBOTBTfEEyNnxBNTF8QTM1fEE1NHxBMjV8QTI3fEE4OXxBNjh8QTY1fEE1N3xBOTApXFxcXGJcIixQYWxtOlwiUGFsbVNvdXJjZXxQYWxtXCIsVmVydHU6XCJWZXJ0dXxWZXJ0dS4qTHRkfFZlcnR1LipBc2NlbnR8VmVydHUuKkF5eHRhfFZlcnR1LipDb25zdGVsbGF0aW9uKEZ8UXVlc3QpP3xWZXJ0dS4qTW9uaWthfFZlcnR1LipTaWduYXR1cmVcIixQYW50ZWNoOlwiUEFOVEVDSHxJTS1BODUwU3xJTS1BODQwU3xJTS1BODMwTHxJTS1BODMwS3xJTS1BODMwU3xJTS1BODIwTHxJTS1BODEwS3xJTS1BODEwU3xJTS1BODAwU3xJTS1UMTAwS3xJTS1BNzI1THxJTS1BNzgwTHxJTS1BNzc1Q3xJTS1BNzcwS3xJTS1BNzYwU3xJTS1BNzUwS3xJTS1BNzQwU3xJTS1BNzMwU3xJTS1BNzIwTHxJTS1BNzEwS3xJTS1BNjkwTHxJTS1BNjkwU3xJTS1BNjUwU3xJTS1BNjMwS3xJTS1BNjAwU3xWRUdBIFBUTDIxfFBUMDAzfFA4MDEwfEFEUjkxMEx8UDYwMzB8UDYwMjB8UDkwNzB8UDQxMDB8UDkwNjB8UDUwMDB8Q0RNODk5MnxUWFQ4MDQ1fEFEUjg5OTV8SVMxMVBUfFAyMDMwfFA2MDEwfFA4MDAwfFBUMDAyfElTMDZ8Q0RNODk5OXxQOTA1MHxQVDAwMXxUWFQ4MDQwfFAyMDIwfFA5MDIwfFAyMDAwfFA3MDQwfFA3MDAwfEM3OTBcIixGbHk6XCJJUTIzMHxJUTQ0NHxJUTQ1MHxJUTQ0MHxJUTQ0MnxJUTQ0MXxJUTI0NXxJUTI1NnxJUTIzNnxJUTI1NXxJUTIzNXxJUTI0NXxJUTI3NXxJUTI0MHxJUTI4NXxJUTI4MHxJUTI3MHxJUTI2MHxJUTI1MFwiLFdpa286XCJLSVRFIDRHfEhJR0hXQVl8R0VUQVdBWXxTVEFJUldBWXxEQVJLU0lERXxEQVJLRlVMTHxEQVJLTklHSFR8REFSS01PT058U0xJREV8V0FYIDRHfFJBSU5CT1d8QkxPT018U1VOU0VUfEdPQSg/IW5uYSl8TEVOTll8QkFSUll8SUdHWXxPWlpZfENJTksgRklWRXxDSU5LIFBFQVh8Q0lOSyBQRUFYIDJ8Q0lOSyBTTElNfENJTksgU0xJTSAyfENJTksgK3xDSU5LIEtJTkd8Q0lOSyBQRUFYfENJTksgU0xJTXxTVUJMSU1cIixpTW9iaWxlOlwiaS1tb2JpbGUgKElRfGktU1RZTEV8aWRlYXxaQUF8SGl0eilcIixTaW1WYWxsZXk6XCJcXFxcYihTUC04MHxYVC05MzB8U1gtMzQwfFhULTkzMHxTWC0zMTB8U1AtMzYwfFNQNjB8U1BULTgwMHxTUC0xMjB8U1BULTgwMHxTUC0xNDB8U1BYLTV8U1BYLTh8U1AtMTAwfFNQWC04fFNQWC0xMilcXFxcYlwiLFdvbGZnYW5nOlwiQVQtQjI0RHxBVC1BUzUwSER8QVQtQVM0MFd8QVQtQVM1NUhEfEFULUFTNDVxMnxBVC1CMjZEfEFULUFTNTBRXCIsQWxjYXRlbDpcIkFsY2F0ZWxcIixOaW50ZW5kbzpcIk5pbnRlbmRvIDNEU1wiLEFtb2k6XCJBbW9pXCIsSU5ROlwiSU5RXCIsR2VuZXJpY1Bob25lOlwiVGFwYXRhbGt8UERBO3xTQUdFTXxcXFxcYm1tcFxcXFxifHBvY2tldHxcXFxcYnBzcFxcXFxifHN5bWJpYW58U21hcnRwaG9uZXxzbWFydGZvbnx0cmVvfHVwLmJyb3dzZXJ8dXAubGlua3x2b2RhZm9uZXxcXFxcYndhcFxcXFxifG5va2lhfFNlcmllczQwfFNlcmllczYwfFM2MHxTb255RXJpY3Nzb258TjkwMHxNQVVJLipXQVAuKkJyb3dzZXJcIn0sdGFibGV0czp7aVBhZDpcImlQYWR8aVBhZC4qTW9iaWxlXCIsTmV4dXNUYWJsZXQ6XCJBbmRyb2lkLipOZXh1c1tcXFxcc10rKDd8OXwxMClcIixTYW1zdW5nVGFibGV0OlwiU0FNU1VORy4qVGFibGV0fEdhbGF4eS4qVGFifFNDLTAxQ3xHVC1QMTAwMHxHVC1QMTAwM3xHVC1QMTAxMHxHVC1QMzEwNXxHVC1QNjIxMHxHVC1QNjgwMHxHVC1QNjgxMHxHVC1QNzEwMHxHVC1QNzMwMHxHVC1QNzMxMHxHVC1QNzUwMHxHVC1QNzUxMHxTQ0gtSTgwMHxTQ0gtSTgxNXxTQ0gtSTkwNXxTR0gtSTk1N3xTR0gtSTk4N3xTR0gtVDg0OXxTR0gtVDg1OXxTR0gtVDg2OXxTUEgtUDEwMHxHVC1QMzEwMHxHVC1QMzEwOHxHVC1QMzExMHxHVC1QNTEwMHxHVC1QNTExMHxHVC1QNjIwMHxHVC1QNzMyMHxHVC1QNzUxMXxHVC1OODAwMHxHVC1QODUxMHxTR0gtSTQ5N3xTUEgtUDUwMHxTR0gtVDc3OXxTQ0gtSTcwNXxTQ0gtSTkxNXxHVC1OODAxM3xHVC1QMzExM3xHVC1QNTExM3xHVC1QODExMHxHVC1OODAxMHxHVC1OODAwNXxHVC1OODAyMHxHVC1QMTAxM3xHVC1QNjIwMXxHVC1QNzUwMXxHVC1ONTEwMHxHVC1ONTEwNXxHVC1ONTExMHxTSFYtRTE0MEt8U0hWLUUxNDBMfFNIVi1FMTQwU3xTSFYtRTE1MFN8U0hWLUUyMzBLfFNIVi1FMjMwTHxTSFYtRTIzMFN8U0hXLU0xODBLfFNIVy1NMTgwTHxTSFctTTE4MFN8U0hXLU0xODBXfFNIVy1NMzAwV3xTSFctTTMwNVd8U0hXLU0zODBLfFNIVy1NMzgwU3xTSFctTTM4MFd8U0hXLU00MzBXfFNIVy1NNDgwS3xTSFctTTQ4MFN8U0hXLU00ODBXfFNIVy1NNDg1V3xTSFctTTQ4Nld8U0hXLU01MDBXfEdULUk5MjI4fFNDSC1QNzM5fFNDSC1JOTI1fEdULUk5MjAwfEdULVA1MjAwfEdULVA1MjEwfEdULVA1MjEwWHxTTS1UMzExfFNNLVQzMTB8U00tVDMxMFh8U00tVDIxMHxTTS1UMjEwUnxTTS1UMjExfFNNLVA2MDB8U00tUDYwMXxTTS1QNjA1fFNNLVA5MDB8U00tUDkwMXxTTS1UMjE3fFNNLVQyMTdBfFNNLVQyMTdTfFNNLVA2MDAwfFNNLVQzMTAwfFNHSC1JNDY3fFhFNTAwfFNNLVQxMTB8R1QtUDUyMjB8R1QtSTkyMDBYfEdULU41MTEwWHxHVC1ONTEyMHxTTS1QOTA1fFNNLVQxMTF8U00tVDIxMDV8U00tVDMxNXxTTS1UMzIwfFNNLVQzMjBYfFNNLVQzMjF8U00tVDUyMHxTTS1UNTI1fFNNLVQ1MzBOVXxTTS1UMjMwTlV8U00tVDMzME5VfFNNLVQ5MDB8WEU1MDBUMUN8U00tUDYwNVZ8U00tUDkwNVZ8U00tVDMzN1Z8U00tVDUzN1Z8U00tVDcwN1Z8U00tVDgwN1Z8U00tUDYwMFh8U00tUDkwMFh8U00tVDIxMFh8U00tVDIzMHxTTS1UMjMwWHxTTS1UMzI1fEdULVA3NTAzfFNNLVQ1MzF8U00tVDMzMHxTTS1UNTMwfFNNLVQ3MDV8U00tVDcwNUN8U00tVDUzNXxTTS1UMzMxfFNNLVQ4MDB8U00tVDcwMHxTTS1UNTM3fFNNLVQ4MDd8U00tUDkwN0F8U00tVDMzN0F8U00tVDUzN0F8U00tVDcwN0F8U00tVDgwN0F8U00tVDIzN3xTTS1UODA3UHxTTS1QNjA3VHxTTS1UMjE3VHxTTS1UMzM3VHxTTS1UODA3VHxTTS1UMTE2TlF8U00tUDU1MHxTTS1UMzUwfFNNLVQ1NTB8U00tVDkwMDB8U00tUDkwMDB8U00tVDcwNVl8U00tVDgwNXxHVC1QMzExM3xTTS1UNzEwfFNNLVQ4MTB8U00tVDgxNXxTTS1UMzYwfFNNLVQ1MzN8U00tVDExM3xTTS1UMzM1fFNNLVQ3MTV8U00tVDU2MHxTTS1UNjcwfFNNLVQ2Nzd8U00tVDM3N3xTTS1UNTY3fFNNLVQzNTdUfFNNLVQ1NTV8U00tVDU2MXxTTS1UNzEzfFNNLVQ3MTl8U00tVDgxM3xTTS1UODE5fFNNLVQ1ODB8U00tVDM1NVl8U00tVDI4MHxTTS1UODE3QXxTTS1UODIwfFNNLVc3MDB8U00tUDU4MHxTTS1UNTg3XCIsS2luZGxlOlwiS2luZGxlfFNpbGsuKkFjY2VsZXJhdGVkfEFuZHJvaWQuKlxcXFxiKEtGT1R8S0ZUVHxLRkpXSXxLRkpXQXxLRk9URXxLRlNPV0l8S0ZUSFdJfEtGVEhXQXxLRkFQV0l8S0ZBUFdBfFdGSldBRXxLRlNBV0F8S0ZTQVdJfEtGQVNXSXxLRkFSV0l8S0ZGT1dJfEtGR0lXSXxLRk1FV0kpXFxcXGJ8QW5kcm9pZC4qU2lsay9bMC05Ll0rIGxpa2UgQ2hyb21lL1swLTkuXSsgKD8hTW9iaWxlKVwiLFN1cmZhY2VUYWJsZXQ6XCJXaW5kb3dzIE5UIFswLTkuXSs7IEFSTTsuKihUYWJsZXR8QVJNQkpTKVwiLEhQVGFibGV0OlwiSFAgU2xhdGUgKDd8OHwxMCl8SFAgRWxpdGVQYWQgOTAwfGhwLXRhYmxldHxFbGl0ZUJvb2suKlRvdWNofEhQIDh8U2xhdGUgMjF8SFAgU2xhdGVCb29rIDEwXCIsQXN1c1RhYmxldDpcIl4uKlBhZEZvbmUoKD8hTW9iaWxlKS4pKiR8VHJhbnNmb3JtZXJ8VEYxMDF8VEYxMDFHfFRGMzAwVHxURjMwMFRHfFRGMzAwVEx8VEY3MDBUfFRGNzAwS0x8VEY3MDFUfFRGODEwQ3xNRTE3MXxNRTMwMVR8TUUzMDJDfE1FMzcxTUd8TUUzNzBUfE1FMzcyTUd8TUUxNzJWfE1FMTczWHxNRTQwMEN8U2xpZGVyIFNMMTAxfFxcXFxiSzAwRlxcXFxifFxcXFxiSzAwQ1xcXFxifFxcXFxiSzAwRVxcXFxifFxcXFxiSzAwTFxcXFxifFRYMjAxTEF8TUUxNzZDfE1FMTAyQXxcXFxcYk04MFRBXFxcXGJ8TUUzNzJDTHxNRTU2MENHfE1FMzcyQ0d8TUUzMDJLTHwgSzAxMCB8IEswMTEgfCBLMDE3IHwgSzAxRSB8TUU1NzJDfE1FMTAzS3xNRTE3MEN8TUUxNzFDfFxcXFxiTUU3MENcXFxcYnxNRTU4MUN8TUU1ODFDTHxNRTg1MTBDfE1FMTgxQ3xQMDFZfFBPMU1BfFAwMVpcIixCbGFja0JlcnJ5VGFibGV0OlwiUGxheUJvb2t8UklNIFRhYmxldFwiLEhUQ3RhYmxldDpcIkhUQ19GbHllcl9QNTEyfEhUQyBGbHllcnxIVEMgSmV0c3RyZWFtfEhUQy1QNzE1YXxIVEMgRVZPIFZpZXcgNEd8UEc0MTIwMHxQRzA5NDEwXCIsTW90b3JvbGFUYWJsZXQ6XCJ4b29tfHNob2xlc3R8TVo2MTV8TVo2MDV8TVo1MDV8TVo2MDF8TVo2MDJ8TVo2MDN8TVo2MDR8TVo2MDZ8TVo2MDd8TVo2MDh8TVo2MDl8TVo2MTV8TVo2MTZ8TVo2MTdcIixOb29rVGFibGV0OlwiQW5kcm9pZC4qTm9va3xOb29rQ29sb3J8bm9vayBicm93c2VyfEJOUlYyMDB8Qk5SVjIwMEF8Qk5UVjI1MHxCTlRWMjUwQXxCTlRWNDAwfEJOVFY2MDB8TG9naWNQRCBab29tMlwiLEFjZXJUYWJsZXQ6XCJBbmRyb2lkLio7IFxcXFxiKEExMDB8QTEwMXxBMTEwfEEyMDB8QTIxMHxBMjExfEE1MDB8QTUwMXxBNTEwfEE1MTF8QTcwMHxBNzAxfFc1MDB8VzUwMFB8VzUwMXxXNTAxUHxXNTEwfFc1MTF8VzcwMHxHMTAwfEcxMDBXfEIxLUE3MXxCMS03MTB8QjEtNzExfEExLTgxMHxBMS04MTF8QTEtODMwKVxcXFxifFczLTgxMHxcXFxcYkEzLUExMFxcXFxifFxcXFxiQTMtQTExXFxcXGJ8XFxcXGJBMy1BMjBcXFxcYnxcXFxcYkEzLUEzMFwiLFRvc2hpYmFUYWJsZXQ6XCJBbmRyb2lkLiooQVQxMDB8QVQxMDV8QVQyMDB8QVQyMDV8QVQyNzB8QVQyNzV8QVQzMDB8QVQzMDV8QVQxUzV8QVQ1MDB8QVQ1NzB8QVQ3MDB8QVQ4MzApfFRPU0hJQkEuKkZPTElPXCIsTEdUYWJsZXQ6XCJcXFxcYkwtMDZDfExHLVY5MDl8TEctVjkwMHxMRy1WNzAwfExHLVY1MTB8TEctVjUwMHxMRy1WNDEwfExHLVY0MDB8TEctVks4MTBcXFxcYlwiLEZ1aml0c3VUYWJsZXQ6XCJBbmRyb2lkLipcXFxcYihGLTAxRHxGLTAyRnxGLTA1RXxGLTEwRHxNNTMyfFE1NzIpXFxcXGJcIixQcmVzdGlnaW9UYWJsZXQ6XCJQTVAzMTcwQnxQTVAzMjcwQnxQTVAzNDcwQnxQTVA3MTcwQnxQTVAzMzcwQnxQTVAzNTcwQ3xQTVA1ODcwQ3xQTVAzNjcwQnxQTVA1NTcwQ3xQTVA1NzcwRHxQTVAzOTcwQnxQTVAzODcwQ3xQTVA1NTgwQ3xQTVA1ODgwRHxQTVA1NzgwRHxQTVA1NTg4Q3xQTVA3MjgwQ3xQTVA3MjgwQzNHfFBNUDcyODB8UE1QNzg4MER8UE1QNTU5N0R8UE1QNTU5N3xQTVA3MTAwRHxQRVIzNDY0fFBFUjMyNzR8UEVSMzU3NHxQRVIzODg0fFBFUjUyNzR8UEVSNTQ3NHxQTVA1MDk3Q1BST3xQTVA1MDk3fFBNUDczODBEfFBNUDUyOTdDfFBNUDUyOTdDX1FVQUR8UE1QODEyRXxQTVA4MTJFM0d8UE1QODEyRnxQTVA4MTBFfFBNUDg4MFREfFBNVDMwMTd8UE1UMzAzN3xQTVQzMDQ3fFBNVDMwNTd8UE1UNzAwOHxQTVQ1ODg3fFBNVDUwMDF8UE1UNTAwMlwiLExlbm92b1RhYmxldDpcIkxlbm92byBUQUJ8SWRlYShUYWJ8UGFkKSggQTF8QTEwfCBLMXwpfFRoaW5rUGFkKFsgXSspP1RhYmxldHxZVDMtWDkwTHxZVDMtWDkwRnxZVDMtWDkwWHxMZW5vdm8uKihTMjEwOXxTMjExMHxTNTAwMHxTNjAwMHxLMzAxMXxBMzAwMHxBMzUwMHxBMTAwMHxBMjEwN3xBMjEwOXxBMTEwN3xBNTUwMHxBNzYwMHxCNjAwMHxCODAwMHxCODA4MCkoLXwpKEZMfEZ8SFZ8SHwpXCIsRGVsbFRhYmxldDpcIlZlbnVlIDExfFZlbnVlIDh8VmVudWUgN3xEZWxsIFN0cmVhayAxMHxEZWxsIFN0cmVhayA3XCIsWWFydmlrVGFibGV0OlwiQW5kcm9pZC4qXFxcXGIoVEFCMjEwfFRBQjIxMXxUQUIyMjR8VEFCMjUwfFRBQjI2MHxUQUIyNjR8VEFCMzEwfFRBQjM2MHxUQUIzNjR8VEFCNDEwfFRBQjQxMXxUQUI0MjB8VEFCNDI0fFRBQjQ1MHxUQUI0NjB8VEFCNDYxfFRBQjQ2NHxUQUI0NjV8VEFCNDY3fFRBQjQ2OHxUQUIwNy0xMDB8VEFCMDctMTAxfFRBQjA3LTE1MHxUQUIwNy0xNTF8VEFCMDctMTUyfFRBQjA3LTIwMHxUQUIwNy0yMDEtM0d8VEFCMDctMjEwfFRBQjA3LTIxMXxUQUIwNy0yMTJ8VEFCMDctMjE0fFRBQjA3LTIyMHxUQUIwNy00MDB8VEFCMDctNDg1fFRBQjA4LTE1MHxUQUIwOC0yMDB8VEFCMDgtMjAxLTNHfFRBQjA4LTIwMS0zMHxUQUIwOS0xMDB8VEFCMDktMjExfFRBQjA5LTQxMHxUQUIxMC0xNTB8VEFCMTAtMjAxfFRBQjEwLTIxMXxUQUIxMC00MDB8VEFCMTAtNDEwfFRBQjEzLTIwMXxUQUIyNzRFVUt8VEFCMjc1RVVLfFRBQjM3NEVVS3xUQUI0NjJFVUt8VEFCNDc0RVVLfFRBQjktMjAwKVxcXFxiXCIsTWVkaW9uVGFibGV0OlwiQW5kcm9pZC4qXFxcXGJPWU9cXFxcYnxMSUZFLiooUDkyMTJ8UDk1MTR8UDk1MTZ8Uzk1MTIpfExJRkVUQUJcIixBcm5vdmFUYWJsZXQ6XCI5N0c0fEFOMTBHMnxBTjdiRzN8QU43ZkczfEFOOEczfEFOOGNHM3xBTjdHM3xBTjlHM3xBTjdkRzN8QU43ZEczU1R8QU43ZEczQ2hpbGRQYWR8QU4xMGJHM3xBTjEwYkczRFR8QU45RzJcIixJbnRlbnNvVGFibGV0OlwiSU5NODAwMktQfElOTTEwMTBGUHxJTk04MDVORHxJbnRlbnNvIFRhYnxUQUIxMDA0XCIsSVJVVGFibGV0OlwiTTcwMnByb1wiLE1lZ2Fmb25UYWJsZXQ6XCJNZWdhRm9uIFY5fFxcXFxiWlRFIFY5XFxcXGJ8QW5kcm9pZC4qXFxcXGJNVDdBXFxcXGJcIixFYm9kYVRhYmxldDpcIkUtQm9kYSAoU3VwcmVtZXxJbXByZXNzcGVlZHxJenp5Y29tbXxFc3NlbnRpYWwpXCIsQWxsVmlld1RhYmxldDpcIkFsbHZpZXcuKihWaXZhfEFsbGRyb3xDaXR5fFNwZWVkfEFsbCBUVnxGcmVuenl8UXVhc2FyfFNoaW5lfFRYMXxBWDF8QVgyKVwiLEFyY2hvc1RhYmxldDpcIlxcXFxiKDEwMUc5fDgwRzl8QTEwMUlUKVxcXFxifFFpbGl2ZSA5N1J8QXJjaG9zNXxcXFxcYkFSQ0hPUyAoNzB8Nzl8ODB8OTB8OTd8MTAxfEZBTUlMWVBBRHwpKGJ8Y3wpKEcxMHwgQ29iYWx0fCBUSVRBTklVTShIRHwpfCBYZW5vbnwgTmVvbnxYU0t8IDJ8IFhTIDJ8IFBMQVRJTlVNfCBDQVJCT058R0FNRVBBRClcXFxcYlwiLEFpbm9sVGFibGV0OlwiTk9WTzd8Tk9WTzh8Tk9WTzEwfE5vdm83QXVyb3JhfE5vdm83QmFzaWN8Tk9WTzdQQUxBRElOfG5vdm85LVNwYXJrXCIsTm9raWFMdW1pYVRhYmxldDpcIkx1bWlhIDI1MjBcIixTb255VGFibGV0OlwiU29ueS4qVGFibGV0fFhwZXJpYSBUYWJsZXR8U29ueSBUYWJsZXQgU3xTTy0wM0V8U0dQVDEyfFNHUFQxM3xTR1BUMTE0fFNHUFQxMjF8U0dQVDEyMnxTR1BUMTIzfFNHUFQxMTF8U0dQVDExMnxTR1BUMTEzfFNHUFQxMzF8U0dQVDEzMnxTR1BUMTMzfFNHUFQyMTF8U0dQVDIxMnxTR1BUMjEzfFNHUDMxMXxTR1AzMTJ8U0dQMzIxfEVCUkQxMTAxfEVCUkQxMTAyfEVCUkQxMjAxfFNHUDM1MXxTR1AzNDF8U0dQNTExfFNHUDUxMnxTR1A1MjF8U0dQNTQxfFNHUDU1MXxTR1A2MjF8U0dQNjEyfFNPVDMxXCIsUGhpbGlwc1RhYmxldDpcIlxcXFxiKFBJMjAxMHxQSTMwMDB8UEkzMTAwfFBJMzEwNXxQSTMxMTB8UEkzMjA1fFBJMzIxMHxQSTM5MDB8UEk0MDEwfFBJNzAwMHxQSTcxMDApXFxcXGJcIixDdWJlVGFibGV0OlwiQW5kcm9pZC4qKEs4R1R8VTlHVHxVMTBHVHxVMTZHVHxVMTdHVHxVMThHVHxVMTlHVHxVMjBHVHxVMjNHVHxVMzBHVCl8Q1VCRSBVOEdUXCIsQ29ieVRhYmxldDpcIk1JRDEwNDJ8TUlEMTA0NXxNSUQxMTI1fE1JRDExMjZ8TUlENzAxMnxNSUQ3MDE0fE1JRDcwMTV8TUlENzAzNHxNSUQ3MDM1fE1JRDcwMzZ8TUlENzA0MnxNSUQ3MDQ4fE1JRDcxMjd8TUlEODA0MnxNSUQ4MDQ4fE1JRDgxMjd8TUlEOTA0MnxNSUQ5NzQwfE1JRDk3NDJ8TUlENzAyMnxNSUQ3MDEwXCIsTUlEVGFibGV0OlwiTTk3MDF8TTkwMDB8TTkxMDB8TTgwNnxNMTA1MnxNODA2fFQ3MDN8TUlENzAxfE1JRDcxM3xNSUQ3MTB8TUlENzI3fE1JRDc2MHxNSUQ4MzB8TUlENzI4fE1JRDkzM3xNSUQxMjV8TUlEODEwfE1JRDczMnxNSUQxMjB8TUlEOTMwfE1JRDgwMHxNSUQ3MzF8TUlEOTAwfE1JRDEwMHxNSUQ4MjB8TUlENzM1fE1JRDk4MHxNSUQxMzB8TUlEODMzfE1JRDczN3xNSUQ5NjB8TUlEMTM1fE1JRDg2MHxNSUQ3MzZ8TUlEMTQwfE1JRDkzMHxNSUQ4MzV8TUlENzMzfE1JRDRYMTBcIixNU0lUYWJsZXQ6XCJNU0kgXFxcXGIoUHJpbW8gNzNLfFByaW1vIDczTHxQcmltbyA4MUx8UHJpbW8gNzd8UHJpbW8gOTN8UHJpbW8gNzV8UHJpbW8gNzZ8UHJpbW8gNzN8UHJpbW8gODF8UHJpbW8gOTF8UHJpbW8gOTB8RW5qb3kgNzF8RW5qb3kgN3xFbmpveSAxMClcXFxcYlwiLFNNaVRUYWJsZXQ6XCJBbmRyb2lkLiooXFxcXGJNSURcXFxcYnxNSUQtNTYwfE1UVi1UMTIwMHxNVFYtUE5ENTMxfE1UVi1QMTEwMXxNVFYtUE5ENTMwKVwiLFJvY2tDaGlwVGFibGV0OlwiQW5kcm9pZC4qKFJLMjgxOHxSSzI4MDhBfFJLMjkxOHxSSzMwNjYpfFJLMjczOHxSSzI4MDhBXCIsRmx5VGFibGV0OlwiSVEzMTB8Rmx5IFZpc2lvblwiLGJxVGFibGV0OlwiQW5kcm9pZC4qKGJxKT8uKihFbGNhbm98Q3VyaWV8RWRpc29ufE1heHdlbGx8S2VwbGVyfFBhc2NhbHxUZXNsYXxIeXBhdGlhfFBsYXRvbnxOZXd0b258TGl2aW5nc3RvbmV8Q2VydmFudGVzfEF2YW50fEFxdWFyaXMgW0V8TV0xMCl8TWF4d2VsbC4qTGl0ZXxNYXh3ZWxsLipQbHVzXCIsSHVhd2VpVGFibGV0OlwiTWVkaWFQYWR8TWVkaWFQYWQgNyBZb3V0aHxJREVPUyBTN3xTNy0yMDFjfFM3LTIwMnV8UzctMTAxfFM3LTEwM3xTNy0xMDR8UzctMTA1fFM3LTEwNnxTNy0yMDF8UzctU2xpbVwiLE5lY1RhYmxldDpcIlxcXFxiTi0wNkR8XFxcXGJOLTA4RFwiLFBhbnRlY2hUYWJsZXQ6XCJQYW50ZWNoLipQNDEwMFwiLEJyb25jaG9UYWJsZXQ6XCJCcm9uY2hvLiooTjcwMXxONzA4fE44MDJ8YTcxMClcIixWZXJzdXNUYWJsZXQ6XCJUT1VDSFBBRC4qWzc4OTEwXXxcXFxcYlRPVUNIVEFCXFxcXGJcIixaeW5jVGFibGV0OlwiejEwMDB8Wjk5IDJHfHo5OXx6OTMwfHo5OTl8ejk5MHx6OTA5fFo5MTl8ejkwMFwiLFBvc2l0aXZvVGFibGV0OlwiVEIwN1NUQXxUQjEwU1RBfFRCMDdGVEF8VEIxMEZUQVwiLE5hYmlUYWJsZXQ6XCJBbmRyb2lkLipcXFxcYk5hYmlcIixLb2JvVGFibGV0OlwiS29ibyBUb3VjaHxcXFxcYkswODBcXFxcYnxcXFxcYlZveFxcXFxiIEJ1aWxkfFxcXFxiQXJjXFxcXGIgQnVpbGRcIixEYW5ld1RhYmxldDpcIkRTbGlkZS4qXFxcXGIoNzAwfDcwMVJ8NzAyfDcwM1J8NzA0fDgwMnw5NzB8OTcxfDk3Mnw5NzN8OTc0fDEwMTB8MTAxMilcXFxcYlwiLFRleGV0VGFibGV0OlwiTmF2aVBhZHxUQi03NzJBfFRNLTcwNDV8VE0tNzA1NXxUTS05NzUwfFRNLTcwMTZ8VE0tNzAyNHxUTS03MDI2fFRNLTcwNDF8VE0tNzA0M3xUTS03MDQ3fFRNLTgwNDF8VE0tOTc0MXxUTS05NzQ3fFRNLTk3NDh8VE0tOTc1MXxUTS03MDIyfFRNLTcwMjF8VE0tNzAyMHxUTS03MDExfFRNLTcwMTB8VE0tNzAyM3xUTS03MDI1fFRNLTcwMzdXfFRNLTcwMzhXfFRNLTcwMjdXfFRNLTk3MjB8VE0tOTcyNXxUTS05NzM3V3xUTS0xMDIwfFRNLTk3MzhXfFRNLTk3NDB8VE0tOTc0M1d8VEItODA3QXxUQi03NzFBfFRCLTcyN0F8VEItNzI1QXxUQi03MTlBfFRCLTgyM0F8VEItODA1QXxUQi03MjNBfFRCLTcxNUF8VEItNzA3QXxUQi03MDVBfFRCLTcwOUF8VEItNzExQXxUQi04OTBIRHxUQi04ODBIRHxUQi03OTBIRHxUQi03ODBIRHxUQi03NzBIRHxUQi03MjFIRHxUQi03MTBIRHxUQi00MzRIRHxUQi04NjBIRHxUQi04NDBIRHxUQi03NjBIRHxUQi03NTBIRHxUQi03NDBIRHxUQi03MzBIRHxUQi03MjJIRHxUQi03MjBIRHxUQi03MDBIRHxUQi01MDBIRHxUQi00NzBIRHxUQi00MzFIRHxUQi00MzBIRHxUQi01MDZ8VEItNTA0fFRCLTQ0NnxUQi00MzZ8VEItNDE2fFRCLTE0NlNFfFRCLTEyNlNFXCIsUGxheXN0YXRpb25UYWJsZXQ6XCJQbGF5c3RhdGlvbi4qKFBvcnRhYmxlfFZpdGEpXCIsVHJla3N0b3JUYWJsZXQ6XCJTVDEwNDE2LTF8VlQxMDQxNi0xfFNUNzA0MDgtMXxTVDcwMnh4LTF8U1Q3MDJ4eC0yfFNUODAyMDh8U1Q5NzIxNnxTVDcwMTA0LTJ8VlQxMDQxNi0yfFNUMTAyMTYtMkF8U3VyZlRhYlwiLFB5bGVBdWRpb1RhYmxldDpcIlxcXFxiKFBUQkwxMENFVXxQVEJMMTBDfFBUQkw3MkJDfFBUQkw3MkJDRVV8UFRCTDdDRVV8UFRCTDdDfFBUQkw5MkJDfFBUQkw5MkJDRVV8UFRCTDlDRVV8UFRCTDlDVUt8UFRCTDlDKVxcXFxiXCIsQWR2YW5UYWJsZXQ6XCJBbmRyb2lkLiogXFxcXGIoRTNBfFQzWHxUNUN8VDVCfFQzRXxUM0N8VDNCfFQxSnxUMUZ8VDJBfFQxSHxUMWl8RTFDfFQxLUV8VDUtQXxUNHxFMS1CfFQyQ2l8VDEtQnxUMS1EfE8xLUF8RTEtQXxUMS1BfFQzQXxUNGkpXFxcXGIgXCIsRGFueVRlY2hUYWJsZXQ6XCJHZW5pdXMgVGFiIEczfEdlbml1cyBUYWIgUzJ8R2VuaXVzIFRhYiBRM3xHZW5pdXMgVGFiIEc0fEdlbml1cyBUYWIgUTR8R2VuaXVzIFRhYiBHLUlJfEdlbml1cyBUQUIgR0lJfEdlbml1cyBUQUIgR0lJSXxHZW5pdXMgVGFiIFMxXCIsR2FsYXBhZFRhYmxldDpcIkFuZHJvaWQuKlxcXFxiRzFcXFxcYlwiLE1pY3JvbWF4VGFibGV0OlwiRnVuYm9va3xNaWNyb21heC4qXFxcXGIoUDI1MHxQNTYwfFAzNjB8UDM2MnxQNjAwfFAzMDB8UDM1MHxQNTAwfFAyNzUpXFxcXGJcIixLYXJib25uVGFibGV0OlwiQW5kcm9pZC4qXFxcXGIoQTM5fEEzN3xBMzR8U1Q4fFNUMTB8U1Q3fFNtYXJ0IFRhYjN8U21hcnQgVGFiMilcXFxcYlwiLEFsbEZpbmVUYWJsZXQ6XCJGaW5lNyBHZW5pdXN8RmluZTcgU2hpbmV8RmluZTcgQWlyfEZpbmU4IFN0eWxlfEZpbmU5IE1vcmV8RmluZTEwIEpveXxGaW5lMTEgV2lkZVwiLFBST1NDQU5UYWJsZXQ6XCJcXFxcYihQRU02M3xQTFQxMDIzR3xQTFQxMDQxfFBMVDEwNDR8UExUMTA0NEd8UExUMTA5MXxQTFQ0MzExfFBMVDQzMTFQTHxQTFQ0MzE1fFBMVDcwMzB8UExUNzAzM3xQTFQ3MDMzRHxQTFQ3MDM1fFBMVDcwMzVEfFBMVDcwNDRLfFBMVDcwNDVLfFBMVDcwNDVLQnxQTFQ3MDcxS0d8UExUNzA3MnxQTFQ3MjIzR3xQTFQ3MjI1R3xQTFQ3Nzc3R3xQTFQ3ODEwS3xQTFQ3ODQ5R3xQTFQ3ODUxR3xQTFQ3ODUyR3xQTFQ4MDE1fFBMVDgwMzF8UExUODAzNHxQTFQ4MDM2fFBMVDgwODBLfFBMVDgwODJ8UExUODA4OHxQTFQ4MjIzR3xQTFQ4MjM0R3xQTFQ4MjM1R3xQTFQ4ODE2S3xQTFQ5MDExfFBMVDkwNDVLfFBMVDkyMzNHfFBMVDk3MzV8UExUOTc2MEd8UExUOTc3MEcpXFxcXGJcIixZT05FU1RhYmxldDpcIkJRMTA3OHxCQzEwMDN8QkMxMDc3fFJLOTcwMnxCQzk3MzB8QkM5MDAxfElUOTAwMXxCQzcwMDh8QkM3MDEwfEJDNzA4fEJDNzI4fEJDNzAxMnxCQzcwMzB8QkM3MDI3fEJDNzAyNlwiLENoYW5nSmlhVGFibGV0OlwiVFBDNzEwMnxUUEM3MTAzfFRQQzcxMDV8VFBDNzEwNnxUUEM3MTA3fFRQQzcyMDF8VFBDNzIwM3xUUEM3MjA1fFRQQzcyMTB8VFBDNzcwOHxUUEM3NzA5fFRQQzc3MTJ8VFBDNzExMHxUUEM4MTAxfFRQQzgxMDN8VFBDODEwNXxUUEM4MTA2fFRQQzgyMDN8VFBDODIwNXxUUEM4NTAzfFRQQzkxMDZ8VFBDOTcwMXxUUEM5NzEwMXxUUEM5NzEwM3xUUEM5NzEwNXxUUEM5NzEwNnxUUEM5NzExMXxUUEM5NzExM3xUUEM5NzIwM3xUUEM5NzYwM3xUUEM5NzgwOXxUUEM5NzIwNXxUUEMxMDEwMXxUUEMxMDEwM3xUUEMxMDEwNnxUUEMxMDExMXxUUEMxMDIwM3xUUEMxMDIwNXxUUEMxMDUwM1wiLEdVVGFibGV0OlwiVFgtQTEzMDF8VFgtTTkwMDJ8UTcwMnxrZjAyNlwiLFBvaW50T2ZWaWV3VGFibGV0OlwiVEFCLVA1MDZ8VEFCLW5hdmktNy0zRy1NfFRBQi1QNTE3fFRBQi1QLTUyN3xUQUItUDcwMXxUQUItUDcwM3xUQUItUDcyMXxUQUItUDczMU58VEFCLVA3NDF8VEFCLVA4MjV8VEFCLVA5MDV8VEFCLVA5MjV8VEFCLVBSOTQ1fFRBQi1QTDEwMTV8VEFCLVAxMDI1fFRBQi1QSTEwNDV8VEFCLVAxMzI1fFRBQi1QUk9UQUJbMC05XSt8VEFCLVBST1RBQjI1fFRBQi1QUk9UQUIyNnxUQUItUFJPVEFCMjd8VEFCLVBST1RBQjI2WEx8VEFCLVBST1RBQjItSVBTOXxUQUItUFJPVEFCMzAtSVBTOXxUQUItUFJPVEFCMjVYWEx8VEFCLVBST1RBQjI2LUlQUzEwfFRBQi1QUk9UQUIzMC1JUFMxMFwiLE92ZXJtYXhUYWJsZXQ6XCJPVi0oU3RlZWxDb3JlfE5ld0Jhc2V8QmFzZWNvcmV8QmFzZW9uZXxFeGVsbGVufFF1YXR0b3J8RWR1VGFifFNvbHV0aW9ufEFDVElPTnxCYXNpY1RhYnxUZWRkeVRhYnxNYWdpY1RhYnxTdHJlYW18VEItMDh8VEItMDkpXCIsSENMVGFibGV0OlwiSENMLipUYWJsZXR8Q29ubmVjdC0zRy0yLjB8Q29ubmVjdC0yRy0yLjB8TUUgVGFibGV0IFUxfE1FIFRhYmxldCBVMnxNRSBUYWJsZXQgRzF8TUUgVGFibGV0IFgxfE1FIFRhYmxldCBZMnxNRSBUYWJsZXQgU3luY1wiLERQU1RhYmxldDpcIkRQUyBEcmVhbSA5fERQUyBEdWFsIDdcIixWaXN0dXJlVGFibGV0OlwiVjk3IEhEfGk3NSAzR3xWaXN0dXJlIFY0KCBIRCk/fFZpc3R1cmUgVjUoIEhEKT98VmlzdHVyZSBWMTBcIixDcmVzdGFUYWJsZXQ6XCJDVFAoLSk/ODEwfENUUCgtKT84MTh8Q1RQKC0pPzgyOHxDVFAoLSk/ODM4fENUUCgtKT84ODh8Q1RQKC0pPzk3OHxDVFAoLSk/OTgwfENUUCgtKT85ODd8Q1RQKC0pPzk4OHxDVFAoLSk/OTg5XCIsTWVkaWF0ZWtUYWJsZXQ6XCJcXFxcYk1UODEyNXxNVDgzODl8TVQ4MTM1fE1UODM3N1xcXFxiXCIsQ29uY29yZGVUYWJsZXQ6XCJDb25jb3JkZShbIF0rKT9UYWJ8Q29uQ29yZGUgUmVhZE1hblwiLEdvQ2xldmVyVGFibGV0OlwiR09DTEVWRVIgVEFCfEE3R09DTEVWRVJ8TTEwNDJ8TTc4NDF8TTc0MnxSMTA0MkJLfFIxMDQxfFRBQiBBOTc1fFRBQiBBNzg0MnxUQUIgQTc0MXxUQUIgQTc0MUx8VEFCIE03MjNHfFRBQiBNNzIxfFRBQiBBMTAyMXxUQUIgSTkyMXxUQUIgUjcyMXxUQUIgSTcyMHxUQUIgVDc2fFRBQiBSNzB8VEFCIFI3Ni4yfFRBQiBSMTA2fFRBQiBSODMuMnxUQUIgTTgxM0d8VEFCIEk3MjF8R0NUQTcyMnxUQUIgSTcwfFRBQiBJNzF8VEFCIFM3M3xUQUIgUjczfFRBQiBSNzR8VEFCIFI5M3xUQUIgUjc1fFRBQiBSNzYuMXxUQUIgQTczfFRBQiBBOTN8VEFCIEE5My4yfFRBQiBUNzJ8VEFCIFI4M3xUQUIgUjk3NHxUQUIgUjk3M3xUQUIgQTEwMXxUQUIgQTEwM3xUQUIgQTEwNHxUQUIgQTEwNC4yfFIxMDVCS3xNNzEzR3xBOTcyQkt8VEFCIEE5NzF8VEFCIFI5NzQuMnxUQUIgUjEwNHxUQUIgUjgzLjN8VEFCIEExMDQyXCIsTW9kZWNvbVRhYmxldDpcIkZyZWVUQUIgOTAwMHxGcmVlVEFCIDcuNHxGcmVlVEFCIDcwMDR8RnJlZVRBQiA3ODAwfEZyZWVUQUIgMjA5NnxGcmVlVEFCIDcuNXxGcmVlVEFCIDEwMTR8RnJlZVRBQiAxMDAxIHxGcmVlVEFCIDgwMDF8RnJlZVRBQiA5NzA2fEZyZWVUQUIgOTcwMnxGcmVlVEFCIDcwMDN8RnJlZVRBQiA3MDAyfEZyZWVUQUIgMTAwMnxGcmVlVEFCIDc4MDF8RnJlZVRBQiAxMzMxfEZyZWVUQUIgMTAwNHxGcmVlVEFCIDgwMDJ8RnJlZVRBQiA4MDE0fEZyZWVUQUIgOTcwNHxGcmVlVEFCIDEwMDNcIixWb25pbm9UYWJsZXQ6XCJcXFxcYihBcmd1c1sgX10/U3xEaWFtb25kWyBfXT83OUhEfEVtZXJhbGRbIF9dPzc4RXxMdW5hWyBfXT83MEN8T255eFsgX10/U3xPbnl4WyBfXT9afE9yaW5bIF9dP0hEfE9yaW5bIF9dP1N8T3Rpc1sgX10/U3xTcGVlZFN0YXJbIF9dP1N8TWFnbmV0WyBfXT9NOXxQcmltdXNbIF9dPzk0WyBfXT8zR3xQcmltdXNbIF9dPzk0SER8UHJpbXVzWyBfXT9RU3xBbmRyb2lkLipcXFxcYlE4XFxcXGJ8U2lyaXVzWyBfXT9FVk9bIF9dP1FTfFNpcml1c1sgX10/UVN8U3Bpcml0WyBfXT9TKVxcXFxiXCIsRUNTVGFibGV0OlwiVjA3T1QyfFRNMTA1QXxTMTBPVDF8VFIxMENTMVwiLFN0b3JleFRhYmxldDpcImVaZWVbXyddPyhUYWJ8R28pWzAtOV0rfFRhYkxDN3xMb29uZXkgVHVuZXMgVGFiXCIsVm9kYWZvbmVUYWJsZXQ6XCJTbWFydFRhYihbIF0rKT9bMC05XSt8U21hcnRUYWJJSTEwfFNtYXJ0VGFiSUk3fFZGLTE0OTdcIixFc3NlbnRpZWxCVGFibGV0OlwiU21hcnRbICddP1RBQlsgXSs/WzAtOV0rfEZhbWlseVsgJ10/VEFCMlwiLFJvc3NNb29yVGFibGV0OlwiUk0tNzkwfFJNLTk5N3xSTUQtODc4R3xSTUQtOTc0UnxSTVQtNzA1QXxSTVQtNzAxfFJNRS02MDF8Uk1ULTUwMXxSTVQtNzExXCIsaU1vYmlsZVRhYmxldDpcImktbW9iaWxlIGktbm90ZVwiLFRvbGlub1RhYmxldDpcInRvbGlubyB0YWIgWzAtOS5dK3x0b2xpbm8gc2hpbmVcIixBdWRpb1NvbmljVGFibGV0OlwiXFxcXGJDLTIyUXxUNy1RQ3xULTE3QnxULTE3UFxcXFxiXCIsQU1QRVRhYmxldDpcIkFuZHJvaWQuKiBBNzggXCIsU2trVGFibGV0OlwiQW5kcm9pZC4qIChTS1lQQUR8UEhPRU5JWHxDWUNMT1BTKVwiLFRlY25vVGFibGV0OlwiVEVDTk8gUDlcIixKWERUYWJsZXQ6XCJBbmRyb2lkLiogXFxcXGIoRjMwMDB8QTMzMDB8SlhENTAwMHxKWEQzMDAwfEpYRDIwMDB8SlhEMzAwQnxKWEQzMDB8UzU4MDB8Uzc4MDB8UzYwMmJ8UzUxMTBifFM3MzAwfFM1MzAwfFM2MDJ8UzYwM3xTNTEwMHxTNTExMHxTNjAxfFM3MTAwYXxQMzAwMEZ8UDMwMDBzfFAxMDF8UDIwMHN8UDEwMDBtfFAyMDBtfFA5MTAwfFAxMDAwc3xTNjYwMGJ8UzkwOHxQMTAwMHxQMzAwfFMxOHxTNjYwMHxTOTEwMClcXFxcYlwiLGlKb3lUYWJsZXQ6XCJUYWJsZXQgKFNwaXJpdCA3fEVzc2VudGlhfEdhbGF0ZWF8RnVzaW9ufE9uaXggN3xMYW5kYXxUaXRhbnxTY29vYnl8RGVveHxTdGVsbGF8VGhlbWlzfEFyZ29ufFVuaXF1ZSA3fFN5Z251c3xIZXhlbnxGaW5pdHkgN3xDcmVhbXxDcmVhbSBYMnxKYWRlfE5lb24gN3xOZXJvbiA3fEthbmR5fFNjYXBlfFNhcGh5ciA3fFJlYmVsfEJpb3h8UmViZWx8UmViZWwgOEdCfE15c3R8RHJhY28gN3xNeXN0fFRhYjctMDA0fE15c3R8VGFkZW8gSm9uZXN8VGFibGV0IEJvaW5nfEFycm93fERyYWNvIER1YWwgQ2FtfEF1cml4fE1pbnR8QW1pdHl8UmV2b2x1dGlvbnxGaW5pdHkgOXxOZW9uIDl8VDl3fEFtaXR5IDRHQiBEdWFsIENhbXxTdG9uZSA0R0J8U3RvbmUgOEdCfEFuZHJvbWVkYXxTaWxrZW58WDJ8QW5kcm9tZWRhIElJfEhhbGxleXxGbGFtZXxTYXBoeXIgOSw3fFRvdWNoIDh8UGxhbmV0fFRyaXRvbnxVbmlxdWUgMTB8SGV4ZW4gMTB8TWVtcGhpcyA0R0J8TWVtcGhpcyA4R0J8T25peCAxMClcIixGWDJUYWJsZXQ6XCJGWDIgUEFEN3xGWDIgUEFEMTBcIixYb3JvVGFibGV0OlwiS2lkc1BBRCA3MDF8UEFEWyBdPzcxMnxQQURbIF0/NzE0fFBBRFsgXT83MTZ8UEFEWyBdPzcxN3xQQURbIF0/NzE4fFBBRFsgXT83MjB8UEFEWyBdPzcyMXxQQURbIF0/NzIyfFBBRFsgXT83OTB8UEFEWyBdPzc5MnxQQURbIF0/OTAwfFBBRFsgXT85NzE1RHxQQURbIF0/OTcxNkRSfFBBRFsgXT85NzE4RFJ8UEFEWyBdPzk3MTlRUnxQQURbIF0/OTcyMFFSfFRlbGVQQUQxMDMwfFRlbGVwYWQxMDMyfFRlbGVQQUQ3MzB8VGVsZVBBRDczMXxUZWxlUEFENzMyfFRlbGVQQUQ3MzVRfFRlbGVQQUQ4MzB8VGVsZVBBRDk3MzB8VGVsZVBBRDc5NXxNZWdhUEFEIDEzMzF8TWVnYVBBRCAxODUxfE1lZ2FQQUQgMjE1MVwiLFZpZXdzb25pY1RhYmxldDpcIlZpZXdQYWQgMTBwaXxWaWV3UGFkIDEwZXxWaWV3UGFkIDEwc3xWaWV3UGFkIEU3MnxWaWV3UGFkN3xWaWV3UGFkIEUxMDB8Vmlld1BhZCA3ZXxWaWV3U29uaWMgVkI3MzN8VkIxMDBhXCIsT2R5c1RhYmxldDpcIkxPT1h8WEVOTzEwfE9EWVNbIC1dKFNwYWNlfEVWT3xYcHJlc3N8Tk9PTil8XFxcXGJYRUxJT1xcXFxifFhlbGlvMTBQcm98WEVMSU83UEhPTkVUQUJ8WEVMSU8xMEVYVFJFTUV8WEVMSU9QVDJ8TkVPX1FVQUQxMFwiLENhcHRpdmFUYWJsZXQ6XCJDQVBUSVZBIFBBRFwiLEljb25iaXRUYWJsZXQ6XCJOZXRUQUJ8TlQtMzcwMnxOVC0zNzAyU3xOVC0zNzAyU3xOVC0zNjAzUHxOVC0zNjAzUHxOVC0wNzA0U3xOVC0wNzA0U3xOVC0zODA1Q3xOVC0zODA1Q3xOVC0wODA2Q3xOVC0wODA2Q3xOVC0wOTA5VHxOVC0wOTA5VHxOVC0wOTA3U3xOVC0wOTA3U3xOVC0wOTAyU3xOVC0wOTAyU1wiLFRlY2xhc3RUYWJsZXQ6XCJUOTggNEd8XFxcXGJQODBcXFxcYnxcXFxcYlg5MEhEXFxcXGJ8WDk4IEFpcnxYOTggQWlyIDNHfFxcXFxiWDg5XFxcXGJ8UDgwIDNHfFxcXFxiWDgwaFxcXFxifFA5OCBBaXJ8XFxcXGJYODlIRFxcXFxifFA5OCAzR3xcXFxcYlA5MEhEXFxcXGJ8UDg5IDNHfFg5OCAzR3xcXFxcYlA3MGhcXFxcYnxQNzlIRCAzR3xHMThkIDNHfFxcXFxiUDc5SERcXFxcYnxcXFxcYlA4OXNcXFxcYnxcXFxcYkE4OFxcXFxifFxcXFxiUDEwSERcXFxcYnxcXFxcYlAxOUhEXFxcXGJ8RzE4IDNHfFxcXFxiUDc4SERcXFxcYnxcXFxcYkE3OFxcXFxifFxcXFxiUDc1XFxcXGJ8RzE3cyAzR3xHMTdoIDNHfFxcXFxiUDg1dFxcXFxifFxcXFxiUDkwXFxcXGJ8XFxcXGJQMTFcXFxcYnxcXFxcYlA5OHRcXFxcYnxcXFxcYlA5OEhEXFxcXGJ8XFxcXGJHMThkXFxcXGJ8XFxcXGJQODVzXFxcXGJ8XFxcXGJQMTFIRFxcXFxifFxcXFxiUDg4c1xcXFxifFxcXFxiQTgwSERcXFxcYnxcXFxcYkE4MHNlXFxcXGJ8XFxcXGJBMTBoXFxcXGJ8XFxcXGJQODlcXFxcYnxcXFxcYlA3OHNcXFxcYnxcXFxcYkcxOFxcXFxifFxcXFxiUDg1XFxcXGJ8XFxcXGJBNzBoXFxcXGJ8XFxcXGJBNzBcXFxcYnxcXFxcYkcxN1xcXFxifFxcXFxiUDE4XFxcXGJ8XFxcXGJBODBzXFxcXGJ8XFxcXGJBMTFzXFxcXGJ8XFxcXGJQODhIRFxcXFxifFxcXFxiQTgwaFxcXFxifFxcXFxiUDc2c1xcXFxifFxcXFxiUDc2aFxcXFxifFxcXFxiUDk4XFxcXGJ8XFxcXGJBMTBIRFxcXFxifFxcXFxiUDc4XFxcXGJ8XFxcXGJQODhcXFxcYnxcXFxcYkExMVxcXFxifFxcXFxiQTEwdFxcXFxifFxcXFxiUDc2YVxcXFxifFxcXFxiUDc2dFxcXFxifFxcXFxiUDc2ZVxcXFxifFxcXFxiUDg1SERcXFxcYnxcXFxcYlA4NWFcXFxcYnxcXFxcYlA4NlxcXFxifFxcXFxiUDc1SERcXFxcYnxcXFxcYlA3NnZcXFxcYnxcXFxcYkExMlxcXFxifFxcXFxiUDc1YVxcXFxifFxcXFxiQTE1XFxcXGJ8XFxcXGJQNzZUaVxcXFxifFxcXFxiUDgxSERcXFxcYnxcXFxcYkExMFxcXFxifFxcXFxiVDc2MFZFXFxcXGJ8XFxcXGJUNzIwSERcXFxcYnxcXFxcYlA3NlxcXFxifFxcXFxiUDczXFxcXGJ8XFxcXGJQNzFcXFxcYnxcXFxcYlA3MlxcXFxifFxcXFxiVDcyMFNFXFxcXGJ8XFxcXGJDNTIwVGlcXFxcYnxcXFxcYlQ3NjBcXFxcYnxcXFxcYlQ3MjBWRVxcXFxifFQ3MjAtM0dFfFQ3MjAtV2lGaVwiLE9uZGFUYWJsZXQ6XCJcXFxcYihWOTc1aXxWaTMwfFZYNTMwfFY3MDF8Vmk2MHxWNzAxc3xWaTUwfFY4MDFzfFY3MTl8Vng2MTB3fFZYNjEwV3xWODE5aXxWaTEwfFZYNTgwV3xWaTEwfFY3MTFzfFY4MTN8VjgxMXxWODIwd3xWODIwfFZpMjB8VjcxMXxWSTMwV3xWNzEyfFY4OTF3fFY5NzJ8VjgxOXd8VjgyMHd8Vmk2MHxWODIwd3xWNzExfFY4MTNzfFY4MDF8VjgxOXxWOTc1c3xWODAxfFY4MTl8VjgxOXxWODE4fFY4MTF8VjcxMnxWOTc1bXxWMTAxd3xWOTYxd3xWODEyfFY4MTh8Vjk3MXxWOTcxc3xWOTE5fFY5ODl8VjExNnd8VjEwMnd8Vjk3M3xWaTQwKVxcXFxiW1xcXFxzXStcIixKYXl0ZWNoVGFibGV0OlwiVFBDLVBBNzYyXCIsQmxhdXB1bmt0VGFibGV0OlwiRW5kZWF2b3VyIDgwME5HfEVuZGVhdm91ciAxMDEwXCIsRGlnbWFUYWJsZXQ6XCJcXFxcYihpRHgxMHxpRHg5fGlEeDh8aUR4N3xpRHhEN3xpRHhEOHxpRHNROHxpRHNRN3xpRHNROHxpRHNEMTB8aURuRDd8M1RTODA0SHxpRHNRMTF8aURqN3xpRHMxMClcXFxcYlwiLEV2b2xpb1RhYmxldDpcIkFSSUFfTWluaV93aWZpfEFyaWFbIF9dTWluaXxFdm9saW8gWDEwfEV2b2xpbyBYN3xFdm9saW8gWDh8XFxcXGJFdm90YWJcXFxcYnxcXFxcYk5ldXJhXFxcXGJcIixMYXZhVGFibGV0OlwiUVBBRCBFNzA0fFxcXFxiSXZvcnlTXFxcXGJ8RS1UQUIgSVZPUll8XFxcXGJFLVRBQlxcXFxiXCIsQW9jVGFibGV0OlwiTVcwODExfE1XMDgxMnxNVzA5MjJ8TVRLODM4MnxNVzEwMzF8TVcwODMxfE1XMDgyMXxNVzA5MzF8TVcwNzEyXCIsTXBtYW5UYWJsZXQ6XCJNUDExIE9DVEF8TVAxMCBPQ1RBfE1QUUMxMTE0fE1QUUMxMDA0fE1QUUM5OTR8TVBRQzk3NHxNUFFDOTczfE1QUUM4MDR8TVBRQzc4NHxNUFFDNzgwfFxcXFxiTVBHN1xcXFxifE1QRENHNzV8TVBEQ0c3MXxNUERDMTAwNnxNUDEwMURDfE1QREM5MDAwfE1QREM5MDV8TVBEQzcwNkhEfE1QREM3MDZ8TVBEQzcwNXxNUERDMTEwfE1QREMxMDB8TVBEQzk5fE1QREM5N3xNUERDODh8TVBEQzh8TVBEQzc3fE1QNzA5fE1JRDcwMXxNSUQ3MTF8TUlEMTcwfE1QREM3MDN8TVBRQzEwMTBcIixDZWxrb25UYWJsZXQ6XCJDVDY5NXxDVDg4OHxDVFtcXFxcc10/OTEwfENUNyBUYWJ8Q1Q5IFRhYnxDVDMgVGFifENUMiBUYWJ8Q1QxIFRhYnxDODIwfEM3MjB8XFxcXGJDVC0xXFxcXGJcIixXb2xkZXJUYWJsZXQ6XCJtaVRhYiBcXFxcYihESUFNT05EfFNQQUNFfEJST09LTFlOfE5FT3xGTFl8TUFOSEFUVEFOfEZVTkt8RVZPTFVUSU9OfFNLWXxHT0NBUnxJUk9OfEdFTklVU3xQT1B8TUlOVHxFUFNJTE9OfEJST0FEV0FZfEpVTVB8SE9QfExFR0VORHxORVcgQUdFfExJTkV8QURWQU5DRXxGRUVMfEZPTExPV3xMSUtFfExJTkt8TElWRXxUSElOS3xGUkVFRE9NfENISUNBR098Q0xFVkVMQU5EfEJBTFRJTU9SRS1HSHxJT1dBfEJPU1RPTnxTRUFUVExFfFBIT0VOSVh8REFMTEFTfElOIDEwMXxNYXN0ZXJDaGVmKVxcXFxiXCIsTWlUYWJsZXQ6XCJcXFxcYk1JIFBBRFxcXFxifFxcXFxiSE0gTk9URSAxV1xcXFxiXCIsTmliaXJ1VGFibGV0OlwiTmliaXJ1IE0xfE5pYmlydSBKdXBpdGVyIE9uZVwiLE5leG9UYWJsZXQ6XCJORVhPIE5PVkF8TkVYTyAxMHxORVhPIEFWSU98TkVYTyBGUkVFfE5FWE8gR098TkVYTyBFVk98TkVYTyAzR3xORVhPIFNNQVJUfE5FWE8gS0lERE98TkVYTyBNT0JJXCIsTGVhZGVyVGFibGV0OlwiVEJMVDEwUXxUQkxUMTBJfFRCTC0xMFdES0J8VEJMLTEwV0RLQk8yMDEzfFRCTC1XMjMwVjJ8VEJMLVc0NTB8VEJMLVc1MDB8U1Y1NzJ8VEJMVDdJfFRCQS1BQzctOEd8VEJMVDc5fFRCTC04VzE2fFRCTC0xMFczMnxUQkwtMTBXS0J8VEJMLVcxMDBcIixVYmlzbGF0ZVRhYmxldDpcIlViaVNsYXRlW1xcXFxzXT83Q1wiLFBvY2tldEJvb2tUYWJsZXQ6XCJQb2NrZXRib29rXCIsS29jYXNvVGFibGV0OlwiXFxcXGIoVEItMTIwNylcXFxcYlwiLEhpc2Vuc2VUYWJsZXQ6XCJcXFxcYihGNTI4MXxFMjM3MSlcXFxcYlwiLEh1ZGw6XCJIdWRsIEhUN1MzfEh1ZGwgMlwiLFRlbHN0cmFUYWJsZXQ6XCJULUh1YjJcIixHZW5lcmljVGFibGV0OlwiQW5kcm9pZC4qXFxcXGI5N0RcXFxcYnxUYWJsZXQoPyEuKlBDKXxCTlRWMjUwQXxNSUQtV0NETUF8TG9naWNQRCBab29tMnxcXFxcYkE3RUJcXFxcYnxDYXROb3ZhOHxBMV8wN3xDVDcwNHxDVDEwMDJ8XFxcXGJNNzIxXFxcXGJ8cmszMHNka3xcXFxcYkVWT1RBQlxcXFxifE03NThBfEVUOTA0fEFMVU1JVU0xMHxTbWFydGZyZW4gVGFifEVuZGVhdm91ciAxMDEwfFRhYmxldC1QQy00fFRhZ2kgVGFifFxcXFxiTTZwcm9cXFxcYnxDVDEwMjBXfGFyYyAxMEhEfFxcXFxiVFA3NTBcXFxcYlwifSxvc3M6e0FuZHJvaWRPUzpcIkFuZHJvaWRcIixCbGFja0JlcnJ5T1M6XCJibGFja2JlcnJ5fFxcXFxiQkIxMFxcXFxifHJpbSB0YWJsZXQgb3NcIixQYWxtT1M6XCJQYWxtT1N8YXZhbnRnb3xibGF6ZXJ8ZWxhaW5lfGhpcHRvcHxwYWxtfHBsdWNrZXJ8eGlpbm9cIixTeW1iaWFuT1M6XCJTeW1iaWFufFN5bWJPU3xTZXJpZXM2MHxTZXJpZXM0MHxTWUItWzAtOV0rfFxcXFxiUzYwXFxcXGJcIixXaW5kb3dzTW9iaWxlT1M6XCJXaW5kb3dzIENFLiooUFBDfFNtYXJ0cGhvbmV8TW9iaWxlfFswLTldezN9eFswLTldezN9KXxXaW5kb3cgTW9iaWxlfFdpbmRvd3MgUGhvbmUgWzAtOS5dK3xXQ0U7XCIsV2luZG93c1Bob25lT1M6XCJXaW5kb3dzIFBob25lIDEwLjB8V2luZG93cyBQaG9uZSA4LjF8V2luZG93cyBQaG9uZSA4LjB8V2luZG93cyBQaG9uZSBPU3xYQkxXUDd8WnVuZVdQN3xXaW5kb3dzIE5UIDYuWzIzXTsgQVJNO1wiLGlPUzpcIlxcXFxiaVBob25lLipNb2JpbGV8XFxcXGJpUG9kfFxcXFxiaVBhZFwiLE1lZUdvT1M6XCJNZWVHb1wiLE1hZW1vT1M6XCJNYWVtb1wiLEphdmFPUzpcIkoyTUUvfFxcXFxiTUlEUFxcXFxifFxcXFxiQ0xEQ1xcXFxiXCIsd2ViT1M6XCJ3ZWJPU3xocHdPU1wiLGJhZGFPUzpcIlxcXFxiQmFkYVxcXFxiXCIsQlJFV09TOlwiQlJFV1wifSx1YXM6e0Nocm9tZTpcIlxcXFxiQ3JNb1xcXFxifENyaU9TfEFuZHJvaWQuKkNocm9tZS9bLjAtOV0qIChNb2JpbGUpP1wiLERvbGZpbjpcIlxcXFxiRG9sZmluXFxcXGJcIixPcGVyYTpcIk9wZXJhLipNaW5pfE9wZXJhLipNb2JpfEFuZHJvaWQuKk9wZXJhfE1vYmlsZS4qT1BSL1swLTkuXSt8Q29hc3QvWzAtOS5dK1wiLFNreWZpcmU6XCJTa3lmaXJlXCIsRWRnZTpcIk1vYmlsZSBTYWZhcmkvWy4wLTldKiBFZGdlXCIsSUU6XCJJRU1vYmlsZXxNU0lFTW9iaWxlXCIsRmlyZWZveDpcImZlbm5lY3xmaXJlZm94LiptYWVtb3woTW9iaWxlfFRhYmxldCkuKkZpcmVmb3h8RmlyZWZveC4qTW9iaWxlfEZ4aU9TXCIsQm9sdDpcImJvbHRcIixUZWFTaGFyazpcInRlYXNoYXJrXCIsQmxhemVyOlwiQmxhemVyXCIsU2FmYXJpOlwiVmVyc2lvbi4qTW9iaWxlLipTYWZhcml8U2FmYXJpLipNb2JpbGV8TW9iaWxlU2FmYXJpXCIsVUNCcm93c2VyOlwiVUMuKkJyb3dzZXJ8VUNXRUJcIixiYWlkdWJveGFwcDpcImJhaWR1Ym94YXBwXCIsYmFpZHVicm93c2VyOlwiYmFpZHVicm93c2VyXCIsRGlpZ29Ccm93c2VyOlwiRGlpZ29Ccm93c2VyXCIsUHVmZmluOlwiUHVmZmluXCIsTWVyY3VyeTpcIlxcXFxiTWVyY3VyeVxcXFxiXCIsT2JpZ29Ccm93c2VyOlwiT2JpZ29cIixOZXRGcm9udDpcIk5GLUJyb3dzZXJcIixHZW5lcmljQnJvd3NlcjpcIk5va2lhQnJvd3NlcnxPdmlCcm93c2VyfE9uZUJyb3dzZXJ8VHdvbmt5QmVhbUJyb3dzZXJ8U0VNQy4qQnJvd3NlcnxGbHlGbG93fE1pbmltb3xOZXRGcm9udHxOb3ZhcnJhLVZpc2lvbnxNUVFCcm93c2VyfE1pY3JvTWVzc2VuZ2VyXCIsUGFsZU1vb246XCJBbmRyb2lkLipQYWxlTW9vbnxNb2JpbGUuKlBhbGVNb29uXCJ9LHByb3BzOntNb2JpbGU6XCJNb2JpbGUvW1ZFUl1cIixCdWlsZDpcIkJ1aWxkL1tWRVJdXCIsVmVyc2lvbjpcIlZlcnNpb24vW1ZFUl1cIixWZW5kb3JJRDpcIlZlbmRvcklEL1tWRVJdXCIsaVBhZDpcImlQYWQuKkNQVVthLXogXStbVkVSXVwiLGlQaG9uZTpcImlQaG9uZS4qQ1BVW2EteiBdK1tWRVJdXCIsaVBvZDpcImlQb2QuKkNQVVthLXogXStbVkVSXVwiLEtpbmRsZTpcIktpbmRsZS9bVkVSXVwiLENocm9tZTpbXCJDaHJvbWUvW1ZFUl1cIixcIkNyaU9TL1tWRVJdXCIsXCJDck1vL1tWRVJdXCJdLENvYXN0OltcIkNvYXN0L1tWRVJdXCJdLERvbGZpbjpcIkRvbGZpbi9bVkVSXVwiLEZpcmVmb3g6W1wiRmlyZWZveC9bVkVSXVwiLFwiRnhpT1MvW1ZFUl1cIl0sRmVubmVjOlwiRmVubmVjL1tWRVJdXCIsRWRnZTpcIkVkZ2UvW1ZFUl1cIixJRTpbXCJJRU1vYmlsZS9bVkVSXTtcIixcIklFTW9iaWxlIFtWRVJdXCIsXCJNU0lFIFtWRVJdO1wiLFwiVHJpZGVudC9bMC05Ll0rOy4qcnY6W1ZFUl1cIl0sTmV0RnJvbnQ6XCJOZXRGcm9udC9bVkVSXVwiLE5va2lhQnJvd3NlcjpcIk5va2lhQnJvd3Nlci9bVkVSXVwiLE9wZXJhOltcIiBPUFIvW1ZFUl1cIixcIk9wZXJhIE1pbmkvW1ZFUl1cIixcIlZlcnNpb24vW1ZFUl1cIl0sXCJPcGVyYSBNaW5pXCI6XCJPcGVyYSBNaW5pL1tWRVJdXCIsXCJPcGVyYSBNb2JpXCI6XCJWZXJzaW9uL1tWRVJdXCIsXCJVQyBCcm93c2VyXCI6XCJVQyBCcm93c2VyW1ZFUl1cIixNUVFCcm93c2VyOlwiTVFRQnJvd3Nlci9bVkVSXVwiLE1pY3JvTWVzc2VuZ2VyOlwiTWljcm9NZXNzZW5nZXIvW1ZFUl1cIixiYWlkdWJveGFwcDpcImJhaWR1Ym94YXBwL1tWRVJdXCIsYmFpZHVicm93c2VyOlwiYmFpZHVicm93c2VyL1tWRVJdXCIsU2Ftc3VuZ0Jyb3dzZXI6XCJTYW1zdW5nQnJvd3Nlci9bVkVSXVwiLElyb246XCJJcm9uL1tWRVJdXCIsU2FmYXJpOltcIlZlcnNpb24vW1ZFUl1cIixcIlNhZmFyaS9bVkVSXVwiXSxTa3lmaXJlOlwiU2t5ZmlyZS9bVkVSXVwiLFRpemVuOlwiVGl6ZW4vW1ZFUl1cIixXZWJraXQ6XCJ3ZWJraXRbIC9dW1ZFUl1cIixQYWxlTW9vbjpcIlBhbGVNb29uL1tWRVJdXCIsR2Vja286XCJHZWNrby9bVkVSXVwiLFRyaWRlbnQ6XCJUcmlkZW50L1tWRVJdXCIsUHJlc3RvOlwiUHJlc3RvL1tWRVJdXCIsR29hbm5hOlwiR29hbm5hL1tWRVJdXCIsaU9TOlwiIFxcXFxiaT9PU1xcXFxiIFtWRVJdWyA7XXsxfVwiLEFuZHJvaWQ6XCJBbmRyb2lkIFtWRVJdXCIsQmxhY2tCZXJyeTpbXCJCbGFja0JlcnJ5W1xcXFx3XSsvW1ZFUl1cIixcIkJsYWNrQmVycnkuKlZlcnNpb24vW1ZFUl1cIixcIlZlcnNpb24vW1ZFUl1cIl0sQlJFVzpcIkJSRVcgW1ZFUl1cIixKYXZhOlwiSmF2YS9bVkVSXVwiLFwiV2luZG93cyBQaG9uZSBPU1wiOltcIldpbmRvd3MgUGhvbmUgT1MgW1ZFUl1cIixcIldpbmRvd3MgUGhvbmUgW1ZFUl1cIl0sXCJXaW5kb3dzIFBob25lXCI6XCJXaW5kb3dzIFBob25lIFtWRVJdXCIsXCJXaW5kb3dzIENFXCI6XCJXaW5kb3dzIENFL1tWRVJdXCIsXCJXaW5kb3dzIE5UXCI6XCJXaW5kb3dzIE5UIFtWRVJdXCIsU3ltYmlhbjpbXCJTeW1iaWFuT1MvW1ZFUl1cIixcIlN5bWJpYW4vW1ZFUl1cIl0sd2ViT1M6W1wid2ViT1MvW1ZFUl1cIixcImhwd09TL1tWRVJdO1wiXX0sdXRpbHM6e0JvdDpcIkdvb2dsZWJvdHxmYWNlYm9va2V4dGVybmFsaGl0fEFkc0JvdC1Hb29nbGV8R29vZ2xlIEtleXdvcmQgU3VnZ2VzdGlvbnxGYWNlYm90fFlhbmRleEJvdHxZYW5kZXhNb2JpbGVCb3R8YmluZ2JvdHxpYV9hcmNoaXZlcnxBaHJlZnNCb3R8RXpvb21zfEdTTEZib3R8V0JTZWFyY2hCb3R8VHdpdHRlcmJvdHxUd2VldG1lbWVCb3R8VHdpa2xlfFBhcGVyTGlCb3R8V290Ym94fFVud2luZEZldGNob3J8RXhhYm90fE1KMTJib3R8WWFuZGV4SW1hZ2VzfFR1cm5pdGluQm90fFBpbmdkb21cIixNb2JpbGVCb3Q6XCJHb29nbGVib3QtTW9iaWxlfEFkc0JvdC1Hb29nbGUtTW9iaWxlfFlhaG9vU2Vla2VyL00xQTEtUjJEMlwiLERlc2t0b3BNb2RlOlwiV1BEZXNrdG9wXCIsVFY6XCJTb255RFRWfEhiYlRWXCIsV2ViS2l0OlwiKHdlYmtpdClbIC9dKFtcXFxcdy5dKylcIixDb25zb2xlOlwiXFxcXGIoTmludGVuZG98TmludGVuZG8gV2lpVXxOaW50ZW5kbyAzRFN8UExBWVNUQVRJT058WGJveClcXFxcYlwiLFdhdGNoOlwiU00tVjcwMFwifX0sZi5kZXRlY3RNb2JpbGVCcm93c2Vycz17ZnVsbFBhdHRlcm46LyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWluby9pLHNob3J0UGF0dGVybjovMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaSx0YWJsZXRQYXR0ZXJuOi9hbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pXHJcbn07dmFyIGcsaD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3JldHVybiBmLkZBTExCQUNLX1BIT05FPVwiVW5rbm93blBob25lXCIsZi5GQUxMQkFDS19UQUJMRVQ9XCJVbmtub3duVGFibGV0XCIsZi5GQUxMQkFDS19NT0JJTEU9XCJVbmtub3duTW9iaWxlXCIsZz1cImlzQXJyYXlcImluIEFycmF5P0FycmF5LmlzQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpfSxmdW5jdGlvbigpe3ZhciBhLGIsYyxlLGksaixrPWYubW9iaWxlRGV0ZWN0UnVsZXM7Zm9yKGEgaW4gay5wcm9wcylpZihoLmNhbGwoay5wcm9wcyxhKSl7Zm9yKGI9ay5wcm9wc1thXSxnKGIpfHwoYj1bYl0pLGk9Yi5sZW5ndGgsZT0wO2U8aTsrK2UpYz1iW2VdLGo9Yy5pbmRleE9mKFwiW1ZFUl1cIiksaj49MCYmKGM9Yy5zdWJzdHJpbmcoMCxqKStcIihbXFxcXHcuX1xcXFwrXSspXCIrYy5zdWJzdHJpbmcoais1KSksYltlXT1uZXcgUmVnRXhwKGMsXCJpXCIpO2sucHJvcHNbYV09Yn1kKGsub3NzKSxkKGsucGhvbmVzKSxkKGsudGFibGV0cyksZChrLnVhcyksZChrLnV0aWxzKSxrLm9zczA9e1dpbmRvd3NQaG9uZU9TOmsub3NzLldpbmRvd3NQaG9uZU9TLFdpbmRvd3NNb2JpbGVPUzprLm9zcy5XaW5kb3dzTW9iaWxlT1N9fSgpLGYuZmluZE1hdGNoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjIGluIGEpaWYoaC5jYWxsKGEsYykmJmFbY10udGVzdChiKSlyZXR1cm4gYztyZXR1cm4gbnVsbH0sZi5maW5kTWF0Y2hlcz1mdW5jdGlvbihhLGIpe3ZhciBjPVtdO2Zvcih2YXIgZCBpbiBhKWguY2FsbChhLGQpJiZhW2RdLnRlc3QoYikmJmMucHVzaChkKTtyZXR1cm4gY30sZi5nZXRWZXJzaW9uU3RyPWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGcsaT1mLm1vYmlsZURldGVjdFJ1bGVzLnByb3BzO2lmKGguY2FsbChpLGEpKWZvcihjPWlbYV0sZT1jLmxlbmd0aCxkPTA7ZDxlOysrZClpZihnPWNbZF0uZXhlYyhiKSxudWxsIT09ZylyZXR1cm4gZ1sxXTtyZXR1cm4gbnVsbH0sZi5nZXRWZXJzaW9uPWZ1bmN0aW9uKGEsYil7dmFyIGM9Zi5nZXRWZXJzaW9uU3RyKGEsYik7cmV0dXJuIGM/Zi5wcmVwYXJlVmVyc2lvbk5vKGMpOk5hTn0sZi5wcmVwYXJlVmVyc2lvbk5vPWZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiBiPWEuc3BsaXQoL1thLXouXyBcXC9cXC1dL2kpLDE9PT1iLmxlbmd0aCYmKGE9YlswXSksYi5sZW5ndGg+MSYmKGE9YlswXStcIi5cIixiLnNoaWZ0KCksYSs9Yi5qb2luKFwiXCIpKSxOdW1iZXIoYSl9LGYuaXNNb2JpbGVGYWxsYmFjaz1mdW5jdGlvbihhKXtyZXR1cm4gZi5kZXRlY3RNb2JpbGVCcm93c2Vycy5mdWxsUGF0dGVybi50ZXN0KGEpfHxmLmRldGVjdE1vYmlsZUJyb3dzZXJzLnNob3J0UGF0dGVybi50ZXN0KGEuc3Vic3RyKDAsNCkpfSxmLmlzVGFibGV0RmFsbGJhY2s9ZnVuY3Rpb24oYSl7cmV0dXJuIGYuZGV0ZWN0TW9iaWxlQnJvd3NlcnMudGFibGV0UGF0dGVybi50ZXN0KGEpfSxmLnByZXBhcmVEZXRlY3Rpb25DYWNoZT1mdW5jdGlvbihhLGMsZCl7aWYoYS5tb2JpbGU9PT1iKXt2YXIgZyxoLGk7cmV0dXJuKGg9Zi5maW5kTWF0Y2goZi5tb2JpbGVEZXRlY3RSdWxlcy50YWJsZXRzLGMpKT8oYS5tb2JpbGU9YS50YWJsZXQ9aCx2b2lkKGEucGhvbmU9bnVsbCkpOihnPWYuZmluZE1hdGNoKGYubW9iaWxlRGV0ZWN0UnVsZXMucGhvbmVzLGMpKT8oYS5tb2JpbGU9YS5waG9uZT1nLHZvaWQoYS50YWJsZXQ9bnVsbCkpOnZvaWQoZi5pc01vYmlsZUZhbGxiYWNrKGMpPyhpPWUuaXNQaG9uZVNpemVkKGQpLGk9PT1iPyhhLm1vYmlsZT1mLkZBTExCQUNLX01PQklMRSxhLnRhYmxldD1hLnBob25lPW51bGwpOmk/KGEubW9iaWxlPWEucGhvbmU9Zi5GQUxMQkFDS19QSE9ORSxhLnRhYmxldD1udWxsKTooYS5tb2JpbGU9YS50YWJsZXQ9Zi5GQUxMQkFDS19UQUJMRVQsYS5waG9uZT1udWxsKSk6Zi5pc1RhYmxldEZhbGxiYWNrKGMpPyhhLm1vYmlsZT1hLnRhYmxldD1mLkZBTExCQUNLX1RBQkxFVCxhLnBob25lPW51bGwpOmEubW9iaWxlPWEudGFibGV0PWEucGhvbmU9bnVsbCl9fSxmLm1vYmlsZUdyYWRlPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwhPT1hLm1vYmlsZSgpO3JldHVybiBhLm9zKFwiaU9TXCIpJiZhLnZlcnNpb24oXCJpUGFkXCIpPj00LjN8fGEub3MoXCJpT1NcIikmJmEudmVyc2lvbihcImlQaG9uZVwiKT49My4xfHxhLm9zKFwiaU9TXCIpJiZhLnZlcnNpb24oXCJpUG9kXCIpPj0zLjF8fGEudmVyc2lvbihcIkFuZHJvaWRcIik+Mi4xJiZhLmlzKFwiV2Via2l0XCIpfHxhLnZlcnNpb24oXCJXaW5kb3dzIFBob25lIE9TXCIpPj03fHxhLmlzKFwiQmxhY2tCZXJyeVwiKSYmYS52ZXJzaW9uKFwiQmxhY2tCZXJyeVwiKT49Nnx8YS5tYXRjaChcIlBsYXlib29rLipUYWJsZXRcIil8fGEudmVyc2lvbihcIndlYk9TXCIpPj0xLjQmJmEubWF0Y2goXCJQYWxtfFByZXxQaXhpXCIpfHxhLm1hdGNoKFwiaHAuKlRvdWNoUGFkXCIpfHxhLmlzKFwiRmlyZWZveFwiKSYmYS52ZXJzaW9uKFwiRmlyZWZveFwiKT49MTJ8fGEuaXMoXCJDaHJvbWVcIikmJmEuaXMoXCJBbmRyb2lkT1NcIikmJmEudmVyc2lvbihcIkFuZHJvaWRcIik+PTR8fGEuaXMoXCJTa3lmaXJlXCIpJiZhLnZlcnNpb24oXCJTa3lmaXJlXCIpPj00LjEmJmEuaXMoXCJBbmRyb2lkT1NcIikmJmEudmVyc2lvbihcIkFuZHJvaWRcIik+PTIuM3x8YS5pcyhcIk9wZXJhXCIpJiZhLnZlcnNpb24oXCJPcGVyYSBNb2JpXCIpPjExJiZhLmlzKFwiQW5kcm9pZE9TXCIpfHxhLmlzKFwiTWVlR29PU1wiKXx8YS5pcyhcIlRpemVuXCIpfHxhLmlzKFwiRG9sZmluXCIpJiZhLnZlcnNpb24oXCJCYWRhXCIpPj0yfHwoYS5pcyhcIlVDIEJyb3dzZXJcIil8fGEuaXMoXCJEb2xmaW5cIikpJiZhLnZlcnNpb24oXCJBbmRyb2lkXCIpPj0yLjN8fGEubWF0Y2goXCJLaW5kbGUgRmlyZVwiKXx8YS5pcyhcIktpbmRsZVwiKSYmYS52ZXJzaW9uKFwiS2luZGxlXCIpPj0zfHxhLmlzKFwiQW5kcm9pZE9TXCIpJiZhLmlzKFwiTm9va1RhYmxldFwiKXx8YS52ZXJzaW9uKFwiQ2hyb21lXCIpPj0xMSYmIWJ8fGEudmVyc2lvbihcIlNhZmFyaVwiKT49NSYmIWJ8fGEudmVyc2lvbihcIkZpcmVmb3hcIik+PTQmJiFifHxhLnZlcnNpb24oXCJNU0lFXCIpPj03JiYhYnx8YS52ZXJzaW9uKFwiT3BlcmFcIik+PTEwJiYhYj9cIkFcIjphLm9zKFwiaU9TXCIpJiZhLnZlcnNpb24oXCJpUGFkXCIpPDQuM3x8YS5vcyhcImlPU1wiKSYmYS52ZXJzaW9uKFwiaVBob25lXCIpPDMuMXx8YS5vcyhcImlPU1wiKSYmYS52ZXJzaW9uKFwiaVBvZFwiKTwzLjF8fGEuaXMoXCJCbGFja2JlcnJ5XCIpJiZhLnZlcnNpb24oXCJCbGFja0JlcnJ5XCIpPj01JiZhLnZlcnNpb24oXCJCbGFja0JlcnJ5XCIpPDZ8fGEudmVyc2lvbihcIk9wZXJhIE1pbmlcIik+PTUmJmEudmVyc2lvbihcIk9wZXJhIE1pbmlcIik8PTYuNSYmKGEudmVyc2lvbihcIkFuZHJvaWRcIik+PTIuM3x8YS5pcyhcImlPU1wiKSl8fGEubWF0Y2goXCJOb2tpYU44fE5va2lhQzd8Tjk3LipTZXJpZXM2MHxTeW1iaWFuLzNcIil8fGEudmVyc2lvbihcIk9wZXJhIE1vYmlcIik+PTExJiZhLmlzKFwiU3ltYmlhbk9TXCIpP1wiQlwiOihhLnZlcnNpb24oXCJCbGFja0JlcnJ5XCIpPDV8fGEubWF0Y2goXCJNU0lFTW9iaWxlfFdpbmRvd3MgQ0UuKk1vYmlsZVwiKXx8YS52ZXJzaW9uKFwiV2luZG93cyBNb2JpbGVcIik8PTUuMixcIkNcIil9LGYuZGV0ZWN0T1M9ZnVuY3Rpb24oYSl7cmV0dXJuIGYuZmluZE1hdGNoKGYubW9iaWxlRGV0ZWN0UnVsZXMub3NzMCxhKXx8Zi5maW5kTWF0Y2goZi5tb2JpbGVEZXRlY3RSdWxlcy5vc3MsYSl9LGYuZ2V0RGV2aWNlU21hbGxlclNpZGU9ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LnNjcmVlbi53aWR0aDx3aW5kb3cuc2NyZWVuLmhlaWdodD93aW5kb3cuc2NyZWVuLndpZHRoOndpbmRvdy5zY3JlZW4uaGVpZ2h0fSxlLnByb3RvdHlwZT17Y29uc3RydWN0b3I6ZSxtb2JpbGU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUodGhpcy5fY2FjaGUsdGhpcy51YSx0aGlzLm1heFBob25lV2lkdGgpLHRoaXMuX2NhY2hlLm1vYmlsZX0scGhvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUodGhpcy5fY2FjaGUsdGhpcy51YSx0aGlzLm1heFBob25lV2lkdGgpLHRoaXMuX2NhY2hlLnBob25lfSx0YWJsZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZi5wcmVwYXJlRGV0ZWN0aW9uQ2FjaGUodGhpcy5fY2FjaGUsdGhpcy51YSx0aGlzLm1heFBob25lV2lkdGgpLHRoaXMuX2NhY2hlLnRhYmxldH0sdXNlckFnZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NhY2hlLnVzZXJBZ2VudD09PWImJih0aGlzLl9jYWNoZS51c2VyQWdlbnQ9Zi5maW5kTWF0Y2goZi5tb2JpbGVEZXRlY3RSdWxlcy51YXMsdGhpcy51YSkpLHRoaXMuX2NhY2hlLnVzZXJBZ2VudH0sdXNlckFnZW50czpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jYWNoZS51c2VyQWdlbnRzPT09YiYmKHRoaXMuX2NhY2hlLnVzZXJBZ2VudHM9Zi5maW5kTWF0Y2hlcyhmLm1vYmlsZURldGVjdFJ1bGVzLnVhcyx0aGlzLnVhKSksdGhpcy5fY2FjaGUudXNlckFnZW50c30sb3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2FjaGUub3M9PT1iJiYodGhpcy5fY2FjaGUub3M9Zi5kZXRlY3RPUyh0aGlzLnVhKSksdGhpcy5fY2FjaGUub3N9LHZlcnNpb246ZnVuY3Rpb24oYSl7cmV0dXJuIGYuZ2V0VmVyc2lvbihhLHRoaXMudWEpfSx2ZXJzaW9uU3RyOmZ1bmN0aW9uKGEpe3JldHVybiBmLmdldFZlcnNpb25TdHIoYSx0aGlzLnVhKX0saXM6ZnVuY3Rpb24oYil7cmV0dXJuIGModGhpcy51c2VyQWdlbnRzKCksYil8fGEoYix0aGlzLm9zKCkpfHxhKGIsdGhpcy5waG9uZSgpKXx8YShiLHRoaXMudGFibGV0KCkpfHxjKGYuZmluZE1hdGNoZXMoZi5tb2JpbGVEZXRlY3RSdWxlcy51dGlscyx0aGlzLnVhKSxiKX0sbWF0Y2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBSZWdFeHB8fChhPW5ldyBSZWdFeHAoYSxcImlcIikpLGEudGVzdCh0aGlzLnVhKX0saXNQaG9uZVNpemVkOmZ1bmN0aW9uKGEpe3JldHVybiBlLmlzUGhvbmVTaXplZChhfHx0aGlzLm1heFBob25lV2lkdGgpfSxtb2JpbGVHcmFkZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jYWNoZS5ncmFkZT09PWImJih0aGlzLl9jYWNoZS5ncmFkZT1mLm1vYmlsZUdyYWRlKHRoaXMpKSx0aGlzLl9jYWNoZS5ncmFkZX19LFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5zY3JlZW4/ZS5pc1Bob25lU2l6ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGE8MD9iOmYuZ2V0RGV2aWNlU21hbGxlclNpZGUoKTw9YX06ZS5pc1Bob25lU2l6ZWQ9ZnVuY3Rpb24oKXt9LGUuX2ltcGw9ZixlLnZlcnNpb249XCIxLjMuNiAyMDE3LTA0LTA1XCIsZX0pfShmdW5jdGlvbihhKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cylyZXR1cm4gZnVuY3Rpb24oYSl7bW9kdWxlLmV4cG9ydHM9YSgpfTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpcmV0dXJuIGRlZmluZTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXJldHVybiBmdW5jdGlvbihhKXt3aW5kb3cuTW9iaWxlRGV0ZWN0PWEoKX07dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlbnZpcm9ubWVudFwiKX0oKSk7XHJcblxyXG4vKiFcclxuICogQGZpbGVPdmVydmlldyBUb3VjaFN3aXBlIC0galF1ZXJ5IFBsdWdpblxyXG4gKiBAdmVyc2lvbiAxLjYuMThcclxuICpcclxuICogQGF1dGhvciBNYXR0IEJyeXNvbiBodHRwOi8vd3d3LmdpdGh1Yi5jb20vbWF0dGJyeXNvblxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0YnJ5c29uL1RvdWNoU3dpcGUtSnF1ZXJ5LVBsdWdpblxyXG4gKiBAc2VlIGh0dHA6Ly9sYWJzLnJhbXBpbnRlcmFjdGl2ZS5jby51ay90b3VjaFN3aXBlL1xyXG4gKiBAc2VlIGh0dHA6Ly9wbHVnaW5zLmpxdWVyeS5jb20vcHJvamVjdC90b3VjaFN3aXBlXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMC0yMDE1IE1hdHQgQnJ5c29uXHJcbiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxyXG4gKlxyXG4gKi9cclxuIWZ1bmN0aW9uKGZhY3Rvcnkpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lLmFtZC5qUXVlcnk/ZGVmaW5lKFtcImpxdWVyeVwiXSxmYWN0b3J5KTpmYWN0b3J5KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP3JlcXVpcmUoXCJqcXVlcnlcIik6alF1ZXJ5KX0oZnVuY3Rpb24oJCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaW5pdChvcHRpb25zKXtyZXR1cm4hb3B0aW9uc3x8dm9pZCAwIT09b3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGx8fHZvaWQgMD09PW9wdGlvbnMuc3dpcGUmJnZvaWQgMD09PW9wdGlvbnMuc3dpcGVTdGF0dXN8fChvcHRpb25zLmFsbG93UGFnZVNjcm9sbD1OT05FKSx2b2lkIDAhPT1vcHRpb25zLmNsaWNrJiZ2b2lkIDA9PT1vcHRpb25zLnRhcCYmKG9wdGlvbnMudGFwPW9wdGlvbnMuY2xpY2spLG9wdGlvbnN8fChvcHRpb25zPXt9KSxvcHRpb25zPSQuZXh0ZW5kKHt9LCQuZm4uc3dpcGUuZGVmYXVsdHMsb3B0aW9ucyksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyICR0aGlzPSQodGhpcykscGx1Z2luPSR0aGlzLmRhdGEoUExVR0lOX05TKTtwbHVnaW58fChwbHVnaW49bmV3IFRvdWNoU3dpcGUodGhpcyxvcHRpb25zKSwkdGhpcy5kYXRhKFBMVUdJTl9OUyxwbHVnaW4pKX0pfWZ1bmN0aW9uIFRvdWNoU3dpcGUoZWxlbWVudCxvcHRpb25zKXtmdW5jdGlvbiB0b3VjaFN0YXJ0KGpxRXZlbnQpe2lmKCEoZ2V0VG91Y2hJblByb2dyZXNzKCl8fCQoanFFdmVudC50YXJnZXQpLmNsb3Nlc3Qob3B0aW9ucy5leGNsdWRlZEVsZW1lbnRzLCRlbGVtZW50KS5sZW5ndGg+MCkpe3ZhciBldmVudD1qcUV2ZW50Lm9yaWdpbmFsRXZlbnQ/anFFdmVudC5vcmlnaW5hbEV2ZW50OmpxRXZlbnQ7aWYoIWV2ZW50LnBvaW50ZXJUeXBlfHxcIm1vdXNlXCIhPWV2ZW50LnBvaW50ZXJUeXBlfHwwIT1vcHRpb25zLmZhbGxiYWNrVG9Nb3VzZUV2ZW50cyl7dmFyIHJldCx0b3VjaGVzPWV2ZW50LnRvdWNoZXMsZXZ0PXRvdWNoZXM/dG91Y2hlc1swXTpldmVudDtyZXR1cm4gcGhhc2U9UEhBU0VfU1RBUlQsdG91Y2hlcz9maW5nZXJDb3VudD10b3VjaGVzLmxlbmd0aDpvcHRpb25zLnByZXZlbnREZWZhdWx0RXZlbnRzIT09ITEmJmpxRXZlbnQucHJldmVudERlZmF1bHQoKSxkaXN0YW5jZT0wLGRpcmVjdGlvbj1udWxsLGN1cnJlbnREaXJlY3Rpb249bnVsbCxwaW5jaERpcmVjdGlvbj1udWxsLGR1cmF0aW9uPTAsc3RhcnRUb3VjaGVzRGlzdGFuY2U9MCxlbmRUb3VjaGVzRGlzdGFuY2U9MCxwaW5jaFpvb209MSxwaW5jaERpc3RhbmNlPTAsbWF4aW11bXNNYXA9Y3JlYXRlTWF4aW11bXNEYXRhKCksY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCksY3JlYXRlRmluZ2VyRGF0YSgwLGV2dCksIXRvdWNoZXN8fGZpbmdlckNvdW50PT09b3B0aW9ucy5maW5nZXJzfHxvcHRpb25zLmZpbmdlcnM9PT1BTExfRklOR0VSU3x8aGFzUGluY2hlcygpPyhzdGFydFRpbWU9Z2V0VGltZVN0YW1wKCksMj09ZmluZ2VyQ291bnQmJihjcmVhdGVGaW5nZXJEYXRhKDEsdG91Y2hlc1sxXSksc3RhcnRUb3VjaGVzRGlzdGFuY2U9ZW5kVG91Y2hlc0Rpc3RhbmNlPWNhbGN1bGF0ZVRvdWNoZXNEaXN0YW5jZShmaW5nZXJEYXRhWzBdLnN0YXJ0LGZpbmdlckRhdGFbMV0uc3RhcnQpKSwob3B0aW9ucy5zd2lwZVN0YXR1c3x8b3B0aW9ucy5waW5jaFN0YXR1cykmJihyZXQ9dHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpKSk6cmV0PSExLHJldD09PSExPyhwaGFzZT1QSEFTRV9DQU5DRUwsdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpLHJldCk6KG9wdGlvbnMuaG9sZCYmKGhvbGRUaW1lb3V0PXNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpeyRlbGVtZW50LnRyaWdnZXIoXCJob2xkXCIsW2V2ZW50LnRhcmdldF0pLG9wdGlvbnMuaG9sZCYmKHJldD1vcHRpb25zLmhvbGQuY2FsbCgkZWxlbWVudCxldmVudCxldmVudC50YXJnZXQpKX0sdGhpcyksb3B0aW9ucy5sb25nVGFwVGhyZXNob2xkKSksc2V0VG91Y2hJblByb2dyZXNzKCEwKSxudWxsKX19fWZ1bmN0aW9uIHRvdWNoTW92ZShqcUV2ZW50KXt2YXIgZXZlbnQ9anFFdmVudC5vcmlnaW5hbEV2ZW50P2pxRXZlbnQub3JpZ2luYWxFdmVudDpqcUV2ZW50O2lmKHBoYXNlIT09UEhBU0VfRU5EJiZwaGFzZSE9PVBIQVNFX0NBTkNFTCYmIWluTXVsdGlGaW5nZXJSZWxlYXNlKCkpe3ZhciByZXQsdG91Y2hlcz1ldmVudC50b3VjaGVzLGV2dD10b3VjaGVzP3RvdWNoZXNbMF06ZXZlbnQsY3VycmVudEZpbmdlcj11cGRhdGVGaW5nZXJEYXRhKGV2dCk7aWYoZW5kVGltZT1nZXRUaW1lU3RhbXAoKSx0b3VjaGVzJiYoZmluZ2VyQ291bnQ9dG91Y2hlcy5sZW5ndGgpLG9wdGlvbnMuaG9sZCYmY2xlYXJUaW1lb3V0KGhvbGRUaW1lb3V0KSxwaGFzZT1QSEFTRV9NT1ZFLDI9PWZpbmdlckNvdW50JiYoMD09c3RhcnRUb3VjaGVzRGlzdGFuY2U/KGNyZWF0ZUZpbmdlckRhdGEoMSx0b3VjaGVzWzFdKSxzdGFydFRvdWNoZXNEaXN0YW5jZT1lbmRUb3VjaGVzRGlzdGFuY2U9Y2FsY3VsYXRlVG91Y2hlc0Rpc3RhbmNlKGZpbmdlckRhdGFbMF0uc3RhcnQsZmluZ2VyRGF0YVsxXS5zdGFydCkpOih1cGRhdGVGaW5nZXJEYXRhKHRvdWNoZXNbMV0pLGVuZFRvdWNoZXNEaXN0YW5jZT1jYWxjdWxhdGVUb3VjaGVzRGlzdGFuY2UoZmluZ2VyRGF0YVswXS5lbmQsZmluZ2VyRGF0YVsxXS5lbmQpLHBpbmNoRGlyZWN0aW9uPWNhbGN1bGF0ZVBpbmNoRGlyZWN0aW9uKGZpbmdlckRhdGFbMF0uZW5kLGZpbmdlckRhdGFbMV0uZW5kKSkscGluY2hab29tPWNhbGN1bGF0ZVBpbmNoWm9vbShzdGFydFRvdWNoZXNEaXN0YW5jZSxlbmRUb3VjaGVzRGlzdGFuY2UpLHBpbmNoRGlzdGFuY2U9TWF0aC5hYnMoc3RhcnRUb3VjaGVzRGlzdGFuY2UtZW5kVG91Y2hlc0Rpc3RhbmNlKSksZmluZ2VyQ291bnQ9PT1vcHRpb25zLmZpbmdlcnN8fG9wdGlvbnMuZmluZ2Vycz09PUFMTF9GSU5HRVJTfHwhdG91Y2hlc3x8aGFzUGluY2hlcygpKXtpZihkaXJlY3Rpb249Y2FsY3VsYXRlRGlyZWN0aW9uKGN1cnJlbnRGaW5nZXIuc3RhcnQsY3VycmVudEZpbmdlci5lbmQpLGN1cnJlbnREaXJlY3Rpb249Y2FsY3VsYXRlRGlyZWN0aW9uKGN1cnJlbnRGaW5nZXIubGFzdCxjdXJyZW50RmluZ2VyLmVuZCksdmFsaWRhdGVEZWZhdWx0RXZlbnQoanFFdmVudCxjdXJyZW50RGlyZWN0aW9uKSxkaXN0YW5jZT1jYWxjdWxhdGVEaXN0YW5jZShjdXJyZW50RmluZ2VyLnN0YXJ0LGN1cnJlbnRGaW5nZXIuZW5kKSxkdXJhdGlvbj1jYWxjdWxhdGVEdXJhdGlvbigpLHNldE1heERpc3RhbmNlKGRpcmVjdGlvbixkaXN0YW5jZSkscmV0PXRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKSwhb3B0aW9ucy50cmlnZ2VyT25Ub3VjaEVuZHx8b3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKXt2YXIgaW5Cb3VuZHM9ITA7aWYob3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlKXt2YXIgYm91bmRzPWdldGJvdW5kcyh0aGlzKTtpbkJvdW5kcz1pc0luQm91bmRzKGN1cnJlbnRGaW5nZXIuZW5kLGJvdW5kcyl9IW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQmJmluQm91bmRzP3BoYXNlPWdldE5leHRQaGFzZShQSEFTRV9NT1ZFKTpvcHRpb25zLnRyaWdnZXJPblRvdWNoTGVhdmUmJiFpbkJvdW5kcyYmKHBoYXNlPWdldE5leHRQaGFzZShQSEFTRV9FTkQpKSxwaGFzZSE9UEhBU0VfQ0FOQ0VMJiZwaGFzZSE9UEhBU0VfRU5EfHx0cmlnZ2VySGFuZGxlcihldmVudCxwaGFzZSl9fWVsc2UgcGhhc2U9UEhBU0VfQ0FOQ0VMLHRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKTtyZXQ9PT0hMSYmKHBoYXNlPVBIQVNFX0NBTkNFTCx0cmlnZ2VySGFuZGxlcihldmVudCxwaGFzZSkpfX1mdW5jdGlvbiB0b3VjaEVuZChqcUV2ZW50KXt2YXIgZXZlbnQ9anFFdmVudC5vcmlnaW5hbEV2ZW50P2pxRXZlbnQub3JpZ2luYWxFdmVudDpqcUV2ZW50LHRvdWNoZXM9ZXZlbnQudG91Y2hlcztpZih0b3VjaGVzKXtpZih0b3VjaGVzLmxlbmd0aCYmIWluTXVsdGlGaW5nZXJSZWxlYXNlKCkpcmV0dXJuIHN0YXJ0TXVsdGlGaW5nZXJSZWxlYXNlKGV2ZW50KSwhMDtpZih0b3VjaGVzLmxlbmd0aCYmaW5NdWx0aUZpbmdlclJlbGVhc2UoKSlyZXR1cm4hMH1yZXR1cm4gaW5NdWx0aUZpbmdlclJlbGVhc2UoKSYmKGZpbmdlckNvdW50PWZpbmdlckNvdW50QXRSZWxlYXNlKSxlbmRUaW1lPWdldFRpbWVTdGFtcCgpLGR1cmF0aW9uPWNhbGN1bGF0ZUR1cmF0aW9uKCksZGlkU3dpcGVCYWNrVG9DYW5jZWwoKXx8IXZhbGlkYXRlU3dpcGVEaXN0YW5jZSgpPyhwaGFzZT1QSEFTRV9DQU5DRUwsdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpKTpvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kfHxvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kPT09ITEmJnBoYXNlPT09UEhBU0VfTU9WRT8ob3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV2ZW50cyE9PSExJiZqcUV2ZW50LnByZXZlbnREZWZhdWx0KCkscGhhc2U9UEhBU0VfRU5ELHRyaWdnZXJIYW5kbGVyKGV2ZW50LHBoYXNlKSk6IW9wdGlvbnMudHJpZ2dlck9uVG91Y2hFbmQmJmhhc1RhcCgpPyhwaGFzZT1QSEFTRV9FTkQsdHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LHBoYXNlLFRBUCkpOnBoYXNlPT09UEhBU0VfTU9WRSYmKHBoYXNlPVBIQVNFX0NBTkNFTCx0cmlnZ2VySGFuZGxlcihldmVudCxwaGFzZSkpLHNldFRvdWNoSW5Qcm9ncmVzcyghMSksbnVsbH1mdW5jdGlvbiB0b3VjaENhbmNlbCgpe2ZpbmdlckNvdW50PTAsZW5kVGltZT0wLHN0YXJ0VGltZT0wLHN0YXJ0VG91Y2hlc0Rpc3RhbmNlPTAsZW5kVG91Y2hlc0Rpc3RhbmNlPTAscGluY2hab29tPTEsY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCksc2V0VG91Y2hJblByb2dyZXNzKCExKX1mdW5jdGlvbiB0b3VjaExlYXZlKGpxRXZlbnQpe3ZhciBldmVudD1qcUV2ZW50Lm9yaWdpbmFsRXZlbnQ/anFFdmVudC5vcmlnaW5hbEV2ZW50OmpxRXZlbnQ7b3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlJiYocGhhc2U9Z2V0TmV4dFBoYXNlKFBIQVNFX0VORCksdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2UpKX1mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKXskZWxlbWVudC51bmJpbmQoU1RBUlRfRVYsdG91Y2hTdGFydCksJGVsZW1lbnQudW5iaW5kKENBTkNFTF9FVix0b3VjaENhbmNlbCksJGVsZW1lbnQudW5iaW5kKE1PVkVfRVYsdG91Y2hNb3ZlKSwkZWxlbWVudC51bmJpbmQoRU5EX0VWLHRvdWNoRW5kKSxMRUFWRV9FViYmJGVsZW1lbnQudW5iaW5kKExFQVZFX0VWLHRvdWNoTGVhdmUpLHNldFRvdWNoSW5Qcm9ncmVzcyghMSl9ZnVuY3Rpb24gZ2V0TmV4dFBoYXNlKGN1cnJlbnRQaGFzZSl7dmFyIG5leHRQaGFzZT1jdXJyZW50UGhhc2UsdmFsaWRUaW1lPXZhbGlkYXRlU3dpcGVUaW1lKCksdmFsaWREaXN0YW5jZT12YWxpZGF0ZVN3aXBlRGlzdGFuY2UoKSxkaWRDYW5jZWw9ZGlkU3dpcGVCYWNrVG9DYW5jZWwoKTtyZXR1cm4hdmFsaWRUaW1lfHxkaWRDYW5jZWw/bmV4dFBoYXNlPVBIQVNFX0NBTkNFTDohdmFsaWREaXN0YW5jZXx8Y3VycmVudFBoYXNlIT1QSEFTRV9NT1ZFfHxvcHRpb25zLnRyaWdnZXJPblRvdWNoRW5kJiYhb3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlPyF2YWxpZERpc3RhbmNlJiZjdXJyZW50UGhhc2U9PVBIQVNFX0VORCYmb3B0aW9ucy50cmlnZ2VyT25Ub3VjaExlYXZlJiYobmV4dFBoYXNlPVBIQVNFX0NBTkNFTCk6bmV4dFBoYXNlPVBIQVNFX0VORCxuZXh0UGhhc2V9ZnVuY3Rpb24gdHJpZ2dlckhhbmRsZXIoZXZlbnQscGhhc2Upe3ZhciByZXQsdG91Y2hlcz1ldmVudC50b3VjaGVzO3JldHVybihkaWRTd2lwZSgpfHxoYXNTd2lwZXMoKSkmJihyZXQ9dHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LHBoYXNlLFNXSVBFKSksKGRpZFBpbmNoKCl8fGhhc1BpbmNoZXMoKSkmJnJldCE9PSExJiYocmV0PXRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxQSU5DSCkpLGRpZERvdWJsZVRhcCgpJiZyZXQhPT0hMT9yZXQ9dHJpZ2dlckhhbmRsZXJGb3JHZXN0dXJlKGV2ZW50LHBoYXNlLERPVUJMRV9UQVApOmRpZExvbmdUYXAoKSYmcmV0IT09ITE/cmV0PXRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxMT05HX1RBUCk6ZGlkVGFwKCkmJnJldCE9PSExJiYocmV0PXRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxUQVApKSxwaGFzZT09PVBIQVNFX0NBTkNFTCYmdG91Y2hDYW5jZWwoZXZlbnQpLHBoYXNlPT09UEhBU0VfRU5EJiYodG91Y2hlcz90b3VjaGVzLmxlbmd0aHx8dG91Y2hDYW5jZWwoZXZlbnQpOnRvdWNoQ2FuY2VsKGV2ZW50KSkscmV0fWZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVyRm9yR2VzdHVyZShldmVudCxwaGFzZSxnZXN0dXJlKXt2YXIgcmV0O2lmKGdlc3R1cmU9PVNXSVBFKXtpZigkZWxlbWVudC50cmlnZ2VyKFwic3dpcGVTdGF0dXNcIixbcGhhc2UsZGlyZWN0aW9ufHxudWxsLGRpc3RhbmNlfHwwLGR1cmF0aW9ufHwwLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbl0pLG9wdGlvbnMuc3dpcGVTdGF0dXMmJihyZXQ9b3B0aW9ucy5zd2lwZVN0YXR1cy5jYWxsKCRlbGVtZW50LGV2ZW50LHBoYXNlLGRpcmVjdGlvbnx8bnVsbCxkaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb24pLHJldD09PSExKSlyZXR1cm4hMTtpZihwaGFzZT09UEhBU0VfRU5EJiZ2YWxpZGF0ZVN3aXBlKCkpe2lmKGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KSxjbGVhclRpbWVvdXQoaG9sZFRpbWVvdXQpLCRlbGVtZW50LnRyaWdnZXIoXCJzd2lwZVwiLFtkaXJlY3Rpb24sZGlzdGFuY2UsZHVyYXRpb24sZmluZ2VyQ291bnQsZmluZ2VyRGF0YSxjdXJyZW50RGlyZWN0aW9uXSksb3B0aW9ucy5zd2lwZSYmKHJldD1vcHRpb25zLnN3aXBlLmNhbGwoJGVsZW1lbnQsZXZlbnQsZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbikscmV0PT09ITEpKXJldHVybiExO3N3aXRjaChkaXJlY3Rpb24pe2Nhc2UgTEVGVDokZWxlbWVudC50cmlnZ2VyKFwic3dpcGVMZWZ0XCIsW2RpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb25dKSxvcHRpb25zLnN3aXBlTGVmdCYmKHJldD1vcHRpb25zLnN3aXBlTGVmdC5jYWxsKCRlbGVtZW50LGV2ZW50LGRpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb24pKTticmVhaztjYXNlIFJJR0hUOiRlbGVtZW50LnRyaWdnZXIoXCJzd2lwZVJpZ2h0XCIsW2RpcmVjdGlvbixkaXN0YW5jZSxkdXJhdGlvbixmaW5nZXJDb3VudCxmaW5nZXJEYXRhLGN1cnJlbnREaXJlY3Rpb25dKSxvcHRpb25zLnN3aXBlUmlnaHQmJihyZXQ9b3B0aW9ucy5zd2lwZVJpZ2h0LmNhbGwoJGVsZW1lbnQsZXZlbnQsZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbikpO2JyZWFrO2Nhc2UgVVA6JGVsZW1lbnQudHJpZ2dlcihcInN3aXBlVXBcIixbZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbl0pLG9wdGlvbnMuc3dpcGVVcCYmKHJldD1vcHRpb25zLnN3aXBlVXAuY2FsbCgkZWxlbWVudCxldmVudCxkaXJlY3Rpb24sZGlzdGFuY2UsZHVyYXRpb24sZmluZ2VyQ291bnQsZmluZ2VyRGF0YSxjdXJyZW50RGlyZWN0aW9uKSk7YnJlYWs7Y2FzZSBET1dOOiRlbGVtZW50LnRyaWdnZXIoXCJzd2lwZURvd25cIixbZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbl0pLG9wdGlvbnMuc3dpcGVEb3duJiYocmV0PW9wdGlvbnMuc3dpcGVEb3duLmNhbGwoJGVsZW1lbnQsZXZlbnQsZGlyZWN0aW9uLGRpc3RhbmNlLGR1cmF0aW9uLGZpbmdlckNvdW50LGZpbmdlckRhdGEsY3VycmVudERpcmVjdGlvbikpfX19aWYoZ2VzdHVyZT09UElOQ0gpe2lmKCRlbGVtZW50LnRyaWdnZXIoXCJwaW5jaFN0YXR1c1wiLFtwaGFzZSxwaW5jaERpcmVjdGlvbnx8bnVsbCxwaW5jaERpc3RhbmNlfHwwLGR1cmF0aW9ufHwwLGZpbmdlckNvdW50LHBpbmNoWm9vbSxmaW5nZXJEYXRhXSksb3B0aW9ucy5waW5jaFN0YXR1cyYmKHJldD1vcHRpb25zLnBpbmNoU3RhdHVzLmNhbGwoJGVsZW1lbnQsZXZlbnQscGhhc2UscGluY2hEaXJlY3Rpb258fG51bGwscGluY2hEaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxwaW5jaFpvb20sZmluZ2VyRGF0YSkscmV0PT09ITEpKXJldHVybiExO2lmKHBoYXNlPT1QSEFTRV9FTkQmJnZhbGlkYXRlUGluY2goKSlzd2l0Y2gocGluY2hEaXJlY3Rpb24pe2Nhc2UgSU46JGVsZW1lbnQudHJpZ2dlcihcInBpbmNoSW5cIixbcGluY2hEaXJlY3Rpb258fG51bGwscGluY2hEaXN0YW5jZXx8MCxkdXJhdGlvbnx8MCxmaW5nZXJDb3VudCxwaW5jaFpvb20sZmluZ2VyRGF0YV0pLG9wdGlvbnMucGluY2hJbiYmKHJldD1vcHRpb25zLnBpbmNoSW4uY2FsbCgkZWxlbWVudCxldmVudCxwaW5jaERpcmVjdGlvbnx8bnVsbCxwaW5jaERpc3RhbmNlfHwwLGR1cmF0aW9ufHwwLGZpbmdlckNvdW50LHBpbmNoWm9vbSxmaW5nZXJEYXRhKSk7YnJlYWs7Y2FzZSBPVVQ6JGVsZW1lbnQudHJpZ2dlcihcInBpbmNoT3V0XCIsW3BpbmNoRGlyZWN0aW9ufHxudWxsLHBpbmNoRGlzdGFuY2V8fDAsZHVyYXRpb258fDAsZmluZ2VyQ291bnQscGluY2hab29tLGZpbmdlckRhdGFdKSxvcHRpb25zLnBpbmNoT3V0JiYocmV0PW9wdGlvbnMucGluY2hPdXQuY2FsbCgkZWxlbWVudCxldmVudCxwaW5jaERpcmVjdGlvbnx8bnVsbCxwaW5jaERpc3RhbmNlfHwwLGR1cmF0aW9ufHwwLGZpbmdlckNvdW50LHBpbmNoWm9vbSxmaW5nZXJEYXRhKSl9fXJldHVybiBnZXN0dXJlPT1UQVA/cGhhc2UhPT1QSEFTRV9DQU5DRUwmJnBoYXNlIT09UEhBU0VfRU5EfHwoY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpLGNsZWFyVGltZW91dChob2xkVGltZW91dCksaGFzRG91YmxlVGFwKCkmJiFpbkRvdWJsZVRhcCgpPyhkb3VibGVUYXBTdGFydFRpbWU9Z2V0VGltZVN0YW1wKCksc2luZ2xlVGFwVGltZW91dD1zZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKXtkb3VibGVUYXBTdGFydFRpbWU9bnVsbCwkZWxlbWVudC50cmlnZ2VyKFwidGFwXCIsW2V2ZW50LnRhcmdldF0pLG9wdGlvbnMudGFwJiYocmV0PW9wdGlvbnMudGFwLmNhbGwoJGVsZW1lbnQsZXZlbnQsZXZlbnQudGFyZ2V0KSl9LHRoaXMpLG9wdGlvbnMuZG91YmxlVGFwVGhyZXNob2xkKSk6KGRvdWJsZVRhcFN0YXJ0VGltZT1udWxsLCRlbGVtZW50LnRyaWdnZXIoXCJ0YXBcIixbZXZlbnQudGFyZ2V0XSksb3B0aW9ucy50YXAmJihyZXQ9b3B0aW9ucy50YXAuY2FsbCgkZWxlbWVudCxldmVudCxldmVudC50YXJnZXQpKSkpOmdlc3R1cmU9PURPVUJMRV9UQVA/cGhhc2UhPT1QSEFTRV9DQU5DRUwmJnBoYXNlIT09UEhBU0VfRU5EfHwoY2xlYXJUaW1lb3V0KHNpbmdsZVRhcFRpbWVvdXQpLGNsZWFyVGltZW91dChob2xkVGltZW91dCksZG91YmxlVGFwU3RhcnRUaW1lPW51bGwsJGVsZW1lbnQudHJpZ2dlcihcImRvdWJsZXRhcFwiLFtldmVudC50YXJnZXRdKSxvcHRpb25zLmRvdWJsZVRhcCYmKHJldD1vcHRpb25zLmRvdWJsZVRhcC5jYWxsKCRlbGVtZW50LGV2ZW50LGV2ZW50LnRhcmdldCkpKTpnZXN0dXJlPT1MT05HX1RBUCYmKHBoYXNlIT09UEhBU0VfQ0FOQ0VMJiZwaGFzZSE9PVBIQVNFX0VORHx8KGNsZWFyVGltZW91dChzaW5nbGVUYXBUaW1lb3V0KSxkb3VibGVUYXBTdGFydFRpbWU9bnVsbCwkZWxlbWVudC50cmlnZ2VyKFwibG9uZ3RhcFwiLFtldmVudC50YXJnZXRdKSxvcHRpb25zLmxvbmdUYXAmJihyZXQ9b3B0aW9ucy5sb25nVGFwLmNhbGwoJGVsZW1lbnQsZXZlbnQsZXZlbnQudGFyZ2V0KSkpKSxyZXR9ZnVuY3Rpb24gdmFsaWRhdGVTd2lwZURpc3RhbmNlKCl7dmFyIHZhbGlkPSEwO3JldHVybiBudWxsIT09b3B0aW9ucy50aHJlc2hvbGQmJih2YWxpZD1kaXN0YW5jZT49b3B0aW9ucy50aHJlc2hvbGQpLHZhbGlkfWZ1bmN0aW9uIGRpZFN3aXBlQmFja1RvQ2FuY2VsKCl7dmFyIGNhbmNlbGxlZD0hMTtyZXR1cm4gbnVsbCE9PW9wdGlvbnMuY2FuY2VsVGhyZXNob2xkJiZudWxsIT09ZGlyZWN0aW9uJiYoY2FuY2VsbGVkPWdldE1heERpc3RhbmNlKGRpcmVjdGlvbiktZGlzdGFuY2U+PW9wdGlvbnMuY2FuY2VsVGhyZXNob2xkKSxjYW5jZWxsZWR9ZnVuY3Rpb24gdmFsaWRhdGVQaW5jaERpc3RhbmNlKCl7cmV0dXJuIG51bGwhPT1vcHRpb25zLnBpbmNoVGhyZXNob2xkP3BpbmNoRGlzdGFuY2U+PW9wdGlvbnMucGluY2hUaHJlc2hvbGQ6ITB9ZnVuY3Rpb24gdmFsaWRhdGVTd2lwZVRpbWUoKXt2YXIgcmVzdWx0O3JldHVybiByZXN1bHQ9b3B0aW9ucy5tYXhUaW1lVGhyZXNob2xkPyEoZHVyYXRpb24+PW9wdGlvbnMubWF4VGltZVRocmVzaG9sZCk6ITB9ZnVuY3Rpb24gdmFsaWRhdGVEZWZhdWx0RXZlbnQoanFFdmVudCxkaXJlY3Rpb24pe2lmKG9wdGlvbnMucHJldmVudERlZmF1bHRFdmVudHMhPT0hMSlpZihvcHRpb25zLmFsbG93UGFnZVNjcm9sbD09PU5PTkUpanFFdmVudC5wcmV2ZW50RGVmYXVsdCgpO2Vsc2V7dmFyIGF1dG89b3B0aW9ucy5hbGxvd1BhZ2VTY3JvbGw9PT1BVVRPO3N3aXRjaChkaXJlY3Rpb24pe2Nhc2UgTEVGVDoob3B0aW9ucy5zd2lwZUxlZnQmJmF1dG98fCFhdXRvJiZvcHRpb25zLmFsbG93UGFnZVNjcm9sbCE9SE9SSVpPTlRBTCkmJmpxRXZlbnQucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlIFJJR0hUOihvcHRpb25zLnN3aXBlUmlnaHQmJmF1dG98fCFhdXRvJiZvcHRpb25zLmFsbG93UGFnZVNjcm9sbCE9SE9SSVpPTlRBTCkmJmpxRXZlbnQucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlIFVQOihvcHRpb25zLnN3aXBlVXAmJmF1dG98fCFhdXRvJiZvcHRpb25zLmFsbG93UGFnZVNjcm9sbCE9VkVSVElDQUwpJiZqcUV2ZW50LnByZXZlbnREZWZhdWx0KCk7YnJlYWs7Y2FzZSBET1dOOihvcHRpb25zLnN3aXBlRG93biYmYXV0b3x8IWF1dG8mJm9wdGlvbnMuYWxsb3dQYWdlU2Nyb2xsIT1WRVJUSUNBTCkmJmpxRXZlbnQucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlIE5PTkU6fX19ZnVuY3Rpb24gdmFsaWRhdGVQaW5jaCgpe3ZhciBoYXNDb3JyZWN0RmluZ2VyQ291bnQ9dmFsaWRhdGVGaW5nZXJzKCksaGFzRW5kUG9pbnQ9dmFsaWRhdGVFbmRQb2ludCgpLGhhc0NvcnJlY3REaXN0YW5jZT12YWxpZGF0ZVBpbmNoRGlzdGFuY2UoKTtyZXR1cm4gaGFzQ29ycmVjdEZpbmdlckNvdW50JiZoYXNFbmRQb2ludCYmaGFzQ29ycmVjdERpc3RhbmNlfWZ1bmN0aW9uIGhhc1BpbmNoZXMoKXtyZXR1cm4hIShvcHRpb25zLnBpbmNoU3RhdHVzfHxvcHRpb25zLnBpbmNoSW58fG9wdGlvbnMucGluY2hPdXQpfWZ1bmN0aW9uIGRpZFBpbmNoKCl7cmV0dXJuISghdmFsaWRhdGVQaW5jaCgpfHwhaGFzUGluY2hlcygpKX1mdW5jdGlvbiB2YWxpZGF0ZVN3aXBlKCl7dmFyIGhhc1ZhbGlkVGltZT12YWxpZGF0ZVN3aXBlVGltZSgpLGhhc1ZhbGlkRGlzdGFuY2U9dmFsaWRhdGVTd2lwZURpc3RhbmNlKCksaGFzQ29ycmVjdEZpbmdlckNvdW50PXZhbGlkYXRlRmluZ2VycygpLGhhc0VuZFBvaW50PXZhbGlkYXRlRW5kUG9pbnQoKSxkaWRDYW5jZWw9ZGlkU3dpcGVCYWNrVG9DYW5jZWwoKSx2YWxpZD0hZGlkQ2FuY2VsJiZoYXNFbmRQb2ludCYmaGFzQ29ycmVjdEZpbmdlckNvdW50JiZoYXNWYWxpZERpc3RhbmNlJiZoYXNWYWxpZFRpbWU7cmV0dXJuIHZhbGlkfWZ1bmN0aW9uIGhhc1N3aXBlcygpe3JldHVybiEhKG9wdGlvbnMuc3dpcGV8fG9wdGlvbnMuc3dpcGVTdGF0dXN8fG9wdGlvbnMuc3dpcGVMZWZ0fHxvcHRpb25zLnN3aXBlUmlnaHR8fG9wdGlvbnMuc3dpcGVVcHx8b3B0aW9ucy5zd2lwZURvd24pfWZ1bmN0aW9uIGRpZFN3aXBlKCl7cmV0dXJuISghdmFsaWRhdGVTd2lwZSgpfHwhaGFzU3dpcGVzKCkpfWZ1bmN0aW9uIHZhbGlkYXRlRmluZ2Vycygpe3JldHVybiBmaW5nZXJDb3VudD09PW9wdGlvbnMuZmluZ2Vyc3x8b3B0aW9ucy5maW5nZXJzPT09QUxMX0ZJTkdFUlN8fCFTVVBQT1JUU19UT1VDSH1mdW5jdGlvbiB2YWxpZGF0ZUVuZFBvaW50KCl7cmV0dXJuIDAhPT1maW5nZXJEYXRhWzBdLmVuZC54fWZ1bmN0aW9uIGhhc1RhcCgpe3JldHVybiEhb3B0aW9ucy50YXB9ZnVuY3Rpb24gaGFzRG91YmxlVGFwKCl7cmV0dXJuISFvcHRpb25zLmRvdWJsZVRhcH1mdW5jdGlvbiBoYXNMb25nVGFwKCl7cmV0dXJuISFvcHRpb25zLmxvbmdUYXB9ZnVuY3Rpb24gdmFsaWRhdGVEb3VibGVUYXAoKXtpZihudWxsPT1kb3VibGVUYXBTdGFydFRpbWUpcmV0dXJuITE7dmFyIG5vdz1nZXRUaW1lU3RhbXAoKTtyZXR1cm4gaGFzRG91YmxlVGFwKCkmJm5vdy1kb3VibGVUYXBTdGFydFRpbWU8PW9wdGlvbnMuZG91YmxlVGFwVGhyZXNob2xkfWZ1bmN0aW9uIGluRG91YmxlVGFwKCl7cmV0dXJuIHZhbGlkYXRlRG91YmxlVGFwKCl9ZnVuY3Rpb24gdmFsaWRhdGVUYXAoKXtyZXR1cm4oMT09PWZpbmdlckNvdW50fHwhU1VQUE9SVFNfVE9VQ0gpJiYoaXNOYU4oZGlzdGFuY2UpfHxkaXN0YW5jZTxvcHRpb25zLnRocmVzaG9sZCl9ZnVuY3Rpb24gdmFsaWRhdGVMb25nVGFwKCl7cmV0dXJuIGR1cmF0aW9uPm9wdGlvbnMubG9uZ1RhcFRocmVzaG9sZCYmRE9VQkxFX1RBUF9USFJFU0hPTEQ+ZGlzdGFuY2V9ZnVuY3Rpb24gZGlkVGFwKCl7cmV0dXJuISghdmFsaWRhdGVUYXAoKXx8IWhhc1RhcCgpKX1mdW5jdGlvbiBkaWREb3VibGVUYXAoKXtyZXR1cm4hKCF2YWxpZGF0ZURvdWJsZVRhcCgpfHwhaGFzRG91YmxlVGFwKCkpfWZ1bmN0aW9uIGRpZExvbmdUYXAoKXtyZXR1cm4hKCF2YWxpZGF0ZUxvbmdUYXAoKXx8IWhhc0xvbmdUYXAoKSl9ZnVuY3Rpb24gc3RhcnRNdWx0aUZpbmdlclJlbGVhc2UoZXZlbnQpe3ByZXZpb3VzVG91Y2hFbmRUaW1lPWdldFRpbWVTdGFtcCgpLGZpbmdlckNvdW50QXRSZWxlYXNlPWV2ZW50LnRvdWNoZXMubGVuZ3RoKzF9ZnVuY3Rpb24gY2FuY2VsTXVsdGlGaW5nZXJSZWxlYXNlKCl7cHJldmlvdXNUb3VjaEVuZFRpbWU9MCxmaW5nZXJDb3VudEF0UmVsZWFzZT0wfWZ1bmN0aW9uIGluTXVsdGlGaW5nZXJSZWxlYXNlKCl7dmFyIHdpdGhpblRocmVzaG9sZD0hMTtpZihwcmV2aW91c1RvdWNoRW5kVGltZSl7dmFyIGRpZmY9Z2V0VGltZVN0YW1wKCktcHJldmlvdXNUb3VjaEVuZFRpbWU7ZGlmZjw9b3B0aW9ucy5maW5nZXJSZWxlYXNlVGhyZXNob2xkJiYod2l0aGluVGhyZXNob2xkPSEwKX1yZXR1cm4gd2l0aGluVGhyZXNob2xkfWZ1bmN0aW9uIGdldFRvdWNoSW5Qcm9ncmVzcygpe3JldHVybiEoJGVsZW1lbnQuZGF0YShQTFVHSU5fTlMrXCJfaW50b3VjaFwiKSE9PSEwKX1mdW5jdGlvbiBzZXRUb3VjaEluUHJvZ3Jlc3ModmFsKXskZWxlbWVudCYmKHZhbD09PSEwPygkZWxlbWVudC5iaW5kKE1PVkVfRVYsdG91Y2hNb3ZlKSwkZWxlbWVudC5iaW5kKEVORF9FVix0b3VjaEVuZCksTEVBVkVfRVYmJiRlbGVtZW50LmJpbmQoTEVBVkVfRVYsdG91Y2hMZWF2ZSkpOigkZWxlbWVudC51bmJpbmQoTU9WRV9FVix0b3VjaE1vdmUsITEpLCRlbGVtZW50LnVuYmluZChFTkRfRVYsdG91Y2hFbmQsITEpLExFQVZFX0VWJiYkZWxlbWVudC51bmJpbmQoTEVBVkVfRVYsdG91Y2hMZWF2ZSwhMSkpLCRlbGVtZW50LmRhdGEoUExVR0lOX05TK1wiX2ludG91Y2hcIix2YWw9PT0hMCkpfWZ1bmN0aW9uIGNyZWF0ZUZpbmdlckRhdGEoaWQsZXZ0KXt2YXIgZj17c3RhcnQ6e3g6MCx5OjB9LGxhc3Q6e3g6MCx5OjB9LGVuZDp7eDowLHk6MH19O3JldHVybiBmLnN0YXJ0Lng9Zi5sYXN0Lng9Zi5lbmQueD1ldnQucGFnZVh8fGV2dC5jbGllbnRYLGYuc3RhcnQueT1mLmxhc3QueT1mLmVuZC55PWV2dC5wYWdlWXx8ZXZ0LmNsaWVudFksZmluZ2VyRGF0YVtpZF09ZixmfWZ1bmN0aW9uIHVwZGF0ZUZpbmdlckRhdGEoZXZ0KXt2YXIgaWQ9dm9pZCAwIT09ZXZ0LmlkZW50aWZpZXI/ZXZ0LmlkZW50aWZpZXI6MCxmPWdldEZpbmdlckRhdGEoaWQpO3JldHVybiBudWxsPT09ZiYmKGY9Y3JlYXRlRmluZ2VyRGF0YShpZCxldnQpKSxmLmxhc3QueD1mLmVuZC54LGYubGFzdC55PWYuZW5kLnksZi5lbmQueD1ldnQucGFnZVh8fGV2dC5jbGllbnRYLGYuZW5kLnk9ZXZ0LnBhZ2VZfHxldnQuY2xpZW50WSxmfWZ1bmN0aW9uIGdldEZpbmdlckRhdGEoaWQpe3JldHVybiBmaW5nZXJEYXRhW2lkXXx8bnVsbH1mdW5jdGlvbiBzZXRNYXhEaXN0YW5jZShkaXJlY3Rpb24sZGlzdGFuY2Upe2RpcmVjdGlvbiE9Tk9ORSYmKGRpc3RhbmNlPU1hdGgubWF4KGRpc3RhbmNlLGdldE1heERpc3RhbmNlKGRpcmVjdGlvbikpLG1heGltdW1zTWFwW2RpcmVjdGlvbl0uZGlzdGFuY2U9ZGlzdGFuY2UpfWZ1bmN0aW9uIGdldE1heERpc3RhbmNlKGRpcmVjdGlvbil7cmV0dXJuIG1heGltdW1zTWFwW2RpcmVjdGlvbl0/bWF4aW11bXNNYXBbZGlyZWN0aW9uXS5kaXN0YW5jZTp2b2lkIDB9ZnVuY3Rpb24gY3JlYXRlTWF4aW11bXNEYXRhKCl7dmFyIG1heERhdGE9e307cmV0dXJuIG1heERhdGFbTEVGVF09Y3JlYXRlTWF4aW11bVZPKExFRlQpLG1heERhdGFbUklHSFRdPWNyZWF0ZU1heGltdW1WTyhSSUdIVCksbWF4RGF0YVtVUF09Y3JlYXRlTWF4aW11bVZPKFVQKSxtYXhEYXRhW0RPV05dPWNyZWF0ZU1heGltdW1WTyhET1dOKSxtYXhEYXRhfWZ1bmN0aW9uIGNyZWF0ZU1heGltdW1WTyhkaXIpe3JldHVybntkaXJlY3Rpb246ZGlyLGRpc3RhbmNlOjB9fWZ1bmN0aW9uIGNhbGN1bGF0ZUR1cmF0aW9uKCl7cmV0dXJuIGVuZFRpbWUtc3RhcnRUaW1lfWZ1bmN0aW9uIGNhbGN1bGF0ZVRvdWNoZXNEaXN0YW5jZShzdGFydFBvaW50LGVuZFBvaW50KXt2YXIgZGlmZlg9TWF0aC5hYnMoc3RhcnRQb2ludC54LWVuZFBvaW50LngpLGRpZmZZPU1hdGguYWJzKHN0YXJ0UG9pbnQueS1lbmRQb2ludC55KTtyZXR1cm4gTWF0aC5yb3VuZChNYXRoLnNxcnQoZGlmZlgqZGlmZlgrZGlmZlkqZGlmZlkpKX1mdW5jdGlvbiBjYWxjdWxhdGVQaW5jaFpvb20oc3RhcnREaXN0YW5jZSxlbmREaXN0YW5jZSl7dmFyIHBlcmNlbnQ9ZW5kRGlzdGFuY2Uvc3RhcnREaXN0YW5jZSoxO3JldHVybiBwZXJjZW50LnRvRml4ZWQoMil9ZnVuY3Rpb24gY2FsY3VsYXRlUGluY2hEaXJlY3Rpb24oKXtyZXR1cm4gMT5waW5jaFpvb20/T1VUOklOfWZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RhbmNlKHN0YXJ0UG9pbnQsZW5kUG9pbnQpe3JldHVybiBNYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhlbmRQb2ludC54LXN0YXJ0UG9pbnQueCwyKStNYXRoLnBvdyhlbmRQb2ludC55LXN0YXJ0UG9pbnQueSwyKSkpfWZ1bmN0aW9uIGNhbGN1bGF0ZUFuZ2xlKHN0YXJ0UG9pbnQsZW5kUG9pbnQpe3ZhciB4PXN0YXJ0UG9pbnQueC1lbmRQb2ludC54LHk9ZW5kUG9pbnQueS1zdGFydFBvaW50Lnkscj1NYXRoLmF0YW4yKHkseCksYW5nbGU9TWF0aC5yb3VuZCgxODAqci9NYXRoLlBJKTtyZXR1cm4gMD5hbmdsZSYmKGFuZ2xlPTM2MC1NYXRoLmFicyhhbmdsZSkpLGFuZ2xlfWZ1bmN0aW9uIGNhbGN1bGF0ZURpcmVjdGlvbihzdGFydFBvaW50LGVuZFBvaW50KXtpZihjb21wYXJlUG9pbnRzKHN0YXJ0UG9pbnQsZW5kUG9pbnQpKXJldHVybiBOT05FO3ZhciBhbmdsZT1jYWxjdWxhdGVBbmdsZShzdGFydFBvaW50LGVuZFBvaW50KTtyZXR1cm4gNDU+PWFuZ2xlJiZhbmdsZT49MD9MRUZUOjM2MD49YW5nbGUmJmFuZ2xlPj0zMTU/TEVGVDphbmdsZT49MTM1JiYyMjU+PWFuZ2xlP1JJR0hUOmFuZ2xlPjQ1JiYxMzU+YW5nbGU/RE9XTjpVUH1mdW5jdGlvbiBnZXRUaW1lU3RhbXAoKXt2YXIgbm93PW5ldyBEYXRlO3JldHVybiBub3cuZ2V0VGltZSgpfWZ1bmN0aW9uIGdldGJvdW5kcyhlbCl7ZWw9JChlbCk7dmFyIG9mZnNldD1lbC5vZmZzZXQoKSxib3VuZHM9e2xlZnQ6b2Zmc2V0LmxlZnQscmlnaHQ6b2Zmc2V0LmxlZnQrZWwub3V0ZXJXaWR0aCgpLHRvcDpvZmZzZXQudG9wLGJvdHRvbTpvZmZzZXQudG9wK2VsLm91dGVySGVpZ2h0KCl9O3JldHVybiBib3VuZHN9ZnVuY3Rpb24gaXNJbkJvdW5kcyhwb2ludCxib3VuZHMpe3JldHVybiBwb2ludC54PmJvdW5kcy5sZWZ0JiZwb2ludC54PGJvdW5kcy5yaWdodCYmcG9pbnQueT5ib3VuZHMudG9wJiZwb2ludC55PGJvdW5kcy5ib3R0b219ZnVuY3Rpb24gY29tcGFyZVBvaW50cyhwb2ludEEscG9pbnRCKXtyZXR1cm4gcG9pbnRBLng9PXBvaW50Qi54JiZwb2ludEEueT09cG9pbnRCLnl9dmFyIG9wdGlvbnM9JC5leHRlbmQoe30sb3B0aW9ucyksdXNlVG91Y2hFdmVudHM9U1VQUE9SVFNfVE9VQ0h8fFNVUFBPUlRTX1BPSU5URVJ8fCFvcHRpb25zLmZhbGxiYWNrVG9Nb3VzZUV2ZW50cyxTVEFSVF9FVj11c2VUb3VjaEV2ZW50cz9TVVBQT1JUU19QT0lOVEVSP1NVUFBPUlRTX1BPSU5URVJfSUUxMD9cIk1TUG9pbnRlckRvd25cIjpcInBvaW50ZXJkb3duXCI6XCJ0b3VjaHN0YXJ0XCI6XCJtb3VzZWRvd25cIixNT1ZFX0VWPXVzZVRvdWNoRXZlbnRzP1NVUFBPUlRTX1BPSU5URVI/U1VQUE9SVFNfUE9JTlRFUl9JRTEwP1wiTVNQb2ludGVyTW92ZVwiOlwicG9pbnRlcm1vdmVcIjpcInRvdWNobW92ZVwiOlwibW91c2Vtb3ZlXCIsRU5EX0VWPXVzZVRvdWNoRXZlbnRzP1NVUFBPUlRTX1BPSU5URVI/U1VQUE9SVFNfUE9JTlRFUl9JRTEwP1wiTVNQb2ludGVyVXBcIjpcInBvaW50ZXJ1cFwiOlwidG91Y2hlbmRcIjpcIm1vdXNldXBcIixMRUFWRV9FVj11c2VUb3VjaEV2ZW50cz9TVVBQT1JUU19QT0lOVEVSP1wibW91c2VsZWF2ZVwiOm51bGw6XCJtb3VzZWxlYXZlXCIsQ0FOQ0VMX0VWPVNVUFBPUlRTX1BPSU5URVI/U1VQUE9SVFNfUE9JTlRFUl9JRTEwP1wiTVNQb2ludGVyQ2FuY2VsXCI6XCJwb2ludGVyY2FuY2VsXCI6XCJ0b3VjaGNhbmNlbFwiLGRpc3RhbmNlPTAsZGlyZWN0aW9uPW51bGwsY3VycmVudERpcmVjdGlvbj1udWxsLGR1cmF0aW9uPTAsc3RhcnRUb3VjaGVzRGlzdGFuY2U9MCxlbmRUb3VjaGVzRGlzdGFuY2U9MCxwaW5jaFpvb209MSxwaW5jaERpc3RhbmNlPTAscGluY2hEaXJlY3Rpb249MCxtYXhpbXVtc01hcD1udWxsLCRlbGVtZW50PSQoZWxlbWVudCkscGhhc2U9XCJzdGFydFwiLGZpbmdlckNvdW50PTAsZmluZ2VyRGF0YT17fSxzdGFydFRpbWU9MCxlbmRUaW1lPTAscHJldmlvdXNUb3VjaEVuZFRpbWU9MCxmaW5nZXJDb3VudEF0UmVsZWFzZT0wLGRvdWJsZVRhcFN0YXJ0VGltZT0wLHNpbmdsZVRhcFRpbWVvdXQ9bnVsbCxob2xkVGltZW91dD1udWxsO3RyeXskZWxlbWVudC5iaW5kKFNUQVJUX0VWLHRvdWNoU3RhcnQpLCRlbGVtZW50LmJpbmQoQ0FOQ0VMX0VWLHRvdWNoQ2FuY2VsKX1jYXRjaChlKXskLmVycm9yKFwiZXZlbnRzIG5vdCBzdXBwb3J0ZWQgXCIrU1RBUlRfRVYrXCIsXCIrQ0FOQ0VMX0VWK1wiIG9uIGpRdWVyeS5zd2lwZVwiKX10aGlzLmVuYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc2FibGUoKSwkZWxlbWVudC5iaW5kKFNUQVJUX0VWLHRvdWNoU3RhcnQpLCRlbGVtZW50LmJpbmQoQ0FOQ0VMX0VWLHRvdWNoQ2FuY2VsKSwkZWxlbWVudH0sdGhpcy5kaXNhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHJlbW92ZUxpc3RlbmVycygpLCRlbGVtZW50fSx0aGlzLmRlc3Ryb3k9ZnVuY3Rpb24oKXtyZW1vdmVMaXN0ZW5lcnMoKSwkZWxlbWVudC5kYXRhKFBMVUdJTl9OUyxudWxsKSwkZWxlbWVudD1udWxsfSx0aGlzLm9wdGlvbj1mdW5jdGlvbihwcm9wZXJ0eSx2YWx1ZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIHByb3BlcnR5KW9wdGlvbnM9JC5leHRlbmQob3B0aW9ucyxwcm9wZXJ0eSk7ZWxzZSBpZih2b2lkIDAhPT1vcHRpb25zW3Byb3BlcnR5XSl7aWYodm9pZCAwPT09dmFsdWUpcmV0dXJuIG9wdGlvbnNbcHJvcGVydHldO29wdGlvbnNbcHJvcGVydHldPXZhbHVlfWVsc2V7aWYoIXByb3BlcnR5KXJldHVybiBvcHRpb25zOyQuZXJyb3IoXCJPcHRpb24gXCIrcHJvcGVydHkrXCIgZG9lcyBub3QgZXhpc3Qgb24galF1ZXJ5LnN3aXBlLm9wdGlvbnNcIil9cmV0dXJuIG51bGx9fXZhciBWRVJTSU9OPVwiMS42LjE4XCIsTEVGVD1cImxlZnRcIixSSUdIVD1cInJpZ2h0XCIsVVA9XCJ1cFwiLERPV049XCJkb3duXCIsSU49XCJpblwiLE9VVD1cIm91dFwiLE5PTkU9XCJub25lXCIsQVVUTz1cImF1dG9cIixTV0lQRT1cInN3aXBlXCIsUElOQ0g9XCJwaW5jaFwiLFRBUD1cInRhcFwiLERPVUJMRV9UQVA9XCJkb3VibGV0YXBcIixMT05HX1RBUD1cImxvbmd0YXBcIixIT1JJWk9OVEFMPVwiaG9yaXpvbnRhbFwiLFZFUlRJQ0FMPVwidmVydGljYWxcIixBTExfRklOR0VSUz1cImFsbFwiLERPVUJMRV9UQVBfVEhSRVNIT0xEPTEwLFBIQVNFX1NUQVJUPVwic3RhcnRcIixQSEFTRV9NT1ZFPVwibW92ZVwiLFBIQVNFX0VORD1cImVuZFwiLFBIQVNFX0NBTkNFTD1cImNhbmNlbFwiLFNVUFBPUlRTX1RPVUNIPVwib250b3VjaHN0YXJ0XCJpbiB3aW5kb3csU1VQUE9SVFNfUE9JTlRFUl9JRTEwPXdpbmRvdy5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCYmIXdpbmRvdy5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQmJiFTVVBQT1JUU19UT1VDSCxTVVBQT1JUU19QT0lOVEVSPSh3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkfHx3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQpJiYhU1VQUE9SVFNfVE9VQ0gsUExVR0lOX05TPVwiVG91Y2hTd2lwZVwiLGRlZmF1bHRzPXtmaW5nZXJzOjEsdGhyZXNob2xkOjc1LGNhbmNlbFRocmVzaG9sZDpudWxsLHBpbmNoVGhyZXNob2xkOjIwLG1heFRpbWVUaHJlc2hvbGQ6bnVsbCxmaW5nZXJSZWxlYXNlVGhyZXNob2xkOjI1MCxsb25nVGFwVGhyZXNob2xkOjUwMCxkb3VibGVUYXBUaHJlc2hvbGQ6MjAwLHN3aXBlOm51bGwsc3dpcGVMZWZ0Om51bGwsc3dpcGVSaWdodDpudWxsLHN3aXBlVXA6bnVsbCxzd2lwZURvd246bnVsbCxzd2lwZVN0YXR1czpudWxsLHBpbmNoSW46bnVsbCxwaW5jaE91dDpudWxsLHBpbmNoU3RhdHVzOm51bGwsY2xpY2s6bnVsbCx0YXA6bnVsbCxkb3VibGVUYXA6bnVsbCxsb25nVGFwOm51bGwsaG9sZDpudWxsLHRyaWdnZXJPblRvdWNoRW5kOiEwLHRyaWdnZXJPblRvdWNoTGVhdmU6ITEsYWxsb3dQYWdlU2Nyb2xsOlwiYXV0b1wiLGZhbGxiYWNrVG9Nb3VzZUV2ZW50czohMCxleGNsdWRlZEVsZW1lbnRzOlwiLm5vU3dpcGVcIixwcmV2ZW50RGVmYXVsdEV2ZW50czohMH07JC5mbi5zd2lwZT1mdW5jdGlvbihtZXRob2Qpe3ZhciAkdGhpcz0kKHRoaXMpLHBsdWdpbj0kdGhpcy5kYXRhKFBMVUdJTl9OUyk7aWYocGx1Z2luJiZcInN0cmluZ1wiPT10eXBlb2YgbWV0aG9kKXtpZihwbHVnaW5bbWV0aG9kXSlyZXR1cm4gcGx1Z2luW21ldGhvZF0uYXBwbHkocGx1Z2luLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7JC5lcnJvcihcIk1ldGhvZCBcIittZXRob2QrXCIgZG9lcyBub3QgZXhpc3Qgb24galF1ZXJ5LnN3aXBlXCIpfWVsc2UgaWYocGx1Z2luJiZcIm9iamVjdFwiPT10eXBlb2YgbWV0aG9kKXBsdWdpbi5vcHRpb24uYXBwbHkocGx1Z2luLGFyZ3VtZW50cyk7ZWxzZSBpZighKHBsdWdpbnx8XCJvYmplY3RcIiE9dHlwZW9mIG1ldGhvZCYmbWV0aG9kKSlyZXR1cm4gaW5pdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuICR0aGlzfSwkLmZuLnN3aXBlLnZlcnNpb249VkVSU0lPTiwkLmZuLnN3aXBlLmRlZmF1bHRzPWRlZmF1bHRzLCQuZm4uc3dpcGUucGhhc2VzPXtQSEFTRV9TVEFSVDpQSEFTRV9TVEFSVCxQSEFTRV9NT1ZFOlBIQVNFX01PVkUsUEhBU0VfRU5EOlBIQVNFX0VORCxQSEFTRV9DQU5DRUw6UEhBU0VfQ0FOQ0VMfSwkLmZuLnN3aXBlLmRpcmVjdGlvbnM9e0xFRlQ6TEVGVCxSSUdIVDpSSUdIVCxVUDpVUCxET1dOOkRPV04sSU46SU4sT1VUOk9VVH0sJC5mbi5zd2lwZS5wYWdlU2Nyb2xsPXtOT05FOk5PTkUsSE9SSVpPTlRBTDpIT1JJWk9OVEFMLFZFUlRJQ0FMOlZFUlRJQ0FMLEFVVE86QVVUT30sJC5mbi5zd2lwZS5maW5nZXJzPXtPTkU6MSxUV086MixUSFJFRTozLEZPVVI6NCxGSVZFOjUsQUxMOkFMTF9GSU5HRVJTfX0pOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgeW1hcHMucmVhZHkoaW5pdCk7XHJcbiAgdmFyIHBsYWNlbWFya3MgPSBbXHJcbiAgICB7XHJcbiAgICAgIGxhdGl0dWRlOiA1OS44OTg5OTg4NCxcclxuICAgICAgbG9uZ2l0dWRlOiAzMC40ODQ1MjYwMCxcclxuICAgICAgaGludENvbnRlbnQ6ICc8ZGl2IGNsYXNzPVwibWFwX19oaW50XCI+TXIuIEJ1cmdlciDQvdCwINCU0YvQsdC10L3QutC+PC9kaXY+JyxcclxuICAgICAgYmFsbG9vbkNvbnRlbnQ6ICfQoSDRiNCw0LLQtdGA0LzQvtC5INGBINC+0LrRgNCw0LjQvSDRgdC70L7QttC90L4g0YLRj9Cz0LDRgtGM0YHRjywg0L3QviDQvNGLINCyINGB0LXQsdC1INGD0LLQtdGA0LXQvdGLLiDQl9Cw0YXQvtC00LjRgtC1OiDQo9C7LiDQmtGA0YvQu9C10L3QutC+INC0LjMxJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGxhdGl0dWRlOiA1OS45MzU3MjQ3NixcclxuICAgICAgbG9uZ2l0dWRlOiAzMC4zMjE2MzA4NyxcclxuICAgICAgaGludENvbnRlbnQ6ICc8ZGl2IGNsYXNzPVwibWFwX19oaW50XCI+TXIuIEJ1cmdlciDQsiDQptC10L3RgtGA0LU8L2Rpdj4nLFxyXG4gICAgICBiYWxsb29uQ29udGVudDogJ9Cd0L7QstCw0Y8g0LTQvtGB0YLQvtC/0YDQuNC80LXRh9Cw0YLQtdC70YzQvdC+0YHRgtGMINCyINGB0LDQvNC+0Lwg0YbQtdC90YLRgNC1INCh0LXQstC10YDQvdC+0Lkg0KHRgtC+0LvQuNGG0YsuINCW0LTRkdC8INCy0LDRgTog0J3QtdCy0YHQutC40Lkg0L/RgNC+0YHQv9C10LrRgiDQtC4gMTknLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgbGF0aXR1ZGU6IDU5Ljk2NTI3NjQ1LFxyXG4gICAgICBsb25naXR1ZGU6IDMwLjMxMDcyMjUyLFxyXG4gICAgICBoaW50Q29udGVudDogJzxkaXYgY2xhc3M9XCJtYXBfX2hpbnRcIj5Nci4gQnVyZ2VyINC90LAg0J/QtdGC0YDQvtCz0YDQsNC00LrQtTwvZGl2PicsXHJcbiAgICAgIGJhbGxvb25Db250ZW50OiAn0JHQvtC70YzRiNC40LUg0LHRg9GA0LPQtdGA0Ysg0L3QsCDQkdC+0LvRjNGI0L7QvC4g0JAg0LXRidGRINC+0L3QuCDRgdCw0LzRi9C1INCy0LrRg9GB0L3Ri9C1LiDQndC1INC/0YDQvtGF0L7QtNC40YLQtSDQvNC40LzQvjog0JHQvtC70YzRiNC+0Lkg0L/RgNC+0YHQv9C10LrRgiDQn9ChINC0LiA5MicsXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICB2YXIgbWFwID0gbmV3IHltYXBzLk1hcCgnbWFwJywge1xyXG4gICAgICBjZW50ZXI6IFs1OS45NTAwNTgwMiwgMzAuMzE3ODEzOTJdLFxyXG4gICAgICB6b29tOiAxMixcclxuICAgICAgY29udHJvbHM6IFsnem9vbUNvbnRyb2wnXSxcclxuICAgICAgYmVoYXZpb3JzOiBbJ2RyYWcnXVxyXG4gICAgfSk7XHJcblxyXG4gICAgcGxhY2VtYXJrcy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgdmFyIHBsYWNlbWFyayA9IG5ldyB5bWFwcy5QbGFjZW1hcmsoW29iai5sYXRpdHVkZSwgb2JqLmxvbmdpdHVkZV0sIHtcclxuICAgICAgICBoaW50Q29udGVudDogW29iai5oaW50Q29udGVudF0sXHJcbiAgICAgICAgYmFsbG9vbkNvbnRlbnQ6IFtvYmouYmFsbG9vbkNvbnRlbnRdLFxyXG4gICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGljb25MYXlvdXQ6ICdkZWZhdWx0I2ltYWdlJyxcclxuICAgICAgICAgIGljb25JbWFnZUhyZWY6ICcuL3N2Zy9tYXAtbWFya2VyLnN2ZycsXHJcbiAgICAgICAgICBpY29uSW1hZ2VTaXplOiBbNDYsIDU3XSxcclxuICAgICAgICAgIGljb25JbWFnZU9mZnNldDogWy0yMywgLTU3XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICBtYXAuZ2VvT2JqZWN0cy5hZGQocGxhY2VtYXJrKTtcclxuICAgIH0pO1xyXG4gIH1cclxufSkoKVxyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gIHZhciBtb2RhbFJldiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1yZXZpZXdzJyk7XHJcbiAgbW9kYWxUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1yZXZpZXdzX190aXRsZScpO1xyXG4gIG1vZGFsVGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1yZXZpZXdzX190ZXh0Jyk7XHJcbiAgY29uc3QgcmV2TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXZpZXdzX19saXN0Jyk7XHJcbiAgcmV2Q2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtcmV2aWV3c19fY2xvc2UnKTtcclxuICByZXZDbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBtb2RhbFJldi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdpbml0aWFsJztcclxuICB9KTtcclxuXHJcbiAgcmV2TGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdCgnYnV0dG9uJyk7XHJcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xyXG4gICAgbW9kYWxSZXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgIG1vZGFsVGl0bGUuaW5uZXJUZXh0ID0gdGFyZ2V0LnBhcmVudE5vZGUuZmlyc3RDaGlsZC5uZXh0U2libGluZy50ZXh0Q29udGVudDtcclxuICAgIG1vZGFsVGV4dC5pbm5lclRleHQgPSB0YXJnZXQucGFyZW50Tm9kZS5maXJzdENoaWxkLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nLm5leHRTaWJsaW5nLnRleHRDb250ZW50O1xyXG4gIH0pO1xyXG59KSgpXHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3Qgc2VjdGlvbnMgPSAkKFwiLnNlY3Rpb25cIik7XHJcbiAgICBjb25zdCBkaXNwbGF5ID0gJChcIi5tYWluY29udGVudFwiKTtcclxuICAgIGxldCBpbnNjcm9sbCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IG1vYmlsZURldGVjdCA9IG5ldyBNb2JpbGVEZXRlY3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgY29uc3QgaXNNb2JpbGUgPSBtb2JpbGVEZXRlY3QubW9iaWxlKCk7XHJcblxyXG4gICAgY29uc3QgY291bnRQb3NpdGlvblBlcmNlbnQgPSBzZWN0aW9uRXEgPT4ge1xyXG4gICAgICByZXR1cm4gYCR7c2VjdGlvbkVxICogLTEwMH0lYDtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgc3dpdGNoQWN0aXZlQ2xhc3MgPSAoZWxlbXMsIGVsZW1OZHgpID0+IHtcclxuICAgICAgZWxlbXNcclxuICAgICAgICAuZXEoZWxlbU5keClcclxuICAgICAgICAuYWRkQ2xhc3MoXCJhY3RpdmVcIilcclxuICAgICAgICAuc2libGluZ3MoKVxyXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdW5CbG9ja1Njcm9sbCA9ICgpID0+IHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgaW5zY3JvbGwgPSBmYWxzZTtcclxuICAgICAgfSwgMTMwMCk7IC8vINC/0L7QtNC+0LbQtNCw0YLRjCDQv9C+0LrQsCDQt9Cw0LLQtdGA0YjQuNGC0YHRjyDQuNC90LXRgNGG0LjRjyDQvdCwINGC0LDRh9C/0LDQtNCw0YVcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcGVyZm9ybVRyYW5zaXRpb24gPSBzZWN0aW9uRXEgPT4ge1xyXG4gICAgICBpZiAoaW5zY3JvbGwpIHJldHVybjtcclxuICAgICAgaW5zY3JvbGwgPSB0cnVlO1xyXG5cclxuICAgICAgY29uc3QgcG9zaXRpb24gPSBjb3VudFBvc2l0aW9uUGVyY2VudChzZWN0aW9uRXEpO1xyXG4gICAgICBjb25zdCBzd2l0Y2hGaXhlZE1lbnVDbGFzcyA9ICgpID0+XHJcbiAgICAgICAgc3dpdGNoQWN0aXZlQ2xhc3MoJChcIi5maXhlZC1tZW51X19pdGVtXCIpLCBzZWN0aW9uRXEpO1xyXG5cclxuICAgICAgc3dpdGNoQWN0aXZlQ2xhc3Moc2VjdGlvbnMsIHNlY3Rpb25FcSk7XHJcbiAgICAgIHN3aXRjaEZpeGVkTWVudUNsYXNzKCk7XHJcblxyXG4gICAgICBkaXNwbGF5LmNzcyh7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgke3Bvc2l0aW9ufSlgXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdW5CbG9ja1Njcm9sbCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBzY3JvbGxWaWV3cG9ydCA9IGRpcmVjdGlvbiA9PiB7XHJcbiAgICAgIGNvbnN0IGFjdGl2ZVNlY3Rpb24gPSBzZWN0aW9ucy5maWx0ZXIoXCIuYWN0aXZlXCIpO1xyXG4gICAgICBjb25zdCBuZXh0U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ubmV4dCgpO1xyXG4gICAgICBjb25zdCBwcmV2U2VjdGlvbiA9IGFjdGl2ZVNlY3Rpb24ucHJldigpO1xyXG5cclxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJuZXh0XCIgJiYgbmV4dFNlY3Rpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgcGVyZm9ybVRyYW5zaXRpb24obmV4dFNlY3Rpb24uaW5kZXgoKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwicHJldlwiICYmIHByZXZTZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIHBlcmZvcm1UcmFuc2l0aW9uKHByZXZTZWN0aW9uLmluZGV4KCkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKHtcclxuICAgICAgd2hlZWw6IGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IGUub3JpZ2luYWxFdmVudC5kZWx0YVk7XHJcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gZGVsdGFZID4gMCA/IFwibmV4dFwiIDogXCJwcmV2XCI7XHJcbiAgICAgICAgc2Nyb2xsVmlld3BvcnQoZGlyZWN0aW9uKTtcclxuICAgICAgfSxcclxuICAgICAga2V5ZG93bjogZSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IGUudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBjb25zdCB1c2VyVHlwaW5nSW5JbnB1dHMgPSB0YWdOYW1lID09PSBcImlucHV0XCIgfHwgdGFnTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiO1xyXG5cclxuICAgICAgICBpZiAodXNlclR5cGluZ0luSW5wdXRzKSByZXR1cm47XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XHJcbiAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICBzY3JvbGxWaWV3cG9ydChcIm5leHRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgIHNjcm9sbFZpZXdwb3J0KFwicHJldlwiKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKFwiW2RhdGEtc2Nyb2xsLXRvXVwiKS5vbihcImNsaWNrXCIsIGUgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHBlcmZvcm1UcmFuc2l0aW9uKHBhcnNlSW50KCQoZS5jdXJyZW50VGFyZ2V0KS5hdHRyKFwiZGF0YS1zY3JvbGwtdG9cIikpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vINGA0LDQt9GA0LXRiNCw0LXQvCDRgdCy0LDQudC/INC90LAg0LzQvtCx0LjQu9GM0L3QuNC60LDRhVxyXG4gICAgaWYgKGlzTW9iaWxlKSB7XHJcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwidG91Y2htb3ZlXCIsXHJcbiAgICAgICAgZSA9PiB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7IHBhc3NpdmU6IGZhbHNlIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgICQoXCJib2R5XCIpLnN3aXBlKHtcclxuICAgICAgICBzd2lwZTogKGV2ZW50LCBkaXJlY3Rpb24pID0+IHtcclxuICAgICAgICAgIGxldCBzY3JvbGxEaXJlY3Jpb247XHJcbiAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBcInVwXCIpIHNjcm9sbERpcmVjcmlvbiA9IFwibmV4dFwiO1xyXG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJkb3duXCIpIHNjcm9sbERpcmVjcmlvbiA9IFwicHJldlwiO1xyXG4gICAgICAgICAgc2Nyb2xsVmlld3BvcnQoc2Nyb2xsRGlyZWNyaW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KSgpXHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvX19kaXNwbGF5Jyk7XHJcbiAgdmFyIGJpZ1BsYXlCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlkZW9fX3BsYXlidG4nKTtcclxuICB2YXIgc21hbGxQbGF5QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvX19jb250cm9sbHMtcGxheS1wbGF5Jyk7XHJcbiAgdmFyIHNtYWxsUGF1c2VCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlkZW9fX2NvbnRyb2xscy1wbGF5LXBhdXNlJyk7XHJcbiAgdmFyIHZvbHVtZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy52aWRlb19fY29udHJvbGxzLXZvbHVtZScpO1xyXG4gIHZhciBwb3N0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlkZW9fX2NvbnRyb2xscy12b2x1bWUnKTtcclxuICB2YXIgY2lyY2xlUHJvZ3Jlc3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlkZW9fX2NvbnRyb2xscy1jaXJjbGUtLXByb2dyZXNzJyk7XHJcbiAgdmFyIHByb2dyZXNzQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZGVvX19jb250cm9sbHMtYmFyLS1wcm9ncmVzcycpO1xyXG4gIHZhciBjaXJjbGVWb2x1bWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlkZW9fX2NvbnRyb2xscy1jaXJjbGUtLXZvbHVtZScpO1xyXG4gIHZhciB2b2x1bWVCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlkZW9fX2NvbnRyb2xscy1iYXItLXZvbHVtZScpO1xyXG5cclxuICBjaXJjbGVWb2x1bWUuc3R5bGUubGVmdCA9ICczMCUnO1xyXG4gIHZhciBjdXJyZW50Vm9sdW1lID0gMC4zO1xyXG4gIHZpZGVvLnZvbHVtZSA9IGN1cnJlbnRWb2x1bWU7XHJcblxyXG5cclxuICBiaWdQbGF5QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHZpZGVvLnBsYXkoKTtcclxuICAgIGJpZ1BsYXlCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIHNtYWxsUGF1c2VCdG4uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICBzbWFsbFBsYXlCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICB9KVxyXG5cclxuICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh2aWRlby5wYXVzZWQpIHtcclxuICAgICAgdmlkZW8ucGxheSgpO1xyXG4gICAgICBiaWdQbGF5QnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIHNtYWxsUGxheUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICBzbWFsbFBhdXNlQnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmlkZW8ucGF1c2UoKTtcclxuICAgICAgYmlnUGxheUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgc21hbGxQbGF5QnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICBzbWFsbFBhdXNlQnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwb3NpdGlvbiA9IHZpZGVvLmN1cnJlbnRUaW1lIC8gdmlkZW8uZHVyYXRpb247XHJcbiAgICBjaXJjbGVQcm9ncmVzcy5zdHlsZS5sZWZ0ID0gcG9zaXRpb24gKiAxMDAgKyAnJSc7XHJcbiAgfSlcclxuXHJcbiAgc21hbGxQbGF5QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICh2aWRlby5wYXVzZWQpIHtcclxuICAgICAgdmlkZW8ucGxheSgpO1xyXG4gICAgICBiaWdQbGF5QnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgc21hbGxQYXVzZUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2aWRlby5wYXVzZSgpO1xyXG5cclxuICAgIH1cclxuICB9KVxyXG5cclxuICBzbWFsbFBhdXNlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICghdmlkZW8ucGF1c2VkKSB7XHJcbiAgICAgIHZpZGVvLnBhdXNlKCk7XHJcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgc21hbGxQbGF5QnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICBiaWdQbGF5QnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZpZGVvLnBsYXkoKTtcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBwcm9ncmVzc0Jhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAodmlkZW8ucGF1c2VkKSB7XHJcbiAgICAgIGJpZ1BsYXlCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgc21hbGxQYXVzZUJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgc21hbGxQbGF5QnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICBsZXQgYmFyV2lkdGggPSB0aGlzLm9mZnNldFdpZHRoO1xyXG4gICAgbGV0IGNsaWNrUG9zaXRpb24gPSBlLm9mZnNldFg7XHJcbiAgICBjaXJjbGVQcm9ncmVzcy5zdHlsZS5sZWZ0ID0gKDEwMCAqIGNsaWNrUG9zaXRpb24gLyBiYXJXaWR0aCkgKyAnJSc7XHJcbiAgICB2aWRlby5jdXJyZW50VGltZSA9IHZpZGVvLmR1cmF0aW9uICogY2xpY2tQb3NpdGlvbiAvIGJhcldpZHRoO1xyXG5cclxuICAgIHZpZGVvLnBsYXkoKTtcclxuICB9KVxyXG5cclxuXHJcblxyXG4gIHZvbHVtZUJhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBsZXQgYmFyV2lkdGggPSB0aGlzLm9mZnNldFdpZHRoO1xyXG4gICAgbGV0IGNsaWNrUG9zaXRpb24gPSBlLm9mZnNldFg7XHJcbiAgICBjaXJjbGVWb2x1bWUuc3R5bGUubGVmdCA9ICgxMDAgKiBjbGlja1Bvc2l0aW9uIC8gYmFyV2lkdGgpICsgJyUnO1xyXG4gICAgY3VycmVudFZvbHVtZSA9IGNsaWNrUG9zaXRpb24gLyBiYXJXaWR0aDtcclxuICAgIHZpZGVvLnZvbHVtZSA9IGN1cnJlbnRWb2x1bWU7XHJcbiAgICB2b2x1bWVCdG4uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgfSlcclxuXHJcbiAgdm9sdW1lQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcclxuICAgICAgdmlkZW8udm9sdW1lID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZpZGVvLnZvbHVtZSA9IGN1cnJlbnRWb2x1bWU7XHJcbiAgICB9XHJcbiAgfSlcclxufSkoKVxyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgcHJldlNsaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fcHJldicpO1xyXG4gICAgY29uc3QgbmV4dFNsaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fbmV4dCcpO1xyXG4gICAgY29uc3Qgc2xpZGVyV2luZG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1cmdlcnNfX3NsaWRlcicpO1xyXG4gICAgY29uc3Qgc2xpZGVyTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXJnZXJzX19jb2wnKTtcclxuICAgIGNvbnN0IHNsaWRlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbGlkZScpO1xyXG4gICAgbGV0IG1pblJpZ2h0ID0gMDtcclxuICAgIGxldCBzdGVwID0gc2xpZGVyV2luZG93Lm9mZnNldFdpZHRoO1xyXG4gICAgbGV0IG1heFJpZ2h0ID0gKHNsaWRlcy5sZW5ndGggLSAxKSAqIHN0ZXA7XHJcbiAgICBsZXQgY3VycmVudFJpZ2h0ID0gMDtcclxuICAgIHNsaWRlckxpc3Quc3R5bGUucmlnaHQgPSBjdXJyZW50UmlnaHQ7XHJcbiAgICBmdW5jdGlvbiBsZWZ0TW92ZSgpIHtcclxuICAgICAgICBpZiAoY3VycmVudFJpZ2h0ID4gbWluUmlnaHQpIHtcclxuICAgICAgICAgICAgY3VycmVudFJpZ2h0IC09IHN0ZXA7XHJcbiAgICAgICAgICAgIHNsaWRlckxpc3Quc3R5bGUucmlnaHQgPSBjdXJyZW50UmlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudFJpZ2h0ID0gbWF4UmlnaHQ7XHJcbiAgICAgICAgICAgIHNsaWRlckxpc3Quc3R5bGUucmlnaHQgPSBtYXhSaWdodCArIFwicHhcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByaWdodE1vdmUoKSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRSaWdodCA8IG1heFJpZ2h0KSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRSaWdodCArPSBzdGVwO1xyXG4gICAgICAgICAgICBzbGlkZXJMaXN0LnN0eWxlLnJpZ2h0ID0gY3VycmVudFJpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRSaWdodCA9IG1pblJpZ2h0O1xyXG4gICAgICAgICAgICBzbGlkZXJMaXN0LnN0eWxlLnJpZ2h0ID0gbWluUmlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJldlNsaWRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgbGVmdE1vdmUoKTtcclxuICAgIH0pO1xyXG4gICAgbmV4dFNsaWRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcmlnaHRNb3ZlKCk7XHJcbiAgICB9KTtcclxufSkoKVxyXG4iXX0=
